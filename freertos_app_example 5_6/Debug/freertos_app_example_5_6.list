
freertos_app_example_5_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f5c  08006f5c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f64  08006f64  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004318  20000080  08006fec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004398  08006fec  00024398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001529e  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003890  00000000  00000000  00035391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00038c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed2  00000000  00000000  00039f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b07  00000000  00000000  0003ae2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ba6  00000000  00000000  00054931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097322  00000000  00000000  0006c4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d48  00000000  00000000  001037fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00109544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006af0 	.word	0x08006af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006af0 	.word	0x08006af0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000009c 	.word	0x2000009c
 80005bc:	200000fc 	.word	0x200000fc

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80005c4:	f005 f85c 	bl	8005680 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb46 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f810 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8f0 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8c4 	bl	8000760 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d8:	f000 f876 	bl	80006c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x2c>)
 80005de:	f001 fb49 	bl	8001c74 <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005e2:	f004 fabd 	bl	8004b60 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f002 f9f3 	bl	80029d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x2a>
 80005ec:	200002fc 	.word	0x200002fc

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 faf7 	bl	8005bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <SystemClock_Config+0xd0>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd4>)
 800063e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000664:	2310      	movs	r3, #16
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000672:	2307      	movs	r3, #7
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fde0 	bl	8001240 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f939 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f842 	bl	8001730 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b2:	f000 f923 	bl	80008fc <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_TIM2_Init+0x94>)
 80006e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_TIM2_Init+0x94>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_TIM2_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_TIM2_Init+0x94>)
 80006fa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80006fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_TIM2_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM2_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM2_Init+0x94>)
 800070e:	f001 fa61 	bl	8001bd4 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000718:	f000 f8f0 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_TIM2_Init+0x94>)
 800072a:	f001 fbf5 	bl	8001f18 <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 f8e2 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_TIM2_Init+0x94>)
 8000746:	f001 fdfd 	bl	8002344 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f8d4 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200002fc 	.word	0x200002fc

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f001 fe56 	bl	8002448 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f8ab 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000344 	.word	0x20000344
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|LED_B_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2133      	movs	r1, #51	; 0x33
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fcca 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xd8>)
 800085c:	f000 fb20 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin|LD2_Pin;
 8000860:	2333      	movs	r3, #51	; 0x33
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000878:	f000 fb12 	bl	8000ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020800 	.word	0x40020800

08000890 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <configureTimerForRunTimeStats+0x14>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	2000038c 	.word	0x2000038c

080008a8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <getRunTimeCounterValue+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000038c 	.word	0x2000038c

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 f9e3 	bl	8000c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008de:	d104      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e8:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010000 	.word	0x40010000
 80008f8:	2000038c 	.word	0x2000038c

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fa7d 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000970:	d115      	bne.n	800099e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201c      	movs	r0, #28
 8000994:	f000 fa5a 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f000 fa73 	bl	8000e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a22:	f000 fa3d 	bl	8000ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f87c 	bl	8001b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a78:	f001 f866 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8000a7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <HAL_InitTick+0xd4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <HAL_InitTick+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ab4:	f001 f88e 	bl	8001bd4 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11b      	bne.n	8000afe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ac8:	f001 f8d4 	bl	8001c74 <HAL_TIM_Base_Start_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 f9d2 	bl	8000e84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d808      	bhi.n	8000af8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	2019      	movs	r0, #25
 8000aec:	f000 f9ae 	bl	8000e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0xe0>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e002      	b.n	8000afe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	20000390 	.word	0x20000390
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b52:	f001 f8f1 	bl	8001d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000390 	.word	0x20000390

08000b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM2_IRQHandler+0x10>)
 8000b66:	f001 f8e7 	bl	8001d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200002fc 	.word	0x200002fc

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f005 f874 	bl	8005c90 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20018000 	.word	0x20018000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	200003d8 	.word	0x200003d8
 8000bdc:	20004398 	.word	0x20004398

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f005 f833 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fcc3 	bl	80005c0 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c48:	08006f6c 	.word	0x08006f6c
  ldr r2, =_sbss
 8000c4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c50:	20004398 	.word	0x20004398

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f8d8 	bl	8000e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f7ff fed8 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe3c 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200003dc 	.word	0x200003dc

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200003dc 	.word	0x200003dc

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff4c 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5e:	f7ff ff61 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff ffb1 	bl	8000dd0 <NVIC_EncodePriority>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff80 	bl	8000d7c <__NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff54 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e159      	b.n	8001170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8148 	bne.w	800116a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d130      	bne.n	8000f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d017      	beq.n	8000f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a2 	beq.w	800116a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a52      	ldr	r2, [pc, #328]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x2f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x202>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	; (8001194 <HAL_GPIO_Init+0x2f4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1fe>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a47      	ldr	r2, [pc, #284]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1fa>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a46      	ldr	r2, [pc, #280]	; (800119c <HAL_GPIO_Init+0x2fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1f6>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x300>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1f2>
 800108e:	2304      	movs	r3, #4
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001092:	2307      	movs	r3, #7
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x304>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f aea2 	bls.w	8000ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e001      	b.n	80011ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	041a      	lsls	r2, r3, #16
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43d9      	mvns	r1, r3
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	400b      	ands	r3, r1
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e267      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d075      	beq.n	800134a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d00c      	beq.n	8001284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	2b08      	cmp	r3, #8
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b82      	ldr	r3, [pc, #520]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d05b      	beq.n	8001348 <HAL_RCC_OscConfig+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d157      	bne.n	8001348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e242      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x74>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6c      	ldr	r2, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a68      	ldr	r2, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b66      	ldr	r3, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fce4 	bl	8000cc4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fce0 	bl	8000cc4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e207      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xc0>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fcd0 	bl	8000cc4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fccc 	bl	8000cc4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1f3      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0xe8>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c7      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4937      	ldr	r1, [pc, #220]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x244>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc85 	bl	8000cc4 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc81 	bl	8000cc4 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a8      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4925      	ldr	r1, [pc, #148]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_OscConfig+0x244>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc64 	bl	8000cc4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc60 	bl	8000cc4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e187      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d036      	beq.n	8001498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d016      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x248>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fc44 	bl	8000cc4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc40 	bl	8000cc4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e167      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x240>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
 800145e:	e01b      	b.n	8001498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_OscConfig+0x248>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc2d 	bl	8000cc4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00e      	b.n	800148c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fc29 	bl	8000cc4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d907      	bls.n	800148c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e150      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
 8001488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ea      	bne.n	800146e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8097 	beq.w	80015d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b7d      	ldr	r3, [pc, #500]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a7c      	ldr	r2, [pc, #496]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a73      	ldr	r2, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fbe9 	bl	8000cc4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff fbe5 	bl	8000cc4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e10c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_OscConfig+0x474>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x2ea>
 800151c:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x30c>
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5e      	ldr	r2, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5b      	ldr	r2, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fbaa 	bl	8000cc4 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fba6 	bl	8000cc4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0cb      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ee      	beq.n	8001574 <HAL_RCC_OscConfig+0x334>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fb94 	bl	8000cc4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff fb90 	bl	8000cc4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0b5      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ee      	bne.n	80015a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c8:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a1 	beq.w	8001720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d05c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d141      	bne.n	8001676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb64 	bl	8000cc4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb60 	bl	8000cc4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e087      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb39 	bl	8000cc4 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb35 	bl	8000cc4 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e05c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x416>
 8001674:	e054      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb22 	bl	8000cc4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb1e 	bl	8000cc4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e045      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x444>
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e038      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x4ec>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d028      	beq.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d121      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d11a      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	3b01      	subs	r3, #1
 8001706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fa50 	bl	8000cc4 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa4c 	bl	8000cc4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f8b0 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08006e88 	.word	0x08006e88
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001900:	b094      	sub	sp, #80	; 0x50
 8001902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
 8001908:	2300      	movs	r3, #0
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190c:	2300      	movs	r3, #0
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d00d      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x40>
 8001920:	2b08      	cmp	r3, #8
 8001922:	f200 80e1 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x34>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3a>
 800192e:	e0db      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001934:	e0db      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800193a:	e0d8      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	2200      	movs	r2, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
 800195c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
 800196a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196e:	4622      	mov	r2, r4
 8001970:	462b      	mov	r3, r5
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4621      	mov	r1, r4
 8001988:	1a51      	subs	r1, r2, r1
 800198a:	6139      	str	r1, [r7, #16]
 800198c:	4629      	mov	r1, r5
 800198e:	eb63 0301 	sbc.w	r3, r3, r1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a0:	4659      	mov	r1, fp
 80019a2:	018b      	lsls	r3, r1, #6
 80019a4:	4651      	mov	r1, sl
 80019a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019aa:	4651      	mov	r1, sl
 80019ac:	018a      	lsls	r2, r1, #6
 80019ae:	4651      	mov	r1, sl
 80019b0:	ebb2 0801 	subs.w	r8, r2, r1
 80019b4:	4659      	mov	r1, fp
 80019b6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	eb18 0303 	adds.w	r3, r8, r3
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	462b      	mov	r3, r5
 80019dc:	eb49 0303 	adc.w	r3, r9, r3
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ee:	4629      	mov	r1, r5
 80019f0:	024b      	lsls	r3, r1, #9
 80019f2:	4621      	mov	r1, r4
 80019f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f8:	4621      	mov	r1, r4
 80019fa:	024a      	lsls	r2, r1, #9
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	2200      	movs	r2, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a0c:	f7fe fc40 	bl	8000290 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a18:	e058      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	2200      	movs	r2, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	4611      	mov	r1, r2
 8001a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a34:	4642      	mov	r2, r8
 8001a36:	464b      	mov	r3, r9
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	0159      	lsls	r1, r3, #5
 8001a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a46:	0150      	lsls	r0, r2, #5
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a52:	4649      	mov	r1, r9
 8001a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a70:	eb63 050b 	sbc.w	r5, r3, fp
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	00eb      	lsls	r3, r5, #3
 8001a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a82:	00e2      	lsls	r2, r4, #3
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	4643      	mov	r3, r8
 8001a8a:	18e3      	adds	r3, r4, r3
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	464b      	mov	r3, r9
 8001a90:	eb45 0303 	adc.w	r3, r5, r3
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	028b      	lsls	r3, r1, #10
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aac:	4621      	mov	r1, r4
 8001aae:	028a      	lsls	r2, r1, #10
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	61fa      	str	r2, [r7, #28]
 8001abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac0:	f7fe fbe6 	bl	8000290 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3750      	adds	r7, #80	; 0x50
 8001af4:	46bd      	mov	sp, r7
 8001af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08006e98 	.word	0x08006e98

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff ffdc 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08006e98 	.word	0x08006e98

08001b70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCC_GetClockConfig+0x60>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0207 	and.w	r2, r3, #7
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e041      	b.n	8001c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe feb0 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f000 fa70 	bl	80020f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d001      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e044      	b.n	8001d16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_TIM_Base_Start_IT+0xb0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d018      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb6:	d013      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_TIM_Base_Start_IT+0xb8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d111      	bne.n	8001d04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d010      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d02:	e007      	b.n	8001d14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40014000 	.word	0x40014000

08001d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0202 	mvn.w	r2, #2
 8001d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f999 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f98b 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f99c 	bl	80020ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d020      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0204 	mvn.w	r2, #4
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f973 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f965 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f976 	bl	80020ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0208 	mvn.w	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f94d 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f93f 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f950 	bl	80020ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0210 	mvn.w	r2, #16
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2208      	movs	r2, #8
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f927 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f919 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f92a 	bl	80020ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00c      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0201 	mvn.w	r2, #1
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fd0e 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fab6 	bl	8002434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8fb 	bl	80020e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0220 	mvn.w	r2, #32
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa88 	bl	8002420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_TIM_ConfigClockSource+0x1c>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0b4      	b.n	800209e <HAL_TIM_ConfigClockSource+0x186>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6c:	d03e      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0xd4>
 8001f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f72:	f200 8087 	bhi.w	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7a:	f000 8086 	beq.w	800208a <HAL_TIM_ConfigClockSource+0x172>
 8001f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f82:	d87f      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001f84:	2b70      	cmp	r3, #112	; 0x70
 8001f86:	d01a      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0xa6>
 8001f88:	2b70      	cmp	r3, #112	; 0x70
 8001f8a:	d87b      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001f8c:	2b60      	cmp	r3, #96	; 0x60
 8001f8e:	d050      	beq.n	8002032 <HAL_TIM_ConfigClockSource+0x11a>
 8001f90:	2b60      	cmp	r3, #96	; 0x60
 8001f92:	d877      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001f94:	2b50      	cmp	r3, #80	; 0x50
 8001f96:	d03c      	beq.n	8002012 <HAL_TIM_ConfigClockSource+0xfa>
 8001f98:	2b50      	cmp	r3, #80	; 0x50
 8001f9a:	d873      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d058      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0x13a>
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d86f      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b30      	cmp	r3, #48	; 0x30
 8001fa6:	d064      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa8:	2b30      	cmp	r3, #48	; 0x30
 8001faa:	d86b      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d060      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x15a>
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d867      	bhi.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05c      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x15a>
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d05a      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x15a>
 8001fbc:	e062      	b.n	8002084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fce:	f000 f999 	bl	8002304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	609a      	str	r2, [r3, #8]
      break;
 8001fea:	e04f      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ffc:	f000 f982 	bl	8002304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800200e:	609a      	str	r2, [r3, #8]
      break;
 8002010:	e03c      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201e:	461a      	mov	r2, r3
 8002020:	f000 f8f6 	bl	8002210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2150      	movs	r1, #80	; 0x50
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f94f 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002030:	e02c      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800203e:	461a      	mov	r2, r3
 8002040:	f000 f915 	bl	800226e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2160      	movs	r1, #96	; 0x60
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f93f 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002050:	e01c      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800205e:	461a      	mov	r2, r3
 8002060:	f000 f8d6 	bl	8002210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f92f 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002070:	e00c      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f000 f926 	bl	80022ce <TIM_ITRx_SetConfig>
      break;
 8002082:	e003      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      break;
 8002088:	e000      	b.n	800208c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800208a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <TIM_Base_SetConfig+0xfc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00f      	beq.n	8002130 <TIM_Base_SetConfig+0x38>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d00b      	beq.n	8002130 <TIM_Base_SetConfig+0x38>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a37      	ldr	r2, [pc, #220]	; (80021f8 <TIM_Base_SetConfig+0x100>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <TIM_Base_SetConfig+0x38>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <TIM_Base_SetConfig+0x104>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_Base_SetConfig+0x38>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a35      	ldr	r2, [pc, #212]	; (8002200 <TIM_Base_SetConfig+0x108>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d108      	bne.n	8002142 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <TIM_Base_SetConfig+0xfc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01b      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002150:	d017      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <TIM_Base_SetConfig+0x100>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <TIM_Base_SetConfig+0x104>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00f      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a26      	ldr	r2, [pc, #152]	; (8002200 <TIM_Base_SetConfig+0x108>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00b      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a25      	ldr	r2, [pc, #148]	; (8002204 <TIM_Base_SetConfig+0x10c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <TIM_Base_SetConfig+0x110>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_Base_SetConfig+0x8a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <TIM_Base_SetConfig+0x114>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <TIM_Base_SetConfig+0xfc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f023 0201 	bic.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
  }
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40000800 	.word	0x40000800
 8002200:	40000c00 	.word	0x40000c00
 8002204:	40014000 	.word	0x40014000
 8002208:	40014400 	.word	0x40014400
 800220c:	40014800 	.word	0x40014800

08002210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f023 0201 	bic.w	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f023 030a 	bic.w	r3, r3, #10
 800224c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	621a      	str	r2, [r3, #32]
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800226e:	b480      	push	{r7}
 8002270:	b087      	sub	sp, #28
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f023 0210 	bic.w	r2, r3, #16
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	031b      	lsls	r3, r3, #12
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f043 0307 	orr.w	r3, r3, #7
 80022f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	431a      	orrs	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002358:	2302      	movs	r3, #2
 800235a:	e050      	b.n	80023fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d018      	beq.n	80023d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d013      	beq.n	80023d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00e      	beq.n	80023d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a15      	ldr	r2, [pc, #84]	; (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10c      	bne.n	80023ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40014000 	.word	0x40014000

08002420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e042      	b.n	80024e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fa9c 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f82b 	bl	80024e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b0c0      	sub	sp, #256	; 0x100
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	ea40 0301 	orr.w	r3, r0, r1
 8002510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	431a      	orrs	r2, r3
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002540:	f021 010c 	bic.w	r1, r1, #12
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800254e:	430b      	orrs	r3, r1
 8002550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	6999      	ldr	r1, [r3, #24]
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	ea40 0301 	orr.w	r3, r0, r1
 800256e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <UART_SetConfig+0x2cc>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d005      	beq.n	8002588 <UART_SetConfig+0xa0>
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <UART_SetConfig+0x2d0>)
 8002584:	429a      	cmp	r2, r3
 8002586:	d104      	bne.n	8002592 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002588:	f7ff fade 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 800258c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002590:	e003      	b.n	800259a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002592:	f7ff fac5 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8002596:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a4:	f040 810c 	bne.w	80027c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025ba:	4622      	mov	r2, r4
 80025bc:	462b      	mov	r3, r5
 80025be:	1891      	adds	r1, r2, r2
 80025c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80025c2:	415b      	adcs	r3, r3
 80025c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025ca:	4621      	mov	r1, r4
 80025cc:	eb12 0801 	adds.w	r8, r2, r1
 80025d0:	4629      	mov	r1, r5
 80025d2:	eb43 0901 	adc.w	r9, r3, r1
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ea:	4690      	mov	r8, r2
 80025ec:	4699      	mov	r9, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	eb18 0303 	adds.w	r3, r8, r3
 80025f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025f8:	462b      	mov	r3, r5
 80025fa:	eb49 0303 	adc.w	r3, r9, r3
 80025fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800260e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002612:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002616:	460b      	mov	r3, r1
 8002618:	18db      	adds	r3, r3, r3
 800261a:	653b      	str	r3, [r7, #80]	; 0x50
 800261c:	4613      	mov	r3, r2
 800261e:	eb42 0303 	adc.w	r3, r2, r3
 8002622:	657b      	str	r3, [r7, #84]	; 0x54
 8002624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002628:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800262c:	f7fd fe30 	bl	8000290 <__aeabi_uldivmod>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <UART_SetConfig+0x2d4>)
 8002636:	fba3 2302 	umull	r2, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	011c      	lsls	r4, r3, #4
 800263e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002642:	2200      	movs	r2, #0
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002648:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800264c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002650:	4642      	mov	r2, r8
 8002652:	464b      	mov	r3, r9
 8002654:	1891      	adds	r1, r2, r2
 8002656:	64b9      	str	r1, [r7, #72]	; 0x48
 8002658:	415b      	adcs	r3, r3
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002660:	4641      	mov	r1, r8
 8002662:	eb12 0a01 	adds.w	sl, r2, r1
 8002666:	4649      	mov	r1, r9
 8002668:	eb43 0b01 	adc.w	fp, r3, r1
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002678:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800267c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002680:	4692      	mov	sl, r2
 8002682:	469b      	mov	fp, r3
 8002684:	4643      	mov	r3, r8
 8002686:	eb1a 0303 	adds.w	r3, sl, r3
 800268a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800268e:	464b      	mov	r3, r9
 8002690:	eb4b 0303 	adc.w	r3, fp, r3
 8002694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026ac:	460b      	mov	r3, r1
 80026ae:	18db      	adds	r3, r3, r3
 80026b0:	643b      	str	r3, [r7, #64]	; 0x40
 80026b2:	4613      	mov	r3, r2
 80026b4:	eb42 0303 	adc.w	r3, r2, r3
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026c2:	f7fd fde5 	bl	8000290 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <UART_SetConfig+0x2d4>)
 80026ce:	fba3 2301 	umull	r2, r3, r3, r1
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2264      	movs	r2, #100	; 0x64
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	1acb      	subs	r3, r1, r3
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <UART_SetConfig+0x2d4>)
 80026e4:	fba3 2302 	umull	r2, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026f0:	441c      	add	r4, r3
 80026f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002700:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002704:	4642      	mov	r2, r8
 8002706:	464b      	mov	r3, r9
 8002708:	1891      	adds	r1, r2, r2
 800270a:	63b9      	str	r1, [r7, #56]	; 0x38
 800270c:	415b      	adcs	r3, r3
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002714:	4641      	mov	r1, r8
 8002716:	1851      	adds	r1, r2, r1
 8002718:	6339      	str	r1, [r7, #48]	; 0x30
 800271a:	4649      	mov	r1, r9
 800271c:	414b      	adcs	r3, r1
 800271e:	637b      	str	r3, [r7, #52]	; 0x34
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800272c:	4659      	mov	r1, fp
 800272e:	00cb      	lsls	r3, r1, #3
 8002730:	4651      	mov	r1, sl
 8002732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002736:	4651      	mov	r1, sl
 8002738:	00ca      	lsls	r2, r1, #3
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	4603      	mov	r3, r0
 8002740:	4642      	mov	r2, r8
 8002742:	189b      	adds	r3, r3, r2
 8002744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002748:	464b      	mov	r3, r9
 800274a:	460a      	mov	r2, r1
 800274c:	eb42 0303 	adc.w	r3, r2, r3
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002760:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002768:	460b      	mov	r3, r1
 800276a:	18db      	adds	r3, r3, r3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
 800276e:	4613      	mov	r3, r2
 8002770:	eb42 0303 	adc.w	r3, r2, r3
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800277a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800277e:	f7fd fd87 	bl	8000290 <__aeabi_uldivmod>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <UART_SetConfig+0x2d4>)
 8002788:	fba3 1302 	umull	r1, r3, r3, r2
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	2164      	movs	r1, #100	; 0x64
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	3332      	adds	r3, #50	; 0x32
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <UART_SetConfig+0x2d4>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	f003 0207 	and.w	r2, r3, #7
 80027a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4422      	add	r2, r4
 80027ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027b0:	e106      	b.n	80029c0 <UART_SetConfig+0x4d8>
 80027b2:	bf00      	nop
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40011400 	.word	0x40011400
 80027bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027d2:	4642      	mov	r2, r8
 80027d4:	464b      	mov	r3, r9
 80027d6:	1891      	adds	r1, r2, r2
 80027d8:	6239      	str	r1, [r7, #32]
 80027da:	415b      	adcs	r3, r3
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027e2:	4641      	mov	r1, r8
 80027e4:	1854      	adds	r4, r2, r1
 80027e6:	4649      	mov	r1, r9
 80027e8:	eb43 0501 	adc.w	r5, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	00eb      	lsls	r3, r5, #3
 80027f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fa:	00e2      	lsls	r2, r4, #3
 80027fc:	4614      	mov	r4, r2
 80027fe:	461d      	mov	r5, r3
 8002800:	4643      	mov	r3, r8
 8002802:	18e3      	adds	r3, r4, r3
 8002804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002808:	464b      	mov	r3, r9
 800280a:	eb45 0303 	adc.w	r3, r5, r3
 800280e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800281e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800282e:	4629      	mov	r1, r5
 8002830:	008b      	lsls	r3, r1, #2
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002838:	4621      	mov	r1, r4
 800283a:	008a      	lsls	r2, r1, #2
 800283c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002840:	f7fd fd26 	bl	8000290 <__aeabi_uldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4b60      	ldr	r3, [pc, #384]	; (80029cc <UART_SetConfig+0x4e4>)
 800284a:	fba3 2302 	umull	r2, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	011c      	lsls	r4, r3, #4
 8002852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002856:	2200      	movs	r2, #0
 8002858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800285c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002860:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	1891      	adds	r1, r2, r2
 800286a:	61b9      	str	r1, [r7, #24]
 800286c:	415b      	adcs	r3, r3
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002874:	4641      	mov	r1, r8
 8002876:	1851      	adds	r1, r2, r1
 8002878:	6139      	str	r1, [r7, #16]
 800287a:	4649      	mov	r1, r9
 800287c:	414b      	adcs	r3, r1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800288c:	4659      	mov	r1, fp
 800288e:	00cb      	lsls	r3, r1, #3
 8002890:	4651      	mov	r1, sl
 8002892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002896:	4651      	mov	r1, sl
 8002898:	00ca      	lsls	r2, r1, #3
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	4642      	mov	r2, r8
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028a8:	464b      	mov	r3, r9
 80028aa:	460a      	mov	r2, r1
 80028ac:	eb42 0303 	adc.w	r3, r2, r3
 80028b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80028be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028cc:	4649      	mov	r1, r9
 80028ce:	008b      	lsls	r3, r1, #2
 80028d0:	4641      	mov	r1, r8
 80028d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d6:	4641      	mov	r1, r8
 80028d8:	008a      	lsls	r2, r1, #2
 80028da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028de:	f7fd fcd7 	bl	8000290 <__aeabi_uldivmod>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	4b38      	ldr	r3, [pc, #224]	; (80029cc <UART_SetConfig+0x4e4>)
 80028ea:	fba3 2301 	umull	r2, r3, r3, r1
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2264      	movs	r2, #100	; 0x64
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	1acb      	subs	r3, r1, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3332      	adds	r3, #50	; 0x32
 80028fc:	4a33      	ldr	r2, [pc, #204]	; (80029cc <UART_SetConfig+0x4e4>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	441c      	add	r4, r3
 800290a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800290e:	2200      	movs	r2, #0
 8002910:	673b      	str	r3, [r7, #112]	; 0x70
 8002912:	677a      	str	r2, [r7, #116]	; 0x74
 8002914:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002918:	4642      	mov	r2, r8
 800291a:	464b      	mov	r3, r9
 800291c:	1891      	adds	r1, r2, r2
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	415b      	adcs	r3, r3
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002928:	4641      	mov	r1, r8
 800292a:	1851      	adds	r1, r2, r1
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	4649      	mov	r1, r9
 8002930:	414b      	adcs	r3, r1
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002940:	4659      	mov	r1, fp
 8002942:	00cb      	lsls	r3, r1, #3
 8002944:	4651      	mov	r1, sl
 8002946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294a:	4651      	mov	r1, sl
 800294c:	00ca      	lsls	r2, r1, #3
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	4603      	mov	r3, r0
 8002954:	4642      	mov	r2, r8
 8002956:	189b      	adds	r3, r3, r2
 8002958:	66bb      	str	r3, [r7, #104]	; 0x68
 800295a:	464b      	mov	r3, r9
 800295c:	460a      	mov	r2, r1
 800295e:	eb42 0303 	adc.w	r3, r2, r3
 8002962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	663b      	str	r3, [r7, #96]	; 0x60
 800296e:	667a      	str	r2, [r7, #100]	; 0x64
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800297c:	4649      	mov	r1, r9
 800297e:	008b      	lsls	r3, r1, #2
 8002980:	4641      	mov	r1, r8
 8002982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002986:	4641      	mov	r1, r8
 8002988:	008a      	lsls	r2, r1, #2
 800298a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800298e:	f7fd fc7f 	bl	8000290 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <UART_SetConfig+0x4e4>)
 8002998:	fba3 1302 	umull	r1, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	2164      	movs	r1, #100	; 0x64
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	3332      	adds	r3, #50	; 0x32
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <UART_SetConfig+0x4e4>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	f003 020f 	and.w	r2, r3, #15
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4422      	add	r2, r4
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029c6:	46bd      	mov	sp, r7
 80029c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029cc:	51eb851f 	.word	0x51eb851f

080029d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029d4:	f000 fe42 	bl	800365c <vTaskStartScheduler>
  
  return osOK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}

080029de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 0208 	add.w	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f04f 32ff 	mov.w	r2, #4294967295
 80029f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f103 0208 	add.w	r2, r3, #8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f103 0208 	add.w	r2, r3, #8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d103      	bne.n	8002aa0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e00c      	b.n	8002aba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e002      	b.n	8002aae <vListInsert+0x2e>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d2f6      	bcs.n	8002aa8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6852      	ldr	r2, [r2, #4]
 8002b12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d103      	bne.n	8002b26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b72:	f001 fbf7 	bl	8004364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	441a      	add	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	441a      	add	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	22ff      	movs	r2, #255	; 0xff
 8002bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	22ff      	movs	r2, #255	; 0xff
 8002bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d114      	bne.n	8002bf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01a      	beq.n	8002c06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3310      	adds	r3, #16
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 ffd3 	bl	8003b80 <xTaskRemoveFromEventList>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d012      	beq.n	8002c06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <xQueueGenericReset+0xcc>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	e009      	b.n	8002c06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fef1 	bl	80029de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff feec 	bl	80029de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c06:	f001 fbdd 	bl	80043c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	613b      	str	r3, [r7, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3350      	adds	r3, #80	; 0x50
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 fc69 	bl	8004528 <pvPortMalloc>
 8002c56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d011      	beq.n	8002c82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3350      	adds	r3, #80	; 0x50
 8002c66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c70:	79fa      	ldrb	r2, [r7, #7]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f805 	bl	8002c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c82:	69bb      	ldr	r3, [r7, #24]
	}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cba:	2101      	movs	r1, #1
 8002cbc:	69b8      	ldr	r0, [r7, #24]
 8002cbe:	f7ff ff43 	bl	8002b48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	; 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueGenericSend+0x32>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <xQueueGenericSend+0x40>
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <xQueueGenericSend+0x44>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <xQueueGenericSend+0x46>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xQueueGenericSend+0x60>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSend+0x6e>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSend+0x72>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSend+0x74>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	623b      	str	r3, [r7, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d62:	f001 f8c9 	bl	8003ef8 <xTaskGetSchedulerState>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <xQueueGenericSend+0x9e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <xQueueGenericSend+0xa2>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericSend+0xa4>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61fb      	str	r3, [r7, #28]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d92:	f001 fae7 	bl	8004364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xQueueGenericSend+0xd4>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d129      	bne.n	8002dfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dae:	f000 f96f 	bl	8003090 <prvCopyDataToQueue>
 8002db2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fedd 	bl	8003b80 <xTaskRemoveFromEventList>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <xQueueGenericSend+0x1f8>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	e00a      	b.n	8002df4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <xQueueGenericSend+0x1f8>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002df4:	f001 fae6 	bl	80043c4 <vPortExitCritical>
				return pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e063      	b.n	8002ec4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e02:	f001 fadf 	bl	80043c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e05c      	b.n	8002ec4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ff15 	bl	8003c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1e:	f001 fad1 	bl	80043c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e22:	f000 fc7d 	bl	8003720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e26:	f001 fa9d 	bl	8004364 <vPortEnterCritical>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d103      	bne.n	8002e40 <xQueueGenericSend+0x16c>
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x182>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e56:	f001 fab5 	bl	80043c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e5a:	1d3a      	adds	r2, r7, #4
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ff04 	bl	8003c70 <xTaskCheckForTimeOut>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d124      	bne.n	8002eb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e70:	f000 fa06 	bl	8003280 <prvIsQueueFull>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fe58 	bl	8003b38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f000 f991 	bl	80031b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e8e:	f000 fc55 	bl	800373c <xTaskResumeAll>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af7c 	bne.w	8002d92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <xQueueGenericSend+0x1f8>)
 8002e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	e772      	b.n	8002d92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eae:	f000 f97f 	bl	80031b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eb2:	f000 fc43 	bl	800373c <xTaskResumeAll>
 8002eb6:	e76c      	b.n	8002d92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eba:	f000 f979 	bl	80031b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ebe:	f000 fc3d 	bl	800373c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3738      	adds	r7, #56	; 0x38
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <xQueueReceive+0x30>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	623b      	str	r3, [r7, #32]
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <xQueueReceive+0x3e>
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <xQueueReceive+0x42>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueReceive+0x44>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xQueueReceive+0x5e>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	61fb      	str	r3, [r7, #28]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f2e:	f000 ffe3 	bl	8003ef8 <xTaskGetSchedulerState>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <xQueueReceive+0x6e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <xQueueReceive+0x72>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueReceive+0x74>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueReceive+0x8e>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	61bb      	str	r3, [r7, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f5e:	f001 fa01 	bl	8004364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01f      	beq.n	8002fae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f72:	f000 f8f7 	bl	8003164 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00f      	beq.n	8002fa6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	3310      	adds	r3, #16
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fdf8 	bl	8003b80 <xTaskRemoveFromEventList>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <xQueueReceive+0x1bc>)
 8002f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fa6:	f001 fa0d 	bl	80043c4 <vPortExitCritical>
				return pdPASS;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e069      	b.n	8003082 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fb4:	f001 fa06 	bl	80043c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e062      	b.n	8003082 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fc2:	f107 0310 	add.w	r3, r7, #16
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fe3c 	bl	8003c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fd0:	f001 f9f8 	bl	80043c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fd4:	f000 fba4 	bl	8003720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fd8:	f001 f9c4 	bl	8004364 <vPortEnterCritical>
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d103      	bne.n	8002ff2 <xQueueReceive+0x122>
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d103      	bne.n	8003008 <xQueueReceive+0x138>
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003008:	f001 f9dc 	bl	80043c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800300c:	1d3a      	adds	r2, r7, #4
 800300e:	f107 0310 	add.w	r3, r7, #16
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fe2b 	bl	8003c70 <xTaskCheckForTimeOut>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d123      	bne.n	8003068 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003022:	f000 f917 	bl	8003254 <prvIsQueueEmpty>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	3324      	adds	r3, #36	; 0x24
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd7f 	bl	8003b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800303a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303c:	f000 f8b8 	bl	80031b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003040:	f000 fb7c 	bl	800373c <xTaskResumeAll>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d189      	bne.n	8002f5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <xQueueReceive+0x1bc>)
 800304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	e780      	b.n	8002f5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800305c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800305e:	f000 f8a7 	bl	80031b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003062:	f000 fb6b 	bl	800373c <xTaskResumeAll>
 8003066:	e77a      	b.n	8002f5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800306a:	f000 f8a1 	bl	80031b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800306e:	f000 fb65 	bl	800373c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003074:	f000 f8ee 	bl	8003254 <prvIsQueueEmpty>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	f43f af6f 	beq.w	8002f5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003080:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003082:	4618      	mov	r0, r3
 8003084:	3730      	adds	r7, #48	; 0x30
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10d      	bne.n	80030ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d14d      	bne.n	8003152 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ff3a 	bl	8003f34 <xTaskPriorityDisinherit>
 80030c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	e043      	b.n	8003152 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d119      	bne.n	8003104 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6858      	ldr	r0, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	461a      	mov	r2, r3
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	f002 fe05 	bl	8005cea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	441a      	add	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d32b      	bcc.n	8003152 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e026      	b.n	8003152 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68d8      	ldr	r0, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	461a      	mov	r2, r3
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	f002 fdeb 	bl	8005cea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	425b      	negs	r3, r3
 800311e:	441a      	add	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	425b      	negs	r3, r3
 800313a:	441a      	add	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d105      	bne.n	8003152 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	3b01      	subs	r3, #1
 8003150:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800315a:	697b      	ldr	r3, [r7, #20]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	441a      	add	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d303      	bcc.n	8003198 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	461a      	mov	r2, r3
 80031a2:	6838      	ldr	r0, [r7, #0]
 80031a4:	f002 fda1 	bl	8005cea <memcpy>
	}
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031b8:	f001 f8d4 	bl	8004364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031c4:	e011      	b.n	80031ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d012      	beq.n	80031f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3324      	adds	r3, #36	; 0x24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fcd4 	bl	8003b80 <xTaskRemoveFromEventList>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031de:	f000 fda9 	bl	8003d34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	dce9      	bgt.n	80031c6 <prvUnlockQueue+0x16>
 80031f2:	e000      	b.n	80031f6 <prvUnlockQueue+0x46>
					break;
 80031f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	22ff      	movs	r2, #255	; 0xff
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031fe:	f001 f8e1 	bl	80043c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003202:	f001 f8af 	bl	8004364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800320c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800320e:	e011      	b.n	8003234 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3310      	adds	r3, #16
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fcaf 	bl	8003b80 <xTaskRemoveFromEventList>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003228:	f000 fd84 	bl	8003d34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	3b01      	subs	r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003238:	2b00      	cmp	r3, #0
 800323a:	dce9      	bgt.n	8003210 <prvUnlockQueue+0x60>
 800323c:	e000      	b.n	8003240 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800323e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	22ff      	movs	r2, #255	; 0xff
 8003244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003248:	f001 f8bc 	bl	80043c4 <vPortExitCritical>
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800325c:	f001 f882 	bl	8004364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003268:	2301      	movs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e001      	b.n	8003272 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003272:	f001 f8a7 	bl	80043c4 <vPortExitCritical>

	return xReturn;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003288:	f001 f86c 	bl	8004364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	429a      	cmp	r2, r3
 8003296:	d102      	bne.n	800329e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e001      	b.n	80032a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032a2:	f001 f88f 	bl	80043c4 <vPortExitCritical>

	return xReturn;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xTaskCreateStatic+0x2a>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	61fb      	str	r3, [r7, #28]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032f6:	2360      	movs	r3, #96	; 0x60
 80032f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d00a      	beq.n	8003316 <xTaskCreateStatic+0x66>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61bb      	str	r3, [r7, #24]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01e      	beq.n	800335c <xTaskCreateStatic+0xac>
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2202      	movs	r2, #2
 8003332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003336:	2300      	movs	r3, #0
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f850 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003356:	f000 f8df 	bl	8003518 <prvAddNewTaskToReadyList>
 800335a:	e001      	b.n	8003360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003360:	697b      	ldr	r3, [r7, #20]
	}
 8003362:	4618      	mov	r0, r3
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	; 0x30
 800336e:	af04      	add	r7, sp, #16
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f8d2 	bl	8004528 <pvPortMalloc>
 8003384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800338c:	2060      	movs	r0, #96	; 0x60
 800338e:	f001 f8cb 	bl	8004528 <pvPortMalloc>
 8003392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
 80033a0:	e005      	b.n	80033ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f001 f98c 	bl	80046c0 <vPortFree>
 80033a8:	e001      	b.n	80033ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	2300      	movs	r3, #0
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f80e 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033d8:	69f8      	ldr	r0, [r7, #28]
 80033da:	f000 f89d 	bl	8003518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e002      	b.n	80033ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ea:	69bb      	ldr	r3, [r7, #24]
	}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	21a5      	movs	r1, #165	; 0xa5
 800340e:	f002 fbf0 	bl	8005bf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800341c:	3b01      	subs	r3, #1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01f      	beq.n	8003492 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e012      	b.n	800347e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	7819      	ldrb	r1, [r3, #0]
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	3334      	adds	r3, #52	; 0x34
 8003468:	460a      	mov	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b0f      	cmp	r3, #15
 8003482:	d9e9      	bls.n	8003458 <prvInitialiseNewTask+0x64>
 8003484:	e000      	b.n	8003488 <prvInitialiseNewTask+0x94>
			{
				break;
 8003486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	e003      	b.n	800349a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2b06      	cmp	r3, #6
 800349e:	d901      	bls.n	80034a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034a0:	2306      	movs	r3, #6
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2200      	movs	r2, #0
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	3304      	adds	r3, #4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff faaf 	bl	8002a1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	3318      	adds	r3, #24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff faaa 	bl	8002a1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	f1c3 0207 	rsb	r2, r3, #7
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	2200      	movs	r2, #0
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	69b8      	ldr	r0, [r7, #24]
 80034fa:	f000 fe07 	bl	800410c <pxPortInitialiseStack>
 80034fe:	4602      	mov	r2, r0
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003520:	f000 ff20 	bl	8004364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <prvAddNewTaskToReadyList+0xc0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <prvAddNewTaskToReadyList+0xc0>)
 800352c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <prvAddNewTaskToReadyList+0xc4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <prvAddNewTaskToReadyList+0xc4>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800353c:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <prvAddNewTaskToReadyList+0xc0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d110      	bne.n	8003566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003544:	f000 fc1a 	bl	8003d7c <prvInitialiseTaskLists>
 8003548:	e00d      	b.n	8003566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <prvAddNewTaskToReadyList+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d802      	bhi.n	8003566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003560:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <prvAddNewTaskToReadyList+0xc4>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003566:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <prvAddNewTaskToReadyList+0xcc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <prvAddNewTaskToReadyList+0xcc>)
 800356e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <prvAddNewTaskToReadyList+0xcc>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <prvAddNewTaskToReadyList+0xd0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4313      	orrs	r3, r2
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <prvAddNewTaskToReadyList+0xd0>)
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <prvAddNewTaskToReadyList+0xd4>)
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7ff fa49 	bl	8002a38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035a6:	f000 ff0d 	bl	80043c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <prvAddNewTaskToReadyList+0xc8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <prvAddNewTaskToReadyList+0xc4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <prvAddNewTaskToReadyList+0xd8>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200004e0 	.word	0x200004e0
 80035dc:	200003e0 	.word	0x200003e0
 80035e0:	200004ec 	.word	0x200004ec
 80035e4:	200004fc 	.word	0x200004fc
 80035e8:	200004e8 	.word	0x200004e8
 80035ec:	200003e4 	.word	0x200003e4
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <vTaskDelay+0x60>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <vTaskDelay+0x30>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
}
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003624:	f000 f87c 	bl	8003720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003628:	2100      	movs	r1, #0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fd08 	bl	8004040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003630:	f000 f884 	bl	800373c <xTaskResumeAll>
 8003634:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <vTaskDelay+0x64>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000508 	.word	0x20000508
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800366a:	463a      	mov	r2, r7
 800366c:	1d39      	adds	r1, r7, #4
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff8a 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	9202      	str	r2, [sp, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	460a      	mov	r2, r1
 800368a:	491f      	ldr	r1, [pc, #124]	; (8003708 <vTaskStartScheduler+0xac>)
 800368c:	481f      	ldr	r0, [pc, #124]	; (800370c <vTaskStartScheduler+0xb0>)
 800368e:	f7ff fe0f 	bl	80032b0 <xTaskCreateStatic>
 8003692:	4603      	mov	r3, r0
 8003694:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <vTaskStartScheduler+0xb4>)
 8003696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <vTaskStartScheduler+0xb4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036a0:	2301      	movs	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e001      	b.n	80036aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d118      	bne.n	80036e2 <vTaskStartScheduler+0x86>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	613b      	str	r3, [r7, #16]
}
 80036c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <vTaskStartScheduler+0xb8>)
 80036c6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <vTaskStartScheduler+0xbc>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <vTaskStartScheduler+0xc0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80036d8:	f7fd f8da 	bl	8000890 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036dc:	f000 fda0 	bl	8004220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036e0:	e00e      	b.n	8003700 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d10a      	bne.n	8003700 <vTaskStartScheduler+0xa4>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	60fb      	str	r3, [r7, #12]
}
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <vTaskStartScheduler+0xa2>
}
 8003700:	bf00      	nop
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	08006b08 	.word	0x08006b08
 800370c:	08003d4d 	.word	0x08003d4d
 8003710:	20000504 	.word	0x20000504
 8003714:	20000500 	.word	0x20000500
 8003718:	200004ec 	.word	0x200004ec
 800371c:	200004e4 	.word	0x200004e4

08003720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <vTaskSuspendAll+0x18>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	4a03      	ldr	r2, [pc, #12]	; (8003738 <vTaskSuspendAll+0x18>)
 800372c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	20000508 	.word	0x20000508

0800373c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <xTaskResumeAll+0x114>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <xTaskResumeAll+0x2c>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	603b      	str	r3, [r7, #0]
}
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003768:	f000 fdfc 	bl	8004364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800376c:	4b38      	ldr	r3, [pc, #224]	; (8003850 <xTaskResumeAll+0x114>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	4a37      	ldr	r2, [pc, #220]	; (8003850 <xTaskResumeAll+0x114>)
 8003774:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <xTaskResumeAll+0x114>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d161      	bne.n	8003842 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800377e:	4b35      	ldr	r3, [pc, #212]	; (8003854 <xTaskResumeAll+0x118>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d05d      	beq.n	8003842 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003786:	e02e      	b.n	80037e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003788:	4b33      	ldr	r3, [pc, #204]	; (8003858 <xTaskResumeAll+0x11c>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3318      	adds	r3, #24
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff f9ac 	bl	8002af2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff f9a7 	bl	8002af2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2201      	movs	r2, #1
 80037aa:	409a      	lsls	r2, r3
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <xTaskResumeAll+0x120>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <xTaskResumeAll+0x120>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4a27      	ldr	r2, [pc, #156]	; (8003860 <xTaskResumeAll+0x124>)
 80037c4:	441a      	add	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f7ff f933 	bl	8002a38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <xTaskResumeAll+0x128>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	429a      	cmp	r2, r3
 80037de:	d302      	bcc.n	80037e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <xTaskResumeAll+0x12c>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <xTaskResumeAll+0x11c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1cc      	bne.n	8003788 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037f4:	f000 fb60 	bl	8003eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <xTaskResumeAll+0x130>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003804:	f000 f86a 	bl	80038dc <xTaskIncrementTick>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <xTaskResumeAll+0x12c>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f1      	bne.n	8003804 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <xTaskResumeAll+0x130>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <xTaskResumeAll+0x12c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800382e:	2301      	movs	r3, #1
 8003830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <xTaskResumeAll+0x134>)
 8003834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003842:	f000 fdbf 	bl	80043c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003846:	68bb      	ldr	r3, [r7, #8]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000508 	.word	0x20000508
 8003854:	200004e0 	.word	0x200004e0
 8003858:	200004a0 	.word	0x200004a0
 800385c:	200004e8 	.word	0x200004e8
 8003860:	200003e4 	.word	0x200003e4
 8003864:	200003e0 	.word	0x200003e0
 8003868:	200004f4 	.word	0x200004f4
 800386c:	200004f0 	.word	0x200004f0
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <xTaskGetTickCount+0x1c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003880:	687b      	ldr	r3, [r7, #4]
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	200004e4 	.word	0x200004e4

08003894 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <pcTaskGetName+0x14>
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <pcTaskGetName+0x44>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	e000      	b.n	80038aa <pcTaskGetName+0x16>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <pcTaskGetName+0x34>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60bb      	str	r3, [r7, #8]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3334      	adds	r3, #52	; 0x34
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	200003e0 	.word	0x200003e0

080038dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <xTaskIncrementTick+0x144>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 808e 	bne.w	8003a0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038f0:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <xTaskIncrementTick+0x148>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038f8:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <xTaskIncrementTick+0x148>)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d120      	bne.n	8003946 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003904:	4b48      	ldr	r3, [pc, #288]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <xTaskIncrementTick+0x48>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	603b      	str	r3, [r7, #0]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <xTaskIncrementTick+0x46>
 8003924:	4b40      	ldr	r3, [pc, #256]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <xTaskIncrementTick+0x150>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a3e      	ldr	r2, [pc, #248]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4a3e      	ldr	r2, [pc, #248]	; (8003a2c <xTaskIncrementTick+0x150>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <xTaskIncrementTick+0x154>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <xTaskIncrementTick+0x154>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	f000 fab9 	bl	8003eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <xTaskIncrementTick+0x158>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d348      	bcc.n	80039e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <xTaskIncrementTick+0x158>)
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	601a      	str	r2, [r3, #0]
					break;
 8003962:	e03e      	b.n	80039e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <xTaskIncrementTick+0x14c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d203      	bcs.n	8003984 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800397c:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <xTaskIncrementTick+0x158>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003982:	e02e      	b.n	80039e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f8b2 	bl	8002af2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3318      	adds	r3, #24
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f8a9 	bl	8002af2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <xTaskIncrementTick+0x15c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <xTaskIncrementTick+0x15c>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <xTaskIncrementTick+0x160>)
 80039c0:	441a      	add	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7ff f835 	bl	8002a38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <xTaskIncrementTick+0x164>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3b9      	bcc.n	8003950 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e0:	e7b6      	b.n	8003950 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <xTaskIncrementTick+0x164>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4914      	ldr	r1, [pc, #80]	; (8003a3c <xTaskIncrementTick+0x160>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d901      	bls.n	80039fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <xTaskIncrementTick+0x168>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e004      	b.n	8003a16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <xTaskIncrementTick+0x16c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <xTaskIncrementTick+0x16c>)
 8003a14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a16:	697b      	ldr	r3, [r7, #20]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000508 	.word	0x20000508
 8003a24:	200004e4 	.word	0x200004e4
 8003a28:	20000498 	.word	0x20000498
 8003a2c:	2000049c 	.word	0x2000049c
 8003a30:	200004f8 	.word	0x200004f8
 8003a34:	20000500 	.word	0x20000500
 8003a38:	200004e8 	.word	0x200004e8
 8003a3c:	200003e4 	.word	0x200003e4
 8003a40:	200003e0 	.word	0x200003e0
 8003a44:	200004f4 	.word	0x200004f4
 8003a48:	200004f0 	.word	0x200004f0

08003a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a52:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <vTaskSwitchContext+0xd0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a5a:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <vTaskSwitchContext+0xd4>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a60:	e058      	b.n	8003b14 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8003a62:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <vTaskSwitchContext+0xd4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003a68:	f7fc ff1e 	bl	80008a8 <getRunTimeCounterValue>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	; (8003b24 <vTaskSwitchContext+0xd8>)
 8003a70:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <vTaskSwitchContext+0xd8>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <vTaskSwitchContext+0xdc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d909      	bls.n	8003a92 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <vTaskSwitchContext+0xe0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <vTaskSwitchContext+0xd8>)
 8003a86:	6810      	ldr	r0, [r2, #0]
 8003a88:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <vTaskSwitchContext+0xdc>)
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	1a82      	subs	r2, r0, r2
 8003a8e:	440a      	add	r2, r1
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <vTaskSwitchContext+0xd8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <vTaskSwitchContext+0xdc>)
 8003a98:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <vTaskSwitchContext+0xe4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003aa8:	7afb      	ldrb	r3, [r7, #11]
 8003aaa:	f1c3 031f 	rsb	r3, r3, #31
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	4920      	ldr	r1, [pc, #128]	; (8003b34 <vTaskSwitchContext+0xe8>)
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <vTaskSwitchContext+0x8e>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	607b      	str	r3, [r7, #4]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <vTaskSwitchContext+0x8c>
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <vTaskSwitchContext+0xe8>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3308      	adds	r3, #8
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d104      	bne.n	8003b0a <vTaskSwitchContext+0xbe>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <vTaskSwitchContext+0xe0>)
 8003b12:	6013      	str	r3, [r2, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000508 	.word	0x20000508
 8003b20:	200004f4 	.word	0x200004f4
 8003b24:	20000510 	.word	0x20000510
 8003b28:	2000050c 	.word	0x2000050c
 8003b2c:	200003e0 	.word	0x200003e0
 8003b30:	200004e8 	.word	0x200004e8
 8003b34:	200003e4 	.word	0x200003e4

08003b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60fb      	str	r3, [r7, #12]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <vTaskPlaceOnEventList+0x44>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3318      	adds	r3, #24
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe ff8a 	bl	8002a80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f000 fa66 	bl	8004040 <prvAddCurrentTaskToDelayedList>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	200003e0 	.word	0x200003e0

08003b80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60fb      	str	r3, [r7, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3318      	adds	r3, #24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe ff9e 	bl	8002af2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <xTaskRemoveFromEventList+0xac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11c      	bne.n	8003bf8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe ff95 	bl	8002af2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <xTaskRemoveFromEventList+0xb0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <xTaskRemoveFromEventList+0xb0>)
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <xTaskRemoveFromEventList+0xb4>)
 8003be8:	441a      	add	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7fe ff21 	bl	8002a38 <vListInsertEnd>
 8003bf6:	e005      	b.n	8003c04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	480e      	ldr	r0, [pc, #56]	; (8003c38 <xTaskRemoveFromEventList+0xb8>)
 8003c00:	f7fe ff1a 	bl	8002a38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <xTaskRemoveFromEventList+0xbc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d905      	bls.n	8003c1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c12:	2301      	movs	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <xTaskRemoveFromEventList+0xc0>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e001      	b.n	8003c22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c22:	697b      	ldr	r3, [r7, #20]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000508 	.word	0x20000508
 8003c30:	200004e8 	.word	0x200004e8
 8003c34:	200003e4 	.word	0x200003e4
 8003c38:	200004a0 	.word	0x200004a0
 8003c3c:	200003e0 	.word	0x200003e0
 8003c40:	200004f4 	.word	0x200004f4

08003c44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <vTaskInternalSetTimeOutState+0x24>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <vTaskInternalSetTimeOutState+0x28>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	605a      	str	r2, [r3, #4]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	200004f8 	.word	0x200004f8
 8003c6c:	200004e4 	.word	0x200004e4

08003c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	613b      	str	r3, [r7, #16]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cb2:	f000 fb57 	bl	8004364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <xTaskCheckForTimeOut+0xbc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d102      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e023      	b.n	8003d1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <xTaskCheckForTimeOut+0xc0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d007      	beq.n	8003cf2 <xTaskCheckForTimeOut+0x82>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e015      	b.n	8003d1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d20b      	bcs.n	8003d14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff9b 	bl	8003c44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e004      	b.n	8003d1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f000 fb51 	bl	80043c4 <vPortExitCritical>

	return xReturn;
 8003d22:	69fb      	ldr	r3, [r7, #28]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200004e4 	.word	0x200004e4
 8003d30:	200004f8 	.word	0x200004f8

08003d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <vTaskMissedYield+0x14>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	200004f4 	.word	0x200004f4

08003d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d54:	f000 f852 	bl	8003dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <prvIdleTask+0x28>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d9f9      	bls.n	8003d54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <prvIdleTask+0x2c>)
 8003d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d70:	e7f0      	b.n	8003d54 <prvIdleTask+0x8>
 8003d72:	bf00      	nop
 8003d74:	200003e4 	.word	0x200003e4
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e00c      	b.n	8003da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <prvInitialiseTaskLists+0x60>)
 8003d94:	4413      	add	r3, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fe21 	bl	80029de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d9ef      	bls.n	8003d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003da8:	480d      	ldr	r0, [pc, #52]	; (8003de0 <prvInitialiseTaskLists+0x64>)
 8003daa:	f7fe fe18 	bl	80029de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dae:	480d      	ldr	r0, [pc, #52]	; (8003de4 <prvInitialiseTaskLists+0x68>)
 8003db0:	f7fe fe15 	bl	80029de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003db4:	480c      	ldr	r0, [pc, #48]	; (8003de8 <prvInitialiseTaskLists+0x6c>)
 8003db6:	f7fe fe12 	bl	80029de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dba:	480c      	ldr	r0, [pc, #48]	; (8003dec <prvInitialiseTaskLists+0x70>)
 8003dbc:	f7fe fe0f 	bl	80029de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dc0:	480b      	ldr	r0, [pc, #44]	; (8003df0 <prvInitialiseTaskLists+0x74>)
 8003dc2:	f7fe fe0c 	bl	80029de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <prvInitialiseTaskLists+0x78>)
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <prvInitialiseTaskLists+0x64>)
 8003dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <prvInitialiseTaskLists+0x7c>)
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <prvInitialiseTaskLists+0x68>)
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200003e4 	.word	0x200003e4
 8003de0:	20000470 	.word	0x20000470
 8003de4:	20000484 	.word	0x20000484
 8003de8:	200004a0 	.word	0x200004a0
 8003dec:	200004b4 	.word	0x200004b4
 8003df0:	200004cc 	.word	0x200004cc
 8003df4:	20000498 	.word	0x20000498
 8003df8:	2000049c 	.word	0x2000049c

08003dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e02:	e019      	b.n	8003e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e04:	f000 faae 	bl	8004364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <prvCheckTasksWaitingTermination+0x50>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fe6c 	bl	8002af2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <prvCheckTasksWaitingTermination+0x54>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <prvCheckTasksWaitingTermination+0x54>)
 8003e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e2e:	f000 fac9 	bl	80043c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f810 	bl	8003e58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <prvCheckTasksWaitingTermination+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e1      	bne.n	8003e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200004b4 	.word	0x200004b4
 8003e50:	200004e0 	.word	0x200004e0
 8003e54:	200004c8 	.word	0x200004c8

08003e58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fc26 	bl	80046c0 <vPortFree>
				vPortFree( pxTCB );
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fc23 	bl	80046c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e7a:	e018      	b.n	8003eae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d103      	bne.n	8003e8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fc1a 	bl	80046c0 <vPortFree>
	}
 8003e8c:	e00f      	b.n	8003eae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d00a      	beq.n	8003eae <prvDeleteTCB+0x56>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <prvDeleteTCB+0x54>
	}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <prvResetNextTaskUnblockTime+0x38>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ed0:	e008      	b.n	8003ee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <prvResetNextTaskUnblockTime+0x38>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000498 	.word	0x20000498
 8003ef4:	20000500 	.word	0x20000500

08003ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <xTaskGetSchedulerState+0x34>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f06:	2301      	movs	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e008      	b.n	8003f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <xTaskGetSchedulerState+0x38>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f14:	2302      	movs	r3, #2
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	e001      	b.n	8003f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f1e:	687b      	ldr	r3, [r7, #4]
	}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	200004ec 	.word	0x200004ec
 8003f30:	20000508 	.word	0x20000508

08003f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d06e      	beq.n	8004028 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f4a:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <xTaskPriorityDisinherit+0x100>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d00a      	beq.n	8003f6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60fb      	str	r3, [r7, #12]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	60bb      	str	r3, [r7, #8]
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d044      	beq.n	8004028 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d140      	bne.n	8004028 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fda1 	bl	8002af2 <uxListRemove>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d115      	bne.n	8003fe2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fba:	491f      	ldr	r1, [pc, #124]	; (8004038 <xTaskPriorityDisinherit+0x104>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xTaskPriorityDisinherit+0xae>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	4b18      	ldr	r3, [pc, #96]	; (800403c <xTaskPriorityDisinherit+0x108>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <xTaskPriorityDisinherit+0x108>)
 8003fe0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	f1c3 0207 	rsb	r2, r3, #7
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <xTaskPriorityDisinherit+0x108>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <xTaskPriorityDisinherit+0x108>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <xTaskPriorityDisinherit+0x104>)
 8004016:	441a      	add	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f7fe fd0a 	bl	8002a38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004028:	697b      	ldr	r3, [r7, #20]
	}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200003e0 	.word	0x200003e0
 8004038:	200003e4 	.word	0x200003e4
 800403c:	200004e8 	.word	0x200004e8

08004040 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004050:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fd4b 	bl	8002af2 <uxListRemove>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4013      	ands	r3, r2
 8004076:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004078:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d10a      	bne.n	8004098 <prvAddCurrentTaskToDelayedList+0x58>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	481a      	ldr	r0, [pc, #104]	; (80040fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004092:	f7fe fcd1 	bl	8002a38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004096:	e026      	b.n	80040e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d209      	bcs.n	80040c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fe fcdf 	bl	8002a80 <vListInsert>
}
 80040c2:	e010      	b.n	80040e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fe fcd5 	bl	8002a80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d202      	bcs.n	80040e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040e0:	4a09      	ldr	r2, [pc, #36]	; (8004108 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6013      	str	r3, [r2, #0]
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200004e4 	.word	0x200004e4
 80040f4:	200003e0 	.word	0x200003e0
 80040f8:	200004e8 	.word	0x200004e8
 80040fc:	200004cc 	.word	0x200004cc
 8004100:	2000049c 	.word	0x2000049c
 8004104:	20000498 	.word	0x20000498
 8004108:	20000500 	.word	0x20000500

0800410c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3b04      	subs	r3, #4
 800411c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b04      	subs	r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b04      	subs	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <pxPortInitialiseStack+0x64>)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b14      	subs	r3, #20
 8004146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b04      	subs	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f06f 0202 	mvn.w	r2, #2
 800415a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3b20      	subs	r3, #32
 8004160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	08004175 	.word	0x08004175

08004174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <prvTaskExitError+0x54>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d00a      	beq.n	800419e <prvTaskExitError+0x2a>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60fb      	str	r3, [r7, #12]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <prvTaskExitError+0x28>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60bb      	str	r3, [r7, #8]
}
 80041b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041b2:	bf00      	nop
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0fc      	beq.n	80041b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	00000000 	.word	0x00000000

080041d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <pxCurrentTCBConst2>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	6808      	ldr	r0, [r1, #0]
 80041d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	f380 8809 	msr	PSP, r0
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	4770      	bx	lr
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst2>:
 80041f0:	200003e0 	.word	0x200003e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <prvPortStartFirstTask+0x24>)
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f380 8808 	msr	MSP, r0
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8814 	msr	CONTROL, r0
 800420a:	b662      	cpsie	i
 800420c:	b661      	cpsie	f
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	df00      	svc	0
 8004218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800421a:	bf00      	nop
 800421c:	e000ed08 	.word	0xe000ed08

08004220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004226:	4b46      	ldr	r3, [pc, #280]	; (8004340 <xPortStartScheduler+0x120>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a46      	ldr	r2, [pc, #280]	; (8004344 <xPortStartScheduler+0x124>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10a      	bne.n	8004246 <xPortStartScheduler+0x26>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <xPortStartScheduler+0x120>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <xPortStartScheduler+0x128>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10a      	bne.n	8004266 <xPortStartScheduler+0x46>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <xPortStartScheduler+0x12c>)
 8004268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <xPortStartScheduler+0x130>)
 800428c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800428e:	4b31      	ldr	r3, [pc, #196]	; (8004354 <xPortStartScheduler+0x134>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004294:	e009      	b.n	80042aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004296:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <xPortStartScheduler+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <xPortStartScheduler+0x134>)
 800429e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d0ef      	beq.n	8004296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <xPortStartScheduler+0x134>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00a      	beq.n	80042d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60bb      	str	r3, [r7, #8]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <xPortStartScheduler+0x134>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <xPortStartScheduler+0x134>)
 80042e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <xPortStartScheduler+0x134>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ea:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <xPortStartScheduler+0x134>)
 80042ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <xPortStartScheduler+0x138>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <xPortStartScheduler+0x138>)
 80042fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <xPortStartScheduler+0x138>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <xPortStartScheduler+0x138>)
 8004308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800430c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800430e:	f000 f8dd 	bl	80044cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <xPortStartScheduler+0x13c>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004318:	f000 f8fc 	bl	8004514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <xPortStartScheduler+0x140>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <xPortStartScheduler+0x140>)
 8004322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004328:	f7ff ff66 	bl	80041f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800432c:	f7ff fb8e 	bl	8003a4c <vTaskSwitchContext>
	prvTaskExitError();
 8004330:	f7ff ff20 	bl	8004174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000ed00 	.word	0xe000ed00
 8004344:	410fc271 	.word	0x410fc271
 8004348:	410fc270 	.word	0x410fc270
 800434c:	e000e400 	.word	0xe000e400
 8004350:	20000514 	.word	0x20000514
 8004354:	20000518 	.word	0x20000518
 8004358:	e000ed20 	.word	0xe000ed20
 800435c:	2000000c 	.word	0x2000000c
 8004360:	e000ef34 	.word	0xe000ef34

08004364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	607b      	str	r3, [r7, #4]
}
 800437c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <vPortEnterCritical+0x58>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <vPortEnterCritical+0x58>)
 8004386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <vPortEnterCritical+0x58>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10f      	bne.n	80043b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortEnterCritical+0x5c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	603b      	str	r3, [r7, #0]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <vPortEnterCritical+0x4a>
	}
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <vPortExitCritical+0x50>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <vPortExitCritical+0x24>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <vPortExitCritical+0x50>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <vPortExitCritical+0x50>)
 80043f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <vPortExitCritical+0x42>
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000000c 	.word	0x2000000c
	...

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f01e 0f10 	tst.w	lr, #16
 8004430:	bf08      	it	eq
 8004432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f7ff fafc 	bl	8003a4c <vTaskSwitchContext>
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f380 8811 	msr	BASEPRI, r0
 800445c:	bc09      	pop	{r0, r3}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004466:	f01e 0f10 	tst.w	lr, #16
 800446a:	bf08      	it	eq
 800446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004470:	f380 8809 	msr	PSP, r0
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst>:
 8004480:	200003e0 	.word	0x200003e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f7ff fa1b 	bl	80038dc <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <SysTick_Handler+0x40>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f383 8811 	msr	BASEPRI, r3
}
 80044be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <vPortSetupTimerInterrupt+0x38>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <vPortSetupTimerInterrupt+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <vPortSetupTimerInterrupt+0x40>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <vPortSetupTimerInterrupt+0x44>)
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	e000e018 	.word	0xe000e018
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e014 	.word	0xe000e014

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004522:	bf00      	nop
 8004524:	e000ed88 	.word	0xe000ed88

08004528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004534:	f7ff f8f4 	bl	8003720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004538:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <pvPortMalloc+0x180>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004540:	f000 f920 	bl	8004784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <pvPortMalloc+0x184>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 8093 	bne.w	8004678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01d      	beq.n	8004594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004558:	2208      	movs	r2, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f023 0307 	bic.w	r3, r3, #7
 8004570:	3308      	adds	r3, #8
 8004572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <pvPortMalloc+0x6c>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d06e      	beq.n	8004678 <pvPortMalloc+0x150>
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <pvPortMalloc+0x188>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d869      	bhi.n	8004678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045a4:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <pvPortMalloc+0x18c>)
 80045a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045a8:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <pvPortMalloc+0x18c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ae:	e004      	b.n	80045ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <pvPortMalloc+0xa4>
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f1      	bne.n	80045b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <pvPortMalloc+0x180>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d050      	beq.n	8004678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2208      	movs	r2, #8
 80045dc:	4413      	add	r3, r2
 80045de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	2308      	movs	r3, #8
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d91f      	bls.n	8004638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <pvPortMalloc+0xf8>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	613b      	str	r3, [r7, #16]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004632:	69b8      	ldr	r0, [r7, #24]
 8004634:	f000 f908 	bl	8004848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <pvPortMalloc+0x188>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <pvPortMalloc+0x188>)
 8004644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <pvPortMalloc+0x188>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <pvPortMalloc+0x190>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d203      	bcs.n	800465a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <pvPortMalloc+0x188>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <pvPortMalloc+0x190>)
 8004658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <pvPortMalloc+0x184>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	431a      	orrs	r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <pvPortMalloc+0x194>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a11      	ldr	r2, [pc, #68]	; (80046bc <pvPortMalloc+0x194>)
 8004676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004678:	f7ff f860 	bl	800373c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <pvPortMalloc+0x174>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60fb      	str	r3, [r7, #12]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <pvPortMalloc+0x172>
	return pvReturn;
 800469c:	69fb      	ldr	r3, [r7, #28]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20004124 	.word	0x20004124
 80046ac:	20004138 	.word	0x20004138
 80046b0:	20004128 	.word	0x20004128
 80046b4:	2000411c 	.word	0x2000411c
 80046b8:	2000412c 	.word	0x2000412c
 80046bc:	20004130 	.word	0x20004130

080046c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d04d      	beq.n	800476e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046d2:	2308      	movs	r3, #8
 80046d4:	425b      	negs	r3, r3
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <vPortFree+0xb8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <vPortFree+0x44>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	60fb      	str	r3, [r7, #12]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <vPortFree+0x62>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60bb      	str	r3, [r7, #8]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <vPortFree+0xb8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11a      	bne.n	800476e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <vPortFree+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004748:	f7fe ffea 	bl	8003720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <vPortFree+0xbc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4413      	add	r3, r2
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <vPortFree+0xbc>)
 8004758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f000 f874 	bl	8004848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <vPortFree+0xc0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a06      	ldr	r2, [pc, #24]	; (8004780 <vPortFree+0xc0>)
 8004768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800476a:	f7fe ffe7 	bl	800373c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20004138 	.word	0x20004138
 800477c:	20004128 	.word	0x20004128
 8004780:	20004134 	.word	0x20004134

08004784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800478a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800478e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <prvHeapInit+0xac>)
 8004792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3307      	adds	r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <prvHeapInit+0xac>)
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <prvHeapInit+0xb0>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <prvHeapInit+0xb0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047d0:	2208      	movs	r2, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <prvHeapInit+0xb4>)
 80047e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <prvHeapInit+0xb4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <prvHeapInit+0xb4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvHeapInit+0xb4>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <prvHeapInit+0xb8>)
 8004812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <prvHeapInit+0xbc>)
 800481a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <prvHeapInit+0xc0>)
 800481e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	2000051c 	.word	0x2000051c
 8004834:	2000411c 	.word	0x2000411c
 8004838:	20004124 	.word	0x20004124
 800483c:	2000412c 	.word	0x2000412c
 8004840:	20004128 	.word	0x20004128
 8004844:	20004138 	.word	0x20004138

08004848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <prvInsertBlockIntoFreeList+0xac>)
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e002      	b.n	800485c <prvInsertBlockIntoFreeList+0x14>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d8f7      	bhi.n	8004856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d108      	bne.n	800488a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d118      	bne.n	80048d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <prvInsertBlockIntoFreeList+0xb0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d00d      	beq.n	80048c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e008      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <prvInsertBlockIntoFreeList+0xb0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e003      	b.n	80048d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d002      	beq.n	80048e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000411c 	.word	0x2000411c
 80048f8:	20004124 	.word	0x20004124

080048fc <ui_initialize_ao>:
 */

#include "ao_ui.h"

// Función de inicialización del objeto activo de la interfaz de usuario
void ui_initialize_ao(UIActiveObject_t *ao, ButtonActiveObject_t *button_ao, LEDActiveObject *led_ao) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
    ao->button_ao = button_ao;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	601a      	str	r2, [r3, #0]
    ao->led_ao = led_ao;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	605a      	str	r2, [r3, #4]

    // Crear la tarea ui_task
    if (xTaskCreate(ui_task, "UI_Task", configMINIMAL_STACK_SIZE, (void *)ao, tskIDLE_PRIORITY + 1, NULL) != pdPASS) {
 8004914:	2300      	movs	r3, #0
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	2301      	movs	r3, #1
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <ui_initialize_ao+0x60>)
 8004922:	480f      	ldr	r0, [pc, #60]	; (8004960 <ui_initialize_ao+0x64>)
 8004924:	f7fe fd21 	bl	800336a <xTaskCreate>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d012      	beq.n	8004954 <ui_initialize_ao+0x58>
        LOGGER_LOG("Error: Failed to create UI_Task\r\n");
 800492e:	f7ff fd19 	bl	8004364 <vPortEnterCritical>
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <ui_initialize_ao+0x68>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <ui_initialize_ao+0x6c>)
 8004938:	213f      	movs	r1, #63	; 0x3f
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f8e2 	bl	8005b04 <sniprintf>
 8004940:	4603      	mov	r3, r0
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <ui_initialize_ao+0x70>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <ui_initialize_ao+0x68>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f954 	bl	8004bf8 <logger_log_print_>
 8004950:	f7ff fd38 	bl	80043c4 <vPortExitCritical>
    }
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08006b38 	.word	0x08006b38
 8004960:	08004b29 	.word	0x08004b29
 8004964:	08006ea0 	.word	0x08006ea0
 8004968:	08006b40 	.word	0x08006b40
 800496c:	2000419c 	.word	0x2000419c

08004970 <process_button_event>:

void process_button_event(state_button_t button_state, LEDActiveObject *led_ao) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
    // Loguear el estado del botón
    switch (button_state) {
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d02e      	beq.n	80049e0 <process_button_event+0x70>
 8004982:	2b03      	cmp	r3, #3
 8004984:	dc40      	bgt.n	8004a08 <process_button_event+0x98>
 8004986:	2b01      	cmp	r3, #1
 8004988:	d002      	beq.n	8004990 <process_button_event+0x20>
 800498a:	2b02      	cmp	r3, #2
 800498c:	d014      	beq.n	80049b8 <process_button_event+0x48>
 800498e:	e03b      	b.n	8004a08 <process_button_event+0x98>
        case PULSE_PULSE:
            LOGGER_LOG("Estado del botón: PULSE_PULSE\r\n");
 8004990:	f7ff fce8 	bl	8004364 <vPortEnterCritical>
 8004994:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <process_button_event+0x194>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a5b      	ldr	r2, [pc, #364]	; (8004b08 <process_button_event+0x198>)
 800499a:	213f      	movs	r1, #63	; 0x3f
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f8b1 	bl	8005b04 <sniprintf>
 80049a2:	4603      	mov	r3, r0
 80049a4:	4a59      	ldr	r2, [pc, #356]	; (8004b0c <process_button_event+0x19c>)
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <process_button_event+0x194>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f923 	bl	8004bf8 <logger_log_print_>
 80049b2:	f7ff fd07 	bl	80043c4 <vPortExitCritical>
            break;
 80049b6:	e03b      	b.n	8004a30 <process_button_event+0xc0>
        case PULSE_SHORT:
            LOGGER_LOG("Estado del botón: PULSE_SHORT\r\n");
 80049b8:	f7ff fcd4 	bl	8004364 <vPortEnterCritical>
 80049bc:	4b51      	ldr	r3, [pc, #324]	; (8004b04 <process_button_event+0x194>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a53      	ldr	r2, [pc, #332]	; (8004b10 <process_button_event+0x1a0>)
 80049c2:	213f      	movs	r1, #63	; 0x3f
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f89d 	bl	8005b04 <sniprintf>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4a4f      	ldr	r2, [pc, #316]	; (8004b0c <process_button_event+0x19c>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <process_button_event+0x194>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f90f 	bl	8004bf8 <logger_log_print_>
 80049da:	f7ff fcf3 	bl	80043c4 <vPortExitCritical>
            break;
 80049de:	e027      	b.n	8004a30 <process_button_event+0xc0>
        case PULSE_LONG:
            LOGGER_LOG("Estado del botón: PULSE_LONG\r\n");
 80049e0:	f7ff fcc0 	bl	8004364 <vPortEnterCritical>
 80049e4:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <process_button_event+0x194>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a4a      	ldr	r2, [pc, #296]	; (8004b14 <process_button_event+0x1a4>)
 80049ea:	213f      	movs	r1, #63	; 0x3f
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 f889 	bl	8005b04 <sniprintf>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a45      	ldr	r2, [pc, #276]	; (8004b0c <process_button_event+0x19c>)
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <process_button_event+0x194>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f8fb 	bl	8004bf8 <logger_log_print_>
 8004a02:	f7ff fcdf 	bl	80043c4 <vPortExitCritical>
            break;
 8004a06:	e013      	b.n	8004a30 <process_button_event+0xc0>
        default:
            LOGGER_LOG("Estado del botón: Desconocido\r\n");
 8004a08:	f7ff fcac 	bl	8004364 <vPortEnterCritical>
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <process_button_event+0x194>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a41      	ldr	r2, [pc, #260]	; (8004b18 <process_button_event+0x1a8>)
 8004a12:	213f      	movs	r1, #63	; 0x3f
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f875 	bl	8005b04 <sniprintf>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4a3b      	ldr	r2, [pc, #236]	; (8004b0c <process_button_event+0x19c>)
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <process_button_event+0x194>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 f8e7 	bl	8004bf8 <logger_log_print_>
 8004a2a:	f7ff fccb 	bl	80043c4 <vPortExitCritical>
            return;
 8004a2e:	e065      	b.n	8004afc <process_button_event+0x18c>
    }

    // Determinar qué LED encender basado en el estado del botón
    uint8_t led_index;
    switch (button_state) {
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d032      	beq.n	8004a9c <process_button_event+0x12c>
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	dc5f      	bgt.n	8004afa <process_button_event+0x18a>
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d002      	beq.n	8004a44 <process_button_event+0xd4>
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d016      	beq.n	8004a70 <process_button_event+0x100>
        case PULSE_LONG:
            LOGGER_LOG("Encendiendo LED AZUL\r\n");
            led_index = 2; // Índice del LED azul en led_configs
            break;
        default:
            return; // No hacer nada para otros estados del botón
 8004a42:	e05a      	b.n	8004afa <process_button_event+0x18a>
            LOGGER_LOG("Encendiendo LED ROJO\r\n");
 8004a44:	f7ff fc8e 	bl	8004364 <vPortEnterCritical>
 8004a48:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <process_button_event+0x194>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	; (8004b1c <process_button_event+0x1ac>)
 8004a4e:	213f      	movs	r1, #63	; 0x3f
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 f857 	bl	8005b04 <sniprintf>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <process_button_event+0x19c>)
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <process_button_event+0x194>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f8c9 	bl	8004bf8 <logger_log_print_>
 8004a66:	f7ff fcad 	bl	80043c4 <vPortExitCritical>
            led_index = 0; // Índice del LED rojo en led_configs
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
            break;
 8004a6e:	e02b      	b.n	8004ac8 <process_button_event+0x158>
            LOGGER_LOG("Encendiendo LED VERDE\r\n");
 8004a70:	f7ff fc78 	bl	8004364 <vPortEnterCritical>
 8004a74:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <process_button_event+0x194>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <process_button_event+0x1b0>)
 8004a7a:	213f      	movs	r1, #63	; 0x3f
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f841 	bl	8005b04 <sniprintf>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <process_button_event+0x19c>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <process_button_event+0x194>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 f8b3 	bl	8004bf8 <logger_log_print_>
 8004a92:	f7ff fc97 	bl	80043c4 <vPortExitCritical>
            led_index = 1; // Índice del LED verde en led_configs
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
            break;
 8004a9a:	e015      	b.n	8004ac8 <process_button_event+0x158>
            LOGGER_LOG("Encendiendo LED AZUL\r\n");
 8004a9c:	f7ff fc62 	bl	8004364 <vPortEnterCritical>
 8004aa0:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <process_button_event+0x194>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <process_button_event+0x1b4>)
 8004aa6:	213f      	movs	r1, #63	; 0x3f
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f82b 	bl	8005b04 <sniprintf>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <process_button_event+0x19c>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <process_button_event+0x194>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f89d 	bl	8004bf8 <logger_log_print_>
 8004abe:	f7ff fc81 	bl	80043c4 <vPortExitCritical>
            led_index = 2; // Índice del LED azul en led_configs
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	73fb      	strb	r3, [r7, #15]
            break;
 8004ac6:	bf00      	nop
    }

    // Crear un evento LED para encender el LED correspondiente
    LEDEvent event_on;
    event_on.led_index = led_index;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	733b      	strb	r3, [r7, #12]
    event_on.type = LED_EVENT_ON;
 8004acc:	2300      	movs	r3, #0
 8004ace:	737b      	strb	r3, [r7, #13]

    // Crear un evento LED para apagar el LED después de 1 segundo
    LEDEvent event_off;
    event_off.led_index = led_index;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	723b      	strb	r3, [r7, #8]
    event_off.type = LED_EVENT_OFF;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	727b      	strb	r3, [r7, #9]

    // Enviar el evento LED para encender el LED correspondiente
    led_ao_send_event(led_ao, &event_on);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4619      	mov	r1, r3
 8004ade:	6838      	ldr	r0, [r7, #0]
 8004ae0:	f000 f970 	bl	8004dc4 <led_ao_send_event>

    // Esperar 1 segundo antes de enviar el evento para apagar el LED
    vTaskDelay(pdMS_TO_TICKS(1000));
 8004ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae8:	f7fe fd84 	bl	80035f4 <vTaskDelay>

    // Enviar el evento LED para apagar el LED correspondiente después de 1 segundo
    led_ao_send_event(led_ao, &event_off);
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	4619      	mov	r1, r3
 8004af2:	6838      	ldr	r0, [r7, #0]
 8004af4:	f000 f966 	bl	8004dc4 <led_ao_send_event>
 8004af8:	e000      	b.n	8004afc <process_button_event+0x18c>
            return; // No hacer nada para otros estados del botón
 8004afa:	bf00      	nop
}
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	08006ea0 	.word	0x08006ea0
 8004b08:	08006b64 	.word	0x08006b64
 8004b0c:	2000419c 	.word	0x2000419c
 8004b10:	08006b88 	.word	0x08006b88
 8004b14:	08006bac 	.word	0x08006bac
 8004b18:	08006bcc 	.word	0x08006bcc
 8004b1c:	08006bf0 	.word	0x08006bf0
 8004b20:	08006c08 	.word	0x08006c08
 8004b24:	08006c20 	.word	0x08006c20

08004b28 <ui_task>:

// Función de tarea para la interfaz de usuario
void ui_task(void *parameters) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    UIActiveObject_t *const ao = (UIActiveObject_t *)parameters;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60fb      	str	r3, [r7, #12]
    state_button_t button_state;

    while (1) {
        // Esperar a que se reciba un evento del botón
        if (xQueueReceive(ao->button_ao->queue_button_h, &button_state, portMAX_DELAY) == pdPASS) {
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f107 010b 	add.w	r1, r7, #11
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f9c4 	bl	8002ed0 <xQueueReceive>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d1f2      	bne.n	8004b34 <ui_task+0xc>
            // Procesar el evento del botón
            process_button_event(button_state, ao->led_ao);
 8004b4e:	7afa      	ldrb	r2, [r7, #11]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f7ff ff0a 	bl	8004970 <process_button_event>
        if (xQueueReceive(ao->button_ao->queue_button_h, &button_state, portMAX_DELAY) == pdPASS) {
 8004b5c:	e7ea      	b.n	8004b34 <ui_task+0xc>
	...

08004b60 <app_init>:
UIActiveObject_t ui_ao;

/**
 * @brief Initializes the application components.
 */
void app_init(void) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
    LOGGER_LOG(p_sys);
 8004b64:	f7ff fbfe 	bl	8004364 <vPortEnterCritical>
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <app_init+0x6c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <app_init+0x70>)
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	213f      	movs	r1, #63	; 0x3f
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 ffc6 	bl	8005b04 <sniprintf>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <app_init+0x74>)
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <app_init+0x6c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f838 	bl	8004bf8 <logger_log_print_>
 8004b88:	f7ff fc1c 	bl	80043c4 <vPortExitCritical>

    button_initialize_ao(&button_ao, button_config, "Button AO");
 8004b8c:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <app_init+0x78>)
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <app_init+0x7c>)
 8004b90:	ca06      	ldmia	r2, {r1, r2}
 8004b92:	4813      	ldr	r0, [pc, #76]	; (8004be0 <app_init+0x80>)
 8004b94:	f000 fa68 	bl	8005068 <button_initialize_ao>

    // Inicializar el objeto activo de los LEDs
    led_initialize_ao(&led_ao, "LED AO");
 8004b98:	4912      	ldr	r1, [pc, #72]	; (8004be4 <app_init+0x84>)
 8004b9a:	4813      	ldr	r0, [pc, #76]	; (8004be8 <app_init+0x88>)
 8004b9c:	f000 f8d4 	bl	8004d48 <led_initialize_ao>

    // Inicializar el objeto activo de la interfaz de usuario
    ui_initialize_ao(&ui_ao, &button_ao, &led_ao);
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <app_init+0x88>)
 8004ba2:	490f      	ldr	r1, [pc, #60]	; (8004be0 <app_init+0x80>)
 8004ba4:	4811      	ldr	r0, [pc, #68]	; (8004bec <app_init+0x8c>)
 8004ba6:	f7ff fea9 	bl	80048fc <ui_initialize_ao>

    // Initialize cycle counter
    cycle_counter_init();
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <app_init+0x90>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <app_init+0x90>)
 8004bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	60d3      	str	r3, [r2, #12]
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <app_init+0x94>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <app_init+0x94>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <app_init+0x94>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	6013      	str	r3, [r2, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08006ea0 	.word	0x08006ea0
 8004bd0:	20000010 	.word	0x20000010
 8004bd4:	2000419c 	.word	0x2000419c
 8004bd8:	20000014 	.word	0x20000014
 8004bdc:	08006c78 	.word	0x08006c78
 8004be0:	2000413c 	.word	0x2000413c
 8004be4:	08006c84 	.word	0x08006c84
 8004be8:	2000414c 	.word	0x2000414c
 8004bec:	20004154 	.word	0x20004154
 8004bf0:	e000edf0 	.word	0xe000edf0
 8004bf4:	e0001000 	.word	0xe0001000

08004bf8 <logger_log_print_>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char *const msg) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	printf(msg);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 ff6d 	bl	8005ae0 <iprintf>
	fflush(stdout);
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <logger_log_print_+0x24>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fe7f 	bl	8005910 <fflush>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2000007c 	.word	0x2000007c

08004c20 <led_toggle>:
// Private Function Prototypes
static void led_task(void* parameters);
static void process_led_event(const LEDEvent* event);

// LED Control Functions
void led_toggle(uint8_t led_index) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
    assert(led_index < NUM_LEDS);  // Check that led_index is within range
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d905      	bls.n	8004c3c <led_toggle+0x1c>
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <led_toggle+0x40>)
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <led_toggle+0x44>)
 8004c34:	2122      	movs	r1, #34	; 0x22
 8004c36:	480c      	ldr	r0, [pc, #48]	; (8004c68 <led_toggle+0x48>)
 8004c38:	f000 fd9e 	bl	8005778 <__assert_func>
    HAL_GPIO_TogglePin(led_configs[led_index].port, led_configs[led_index].pin);
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	4a0b      	ldr	r2, [pc, #44]	; (8004c6c <led_toggle+0x4c>)
 8004c40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	4909      	ldr	r1, [pc, #36]	; (8004c6c <led_toggle+0x4c>)
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	440b      	add	r3, r1
 8004c4c:	889b      	ldrh	r3, [r3, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fc fada 	bl	800120a <HAL_GPIO_TogglePin>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	08006c8c 	.word	0x08006c8c
 8004c64:	08006ebc 	.word	0x08006ebc
 8004c68:	08006ca4 	.word	0x08006ca4
 8004c6c:	08006ea4 	.word	0x08006ea4

08004c70 <led_write>:

void led_write(uint8_t led_index, const LEDStatus status) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	460a      	mov	r2, r1
 8004c7a:	71fb      	strb	r3, [r7, #7]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	71bb      	strb	r3, [r7, #6]
    if (led_index >= NUM_LEDS) {
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d913      	bls.n	8004cae <led_write+0x3e>
        LOGGER_LOG("Error: Invalid LED index\r\n");
 8004c86:	f7ff fb6d 	bl	8004364 <vPortEnterCritical>
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <led_write+0x84>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <led_write+0x88>)
 8004c90:	213f      	movs	r1, #63	; 0x3f
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 ff36 	bl	8005b04 <sniprintf>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <led_write+0x8c>)
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <led_write+0x84>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff ffa8 	bl	8004bf8 <logger_log_print_>
 8004ca8:	f7ff fb8c 	bl	80043c4 <vPortExitCritical>
        return;
 8004cac:	e01f      	b.n	8004cee <led_write+0x7e>
    }

    assert(status == LED_ON || status == LED_OFF);
 8004cae:	79bb      	ldrb	r3, [r7, #6]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d008      	beq.n	8004cc6 <led_write+0x56>
 8004cb4:	79bb      	ldrb	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <led_write+0x56>
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <led_write+0x90>)
 8004cbc:	4a11      	ldr	r2, [pc, #68]	; (8004d04 <led_write+0x94>)
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	4811      	ldr	r0, [pc, #68]	; (8004d08 <led_write+0x98>)
 8004cc2:	f000 fd59 	bl	8005778 <__assert_func>
    GPIO_PinState state = (status == LED_ON) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8004cc6:	79bb      	ldrb	r3, [r7, #6]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(led_configs[led_index].port, led_configs[led_index].pin, state);
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <led_write+0x9c>)
 8004cd8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	4a0b      	ldr	r2, [pc, #44]	; (8004d0c <led_write+0x9c>)
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	889b      	ldrh	r3, [r3, #4]
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f7fc fa75 	bl	80011d8 <HAL_GPIO_WritePin>
}
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	08006ea0 	.word	0x08006ea0
 8004cf8:	08006cb8 	.word	0x08006cb8
 8004cfc:	2000419c 	.word	0x2000419c
 8004d00:	08006cd4 	.word	0x08006cd4
 8004d04:	08006ec8 	.word	0x08006ec8
 8004d08:	08006ca4 	.word	0x08006ca4
 8004d0c:	08006ea4 	.word	0x08006ea4

08004d10 <led_set>:

void led_set(uint8_t led_index) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
    led_write(led_index, LED_ON);
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ffa6 	bl	8004c70 <led_write>
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <led_clear>:

void led_clear(uint8_t led_index) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
    led_write(led_index, LED_OFF);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff98 	bl	8004c70 <led_write>
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <led_initialize_ao>:

// LED Active Object Functions
void led_initialize_ao(LEDActiveObject* ao, const char* ao_task_name) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
    BaseType_t ret;
    ret = xTaskCreate(led_task, ao_task_name, (2 * configMINIMAL_STACK_SIZE), (void*) ao, (tskIDLE_PRIORITY + 1UL), &ao->task);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	4816      	ldr	r0, [pc, #88]	; (8004dc0 <led_initialize_ao+0x78>)
 8004d66:	f7fe fb00 	bl	800336a <xTaskCreate>
 8004d6a:	6178      	str	r0, [r7, #20]
    configASSERT(ret == pdPASS);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d00a      	beq.n	8004d88 <led_initialize_ao+0x40>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	613b      	str	r3, [r7, #16]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <led_initialize_ao+0x3e>
    ao->queue = xQueueCreate(LED_AO_QUEUE_LENGTH, sizeof(LEDEvent));
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	200f      	movs	r0, #15
 8004d8e:	f7fd ff43 	bl	8002c18 <xQueueGenericCreate>
 8004d92:	4602      	mov	r2, r0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
    configASSERT(ao->queue);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <led_initialize_ao+0x6e>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <led_initialize_ao+0x6c>
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08004e55 	.word	0x08004e55

08004dc4 <led_ao_send_event>:
        vQueueDelete(ao->queue);
        ao->queue = NULL;
    }
}

void led_ao_send_event(LEDActiveObject* ao, const LEDEvent* event) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
    if (ao == NULL || event == NULL) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <led_ao_send_event+0x16>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d113      	bne.n	8004e02 <led_ao_send_event+0x3e>
        LOGGER_LOG("Error: Se detectó un puntero NULL en led_ao_send_event\n");
 8004dda:	f7ff fac3 	bl	8004364 <vPortEnterCritical>
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <led_ao_send_event+0x80>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <led_ao_send_event+0x84>)
 8004de4:	213f      	movs	r1, #63	; 0x3f
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fe8c 	bl	8005b04 <sniprintf>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <led_ao_send_event+0x88>)
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <led_ao_send_event+0x80>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fefe 	bl	8004bf8 <logger_log_print_>
 8004dfc:	f7ff fae2 	bl	80043c4 <vPortExitCritical>
        return;
 8004e00:	e01d      	b.n	8004e3e <led_ao_send_event+0x7a>
    }

    if (xQueueSend(ao->queue, event, portMAX_DELAY) != pdPASS) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	f7fd ff61 	bl	8002cd4 <xQueueGenericSend>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d012      	beq.n	8004e3e <led_ao_send_event+0x7a>
        LOGGER_LOG("Error al enviar el evento LED\n");
 8004e18:	f7ff faa4 	bl	8004364 <vPortEnterCritical>
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <led_ao_send_event+0x80>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <led_ao_send_event+0x8c>)
 8004e22:	213f      	movs	r1, #63	; 0x3f
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fe6d 	bl	8005b04 <sniprintf>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <led_ao_send_event+0x88>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <led_ao_send_event+0x80>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fedf 	bl	8004bf8 <logger_log_print_>
 8004e3a:	f7ff fac3 	bl	80043c4 <vPortExitCritical>
    }
}
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08006ea0 	.word	0x08006ea0
 8004e48:	08006cfc 	.word	0x08006cfc
 8004e4c:	2000419c 	.word	0x2000419c
 8004e50:	08006d38 	.word	0x08006d38

08004e54 <led_task>:

// Private Functions
static void led_task(void* parameters) {
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
    LEDActiveObject* const AO = (LEDActiveObject*) parameters;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]
    LEDEvent event;
    LOGGER_LOG("  --> '%s' created for LED control\n", pcTaskGetName(NULL));
 8004e60:	f7ff fa80 	bl	8004364 <vPortEnterCritical>
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <led_task+0x60>)
 8004e66:	681c      	ldr	r4, [r3, #0]
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7fe fd13 	bl	8003894 <pcTaskGetName>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <led_task+0x64>)
 8004e72:	213f      	movs	r1, #63	; 0x3f
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 fe45 	bl	8005b04 <sniprintf>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <led_task+0x68>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <led_task+0x60>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff feb7 	bl	8004bf8 <logger_log_print_>
 8004e8a:	f7ff fa9b 	bl	80043c4 <vPortExitCritical>

    while (1) {
        if (xQueueReceive(AO->queue, &event, portMAX_DELAY) == pdPASS) {
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f107 0108 	add.w	r1, r7, #8
 8004e96:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe f818 	bl	8002ed0 <xQueueReceive>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d1f3      	bne.n	8004e8e <led_task+0x3a>
            process_led_event(&event);
 8004ea6:	f107 0308 	add.w	r3, r7, #8
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f808 	bl	8004ec0 <process_led_event>
        if (xQueueReceive(AO->queue, &event, portMAX_DELAY) == pdPASS) {
 8004eb0:	e7ed      	b.n	8004e8e <led_task+0x3a>
 8004eb2:	bf00      	nop
 8004eb4:	08006ea0 	.word	0x08006ea0
 8004eb8:	08006d58 	.word	0x08006d58
 8004ebc:	2000419c 	.word	0x2000419c

08004ec0 <process_led_event>:
        }
    }
}

static void process_led_event(const LEDEvent* event) {
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
    LOGGER_LOG("[%s] Event Received: ", pcTaskGetName(NULL));
 8004ec8:	f7ff fa4c 	bl	8004364 <vPortEnterCritical>
 8004ecc:	4b5d      	ldr	r3, [pc, #372]	; (8005044 <process_led_event+0x184>)
 8004ece:	681c      	ldr	r4, [r3, #0]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f7fe fcdf 	bl	8003894 <pcTaskGetName>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4a5b      	ldr	r2, [pc, #364]	; (8005048 <process_led_event+0x188>)
 8004eda:	213f      	movs	r1, #63	; 0x3f
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 fe11 	bl	8005b04 <sniprintf>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4a59      	ldr	r2, [pc, #356]	; (800504c <process_led_event+0x18c>)
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b56      	ldr	r3, [pc, #344]	; (8005044 <process_led_event+0x184>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fe83 	bl	8004bf8 <logger_log_print_>
 8004ef2:	f7ff fa67 	bl	80043c4 <vPortExitCritical>
    if (event == NULL) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d113      	bne.n	8004f24 <process_led_event+0x64>
        LOGGER_LOG("Error: Received NULL event\r\n");
 8004efc:	f7ff fa32 	bl	8004364 <vPortEnterCritical>
 8004f00:	4b50      	ldr	r3, [pc, #320]	; (8005044 <process_led_event+0x184>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a52      	ldr	r2, [pc, #328]	; (8005050 <process_led_event+0x190>)
 8004f06:	213f      	movs	r1, #63	; 0x3f
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fdfb 	bl	8005b04 <sniprintf>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a4e      	ldr	r2, [pc, #312]	; (800504c <process_led_event+0x18c>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4b4b      	ldr	r3, [pc, #300]	; (8005044 <process_led_event+0x184>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fe6d 	bl	8004bf8 <logger_log_print_>
 8004f1e:	f7ff fa51 	bl	80043c4 <vPortExitCritical>
        return;
 8004f22:	e08b      	b.n	800503c <process_led_event+0x17c>
    }

    if (event->led_index >= NUM_LEDS) {
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d913      	bls.n	8004f54 <process_led_event+0x94>
        LOGGER_LOG("Error: Invalid LED index\r\n");
 8004f2c:	f7ff fa1a 	bl	8004364 <vPortEnterCritical>
 8004f30:	4b44      	ldr	r3, [pc, #272]	; (8005044 <process_led_event+0x184>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a47      	ldr	r2, [pc, #284]	; (8005054 <process_led_event+0x194>)
 8004f36:	213f      	movs	r1, #63	; 0x3f
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fde3 	bl	8005b04 <sniprintf>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4a42      	ldr	r2, [pc, #264]	; (800504c <process_led_event+0x18c>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <process_led_event+0x184>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fe55 	bl	8004bf8 <logger_log_print_>
 8004f4e:	f7ff fa39 	bl	80043c4 <vPortExitCritical>
        return;
 8004f52:	e073      	b.n	800503c <process_led_event+0x17c>
    }

    switch (event->type) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d038      	beq.n	8004fce <process_led_event+0x10e>
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	dc4f      	bgt.n	8005000 <process_led_event+0x140>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <process_led_event+0xaa>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d019      	beq.n	8004f9c <process_led_event+0xdc>
 8004f68:	e04a      	b.n	8005000 <process_led_event+0x140>
    case LED_EVENT_ON:
        LOGGER_LOG("LED_EVENT_ON\r\n");
 8004f6a:	f7ff f9fb 	bl	8004364 <vPortEnterCritical>
 8004f6e:	4b35      	ldr	r3, [pc, #212]	; (8005044 <process_led_event+0x184>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a39      	ldr	r2, [pc, #228]	; (8005058 <process_led_event+0x198>)
 8004f74:	213f      	movs	r1, #63	; 0x3f
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fdc4 	bl	8005b04 <sniprintf>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4a33      	ldr	r2, [pc, #204]	; (800504c <process_led_event+0x18c>)
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b30      	ldr	r3, [pc, #192]	; (8005044 <process_led_event+0x184>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fe36 	bl	8004bf8 <logger_log_print_>
 8004f8c:	f7ff fa1a 	bl	80043c4 <vPortExitCritical>
        led_set(event->led_index);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff febb 	bl	8004d10 <led_set>
        break;
 8004f9a:	e04f      	b.n	800503c <process_led_event+0x17c>
    case LED_EVENT_OFF:
        LOGGER_LOG("LED_EVENT_OFF\r\n");
 8004f9c:	f7ff f9e2 	bl	8004364 <vPortEnterCritical>
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <process_led_event+0x184>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	; (800505c <process_led_event+0x19c>)
 8004fa6:	213f      	movs	r1, #63	; 0x3f
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fdab 	bl	8005b04 <sniprintf>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4a26      	ldr	r2, [pc, #152]	; (800504c <process_led_event+0x18c>)
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b23      	ldr	r3, [pc, #140]	; (8005044 <process_led_event+0x184>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fe1d 	bl	8004bf8 <logger_log_print_>
 8004fbe:	f7ff fa01 	bl	80043c4 <vPortExitCritical>
        led_clear(event->led_index);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff feb0 	bl	8004d2c <led_clear>
        break;
 8004fcc:	e036      	b.n	800503c <process_led_event+0x17c>
    case LED_EVENT_TOGGLE:
        LOGGER_LOG("LED_EVENT_TOGGLE\r\n");
 8004fce:	f7ff f9c9 	bl	8004364 <vPortEnterCritical>
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <process_led_event+0x184>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a22      	ldr	r2, [pc, #136]	; (8005060 <process_led_event+0x1a0>)
 8004fd8:	213f      	movs	r1, #63	; 0x3f
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fd92 	bl	8005b04 <sniprintf>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	; (800504c <process_led_event+0x18c>)
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b17      	ldr	r3, [pc, #92]	; (8005044 <process_led_event+0x184>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fe04 	bl	8004bf8 <logger_log_print_>
 8004ff0:	f7ff f9e8 	bl	80043c4 <vPortExitCritical>
        led_toggle(event->led_index);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fe11 	bl	8004c20 <led_toggle>
        break;
 8004ffe:	e01d      	b.n	800503c <process_led_event+0x17c>
    default:
        LOGGER_LOG("Invalid LED event type\r\n");
 8005000:	f7ff f9b0 	bl	8004364 <vPortEnterCritical>
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <process_led_event+0x184>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <process_led_event+0x1a4>)
 800500a:	213f      	movs	r1, #63	; 0x3f
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fd79 	bl	8005b04 <sniprintf>
 8005012:	4603      	mov	r3, r0
 8005014:	4a0d      	ldr	r2, [pc, #52]	; (800504c <process_led_event+0x18c>)
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <process_led_event+0x184>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fdeb 	bl	8004bf8 <logger_log_print_>
 8005022:	f7ff f9cf 	bl	80043c4 <vPortExitCritical>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60fb      	str	r3, [r7, #12]
}
 8005038:	bf00      	nop
        configASSERT(pdFAIL && "Invalid LED event");
 800503a:	e7fe      	b.n	800503a <process_led_event+0x17a>
        break;
    }
}
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	bd90      	pop	{r4, r7, pc}
 8005042:	bf00      	nop
 8005044:	08006ea0 	.word	0x08006ea0
 8005048:	08006d7c 	.word	0x08006d7c
 800504c:	2000419c 	.word	0x2000419c
 8005050:	08006d94 	.word	0x08006d94
 8005054:	08006cb8 	.word	0x08006cb8
 8005058:	08006db4 	.word	0x08006db4
 800505c:	08006dc4 	.word	0x08006dc4
 8005060:	08006dd4 	.word	0x08006dd4
 8005064:	08006de8 	.word	0x08006de8

08005068 <button_initialize_ao>:
 * @param parameters Pointer to the button active object.
 * @param button_config Configuration for the button.
 * @param ao_task_name Name of the task for logging purposes.
 */
void button_initialize_ao(ButtonActiveObject_t *parameters,
        ButtonConfig_t button_config, const char *ao_task_name) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	1d38      	adds	r0, r7, #4
 8005072:	e880 0006 	stmia.w	r0, {r1, r2}
 8005076:	603b      	str	r3, [r7, #0]
    BaseType_t ret;
    ButtonActiveObject_t *const ao = (ButtonActiveObject_t*) parameters;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	61fb      	str	r3, [r7, #28]

    // Create button task
    ret = xTaskCreate(task_button, "Task button", 2 * configMINIMAL_STACK_SIZE,
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	2301      	movs	r3, #1
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800508c:	4923      	ldr	r1, [pc, #140]	; (800511c <button_initialize_ao+0xb4>)
 800508e:	4824      	ldr	r0, [pc, #144]	; (8005120 <button_initialize_ao+0xb8>)
 8005090:	f7fe f96b 	bl	800336a <xTaskCreate>
 8005094:	61b8      	str	r0, [r7, #24]
            (void*) ao, tskIDLE_PRIORITY + 1UL, ao->task_button_h);
    configASSERT(ret == pdPASS);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d00a      	beq.n	80050b2 <button_initialize_ao+0x4a>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	617b      	str	r3, [r7, #20]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <button_initialize_ao+0x48>

    // Create queue for button events
    ao->queue_button_h = xQueueCreate(LENGTH_QUEUE_PULSE, SIZE_QUEUE_PULSE);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2101      	movs	r1, #1
 80050b6:	2005      	movs	r0, #5
 80050b8:	f7fd fdae 	bl	8002c18 <xQueueGenericCreate>
 80050bc:	4602      	mov	r2, r0
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	601a      	str	r2, [r3, #0]
    configASSERT(ao->queue_button_h);
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <button_initialize_ao+0x78>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	613b      	str	r3, [r7, #16]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <button_initialize_ao+0x76>

    // Assign button configuration
    ao->button_config = button_config;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	3308      	adds	r3, #8
 80050e4:	1d3a      	adds	r2, r7, #4
 80050e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050ea:	e883 0003 	stmia.w	r3, {r0, r1}

    // Log task creation
    LOGGER_LOG(" --> '%s' created for BUTTON control\r\n", ao_task_name);
 80050ee:	f7ff f939 	bl	8004364 <vPortEnterCritical>
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <button_initialize_ao+0xbc>)
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <button_initialize_ao+0xc0>)
 80050fa:	213f      	movs	r1, #63	; 0x3f
 80050fc:	f000 fd02 	bl	8005b04 <sniprintf>
 8005100:	4603      	mov	r3, r0
 8005102:	4a0a      	ldr	r2, [pc, #40]	; (800512c <button_initialize_ao+0xc4>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <button_initialize_ao+0xbc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fd74 	bl	8004bf8 <logger_log_print_>
 8005110:	f7ff f958 	bl	80043c4 <vPortExitCritical>
}
 8005114:	bf00      	nop
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	08006e04 	.word	0x08006e04
 8005120:	08005131 	.word	0x08005131
 8005124:	08006ea0 	.word	0x08006ea0
 8005128:	08006e10 	.word	0x08006e10
 800512c:	2000419c 	.word	0x2000419c

08005130 <task_button>:
/**
 * @brief Task for handling button events.
 *
 * @param parameters Pointer to the button active object.
 */
void task_button(void *parameters) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
    ButtonActiveObject_t *const ao = (ButtonActiveObject_t*) parameters;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	617b      	str	r3, [r7, #20]
    ButtonConfig_t *config = &(ao->button_config);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3308      	adds	r3, #8
 8005140:	613b      	str	r3, [r7, #16]
    TickType_t time_pressed;
    state_button_t button_state;

    while (true) {
        // Check if button is pressed
        if (HAL_GPIO_ReadPin(config->port, config->pin) == BUTTON_PRESSED) {
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	889b      	ldrh	r3, [r3, #4]
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7fc f82b 	bl	80011a8 <HAL_GPIO_ReadPin>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d15f      	bne.n	8005218 <task_button+0xe8>
            time_pressed = xTaskGetTickCount();
 8005158:	f7fe fb8c 	bl	8003874 <xTaskGetTickCount>
 800515c:	60f8      	str	r0, [r7, #12]
            // Wait until button is released
            while (HAL_GPIO_ReadPin(config->port, config->pin) == BUTTON_PRESSED) {
 800515e:	e002      	b.n	8005166 <task_button+0x36>
                vTaskDelay(pdMS_TO_TICKS(DEBOUNCE_DELAY_MS));
 8005160:	2032      	movs	r0, #50	; 0x32
 8005162:	f7fe fa47 	bl	80035f4 <vTaskDelay>
            while (HAL_GPIO_ReadPin(config->port, config->pin) == BUTTON_PRESSED) {
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	889b      	ldrh	r3, [r3, #4]
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7fc f819 	bl	80011a8 <HAL_GPIO_ReadPin>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f1      	beq.n	8005160 <task_button+0x30>
            }
            // Calculate time button was held down
            time_pressed = xTaskGetTickCount() - time_pressed;
 800517c:	f7fe fb7a 	bl	8003874 <xTaskGetTickCount>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	60fb      	str	r3, [r7, #12]

            // Determine the state of button press
            if (time_pressed >= 2000) {
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800518e:	d302      	bcc.n	8005196 <task_button+0x66>
                button_state = PULSE_LONG;
 8005190:	2303      	movs	r3, #3
 8005192:	72fb      	strb	r3, [r7, #11]
 8005194:	e00e      	b.n	80051b4 <task_button+0x84>
            } else if (time_pressed >= 1000) {
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519c:	d302      	bcc.n	80051a4 <task_button+0x74>
                button_state = PULSE_SHORT;
 800519e:	2302      	movs	r3, #2
 80051a0:	72fb      	strb	r3, [r7, #11]
 80051a2:	e007      	b.n	80051b4 <task_button+0x84>
            } else if (time_pressed >= 200) {
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2bc7      	cmp	r3, #199	; 0xc7
 80051a8:	d902      	bls.n	80051b0 <task_button+0x80>
                button_state = PULSE_PULSE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	72fb      	strb	r3, [r7, #11]
 80051ae:	e001      	b.n	80051b4 <task_button+0x84>
            } else {
                button_state = PULSE_ERROR; // Non-qualifying press
 80051b0:	2304      	movs	r3, #4
 80051b2:	72fb      	strb	r3, [r7, #11]
            }

            // Send button state to the queue
            if (xQueueSend(ao->queue_button_h, &button_state, 0) != pdPASS) {
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	f107 010b 	add.w	r1, r7, #11
 80051bc:	2300      	movs	r3, #0
 80051be:	2200      	movs	r2, #0
 80051c0:	f7fd fd88 	bl	8002cd4 <xQueueGenericSend>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d013      	beq.n	80051f2 <task_button+0xc2>
                LOGGER_LOG("\r\n --> Failed to send button event to queue\r\n");
 80051ca:	f7ff f8cb 	bl	8004364 <vPortEnterCritical>
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <task_button+0xf0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a14      	ldr	r2, [pc, #80]	; (8005224 <task_button+0xf4>)
 80051d4:	213f      	movs	r1, #63	; 0x3f
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fc94 	bl	8005b04 <sniprintf>
 80051dc:	4603      	mov	r3, r0
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <task_button+0xf8>)
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <task_button+0xf0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fd06 	bl	8004bf8 <logger_log_print_>
 80051ec:	f7ff f8ea 	bl	80043c4 <vPortExitCritical>
 80051f0:	e012      	b.n	8005218 <task_button+0xe8>
            } else {
                LOGGER_LOG("\r\n --> Button event sent: %d\r\n", button_state);
 80051f2:	f7ff f8b7 	bl	8004364 <vPortEnterCritical>
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <task_button+0xf0>)
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	4a0b      	ldr	r2, [pc, #44]	; (800522c <task_button+0xfc>)
 80051fe:	213f      	movs	r1, #63	; 0x3f
 8005200:	f000 fc80 	bl	8005b04 <sniprintf>
 8005204:	4603      	mov	r3, r0
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <task_button+0xf8>)
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <task_button+0xf0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fcf2 	bl	8004bf8 <logger_log_print_>
 8005214:	f7ff f8d6 	bl	80043c4 <vPortExitCritical>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(10)); // Small delay to avoid rapid polling
 8005218:	200a      	movs	r0, #10
 800521a:	f7fe f9eb 	bl	80035f4 <vTaskDelay>
        if (HAL_GPIO_ReadPin(config->port, config->pin) == BUTTON_PRESSED) {
 800521e:	e790      	b.n	8005142 <task_button+0x12>
 8005220:	08006ea0 	.word	0x08006ea0
 8005224:	08006e38 	.word	0x08006e38
 8005228:	2000419c 	.word	0x2000419c
 800522c:	08006e68 	.word	0x08006e68

08005230 <findslot>:
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <findslot+0x2c>)
 8005232:	b510      	push	{r4, lr}
 8005234:	4604      	mov	r4, r0
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	b118      	cbz	r0, 8005242 <findslot+0x12>
 800523a:	6a03      	ldr	r3, [r0, #32]
 800523c:	b90b      	cbnz	r3, 8005242 <findslot+0x12>
 800523e:	f000 fc07 	bl	8005a50 <__sinit>
 8005242:	2c13      	cmp	r4, #19
 8005244:	d807      	bhi.n	8005256 <findslot+0x26>
 8005246:	4806      	ldr	r0, [pc, #24]	; (8005260 <findslot+0x30>)
 8005248:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800524c:	3201      	adds	r2, #1
 800524e:	d002      	beq.n	8005256 <findslot+0x26>
 8005250:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005254:	bd10      	pop	{r4, pc}
 8005256:	2000      	movs	r0, #0
 8005258:	e7fc      	b.n	8005254 <findslot+0x24>
 800525a:	bf00      	nop
 800525c:	2000007c 	.word	0x2000007c
 8005260:	200041ac 	.word	0x200041ac

08005264 <error>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	4604      	mov	r4, r0
 8005268:	f000 fd12 	bl	8005c90 <__errno>
 800526c:	2613      	movs	r6, #19
 800526e:	4605      	mov	r5, r0
 8005270:	2700      	movs	r7, #0
 8005272:	4630      	mov	r0, r6
 8005274:	4639      	mov	r1, r7
 8005276:	beab      	bkpt	0x00ab
 8005278:	4606      	mov	r6, r0
 800527a:	602e      	str	r6, [r5, #0]
 800527c:	4620      	mov	r0, r4
 800527e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005280 <checkerror>:
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d101      	bne.n	8005288 <checkerror+0x8>
 8005284:	f7ff bfee 	b.w	8005264 <error>
 8005288:	4770      	bx	lr

0800528a <_swiread>:
 800528a:	b530      	push	{r4, r5, lr}
 800528c:	b085      	sub	sp, #20
 800528e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005292:	9203      	str	r2, [sp, #12]
 8005294:	2406      	movs	r4, #6
 8005296:	ad01      	add	r5, sp, #4
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	beab      	bkpt	0x00ab
 800529e:	4604      	mov	r4, r0
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff ffed 	bl	8005280 <checkerror>
 80052a6:	b005      	add	sp, #20
 80052a8:	bd30      	pop	{r4, r5, pc}

080052aa <_read>:
 80052aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ac:	4615      	mov	r5, r2
 80052ae:	9101      	str	r1, [sp, #4]
 80052b0:	f7ff ffbe 	bl	8005230 <findslot>
 80052b4:	9901      	ldr	r1, [sp, #4]
 80052b6:	4604      	mov	r4, r0
 80052b8:	b938      	cbnz	r0, 80052ca <_read+0x20>
 80052ba:	f000 fce9 	bl	8005c90 <__errno>
 80052be:	2309      	movs	r3, #9
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	f04f 30ff 	mov.w	r0, #4294967295
 80052c6:	b003      	add	sp, #12
 80052c8:	bd30      	pop	{r4, r5, pc}
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	462a      	mov	r2, r5
 80052ce:	f7ff ffdc 	bl	800528a <_swiread>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d0f7      	beq.n	80052c6 <_read+0x1c>
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	1a2a      	subs	r2, r5, r0
 80052da:	4413      	add	r3, r2
 80052dc:	6063      	str	r3, [r4, #4]
 80052de:	4610      	mov	r0, r2
 80052e0:	e7f1      	b.n	80052c6 <_read+0x1c>

080052e2 <_swilseek>:
 80052e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e4:	460c      	mov	r4, r1
 80052e6:	4616      	mov	r6, r2
 80052e8:	f7ff ffa2 	bl	8005230 <findslot>
 80052ec:	4605      	mov	r5, r0
 80052ee:	b940      	cbnz	r0, 8005302 <_swilseek+0x20>
 80052f0:	f000 fcce 	bl	8005c90 <__errno>
 80052f4:	2309      	movs	r3, #9
 80052f6:	6003      	str	r3, [r0, #0]
 80052f8:	f04f 34ff 	mov.w	r4, #4294967295
 80052fc:	4620      	mov	r0, r4
 80052fe:	b003      	add	sp, #12
 8005300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005302:	2e02      	cmp	r6, #2
 8005304:	d903      	bls.n	800530e <_swilseek+0x2c>
 8005306:	f000 fcc3 	bl	8005c90 <__errno>
 800530a:	2316      	movs	r3, #22
 800530c:	e7f3      	b.n	80052f6 <_swilseek+0x14>
 800530e:	2e01      	cmp	r6, #1
 8005310:	d112      	bne.n	8005338 <_swilseek+0x56>
 8005312:	6843      	ldr	r3, [r0, #4]
 8005314:	18e4      	adds	r4, r4, r3
 8005316:	d4f6      	bmi.n	8005306 <_swilseek+0x24>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	260a      	movs	r6, #10
 800531c:	e9cd 3400 	strd	r3, r4, [sp]
 8005320:	466f      	mov	r7, sp
 8005322:	4630      	mov	r0, r6
 8005324:	4639      	mov	r1, r7
 8005326:	beab      	bkpt	0x00ab
 8005328:	4606      	mov	r6, r0
 800532a:	4630      	mov	r0, r6
 800532c:	f7ff ffa8 	bl	8005280 <checkerror>
 8005330:	2800      	cmp	r0, #0
 8005332:	dbe1      	blt.n	80052f8 <_swilseek+0x16>
 8005334:	606c      	str	r4, [r5, #4]
 8005336:	e7e1      	b.n	80052fc <_swilseek+0x1a>
 8005338:	2e02      	cmp	r6, #2
 800533a:	6803      	ldr	r3, [r0, #0]
 800533c:	d1ec      	bne.n	8005318 <_swilseek+0x36>
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	260c      	movs	r6, #12
 8005342:	466f      	mov	r7, sp
 8005344:	4630      	mov	r0, r6
 8005346:	4639      	mov	r1, r7
 8005348:	beab      	bkpt	0x00ab
 800534a:	4606      	mov	r6, r0
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff ff97 	bl	8005280 <checkerror>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d0d0      	beq.n	80052f8 <_swilseek+0x16>
 8005356:	4404      	add	r4, r0
 8005358:	e7de      	b.n	8005318 <_swilseek+0x36>

0800535a <_lseek>:
 800535a:	f7ff bfc2 	b.w	80052e2 <_swilseek>

0800535e <_swiwrite>:
 800535e:	b530      	push	{r4, r5, lr}
 8005360:	b085      	sub	sp, #20
 8005362:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005366:	9203      	str	r2, [sp, #12]
 8005368:	2405      	movs	r4, #5
 800536a:	ad01      	add	r5, sp, #4
 800536c:	4620      	mov	r0, r4
 800536e:	4629      	mov	r1, r5
 8005370:	beab      	bkpt	0x00ab
 8005372:	4604      	mov	r4, r0
 8005374:	4620      	mov	r0, r4
 8005376:	f7ff ff83 	bl	8005280 <checkerror>
 800537a:	b005      	add	sp, #20
 800537c:	bd30      	pop	{r4, r5, pc}

0800537e <_write>:
 800537e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005380:	4615      	mov	r5, r2
 8005382:	9101      	str	r1, [sp, #4]
 8005384:	f7ff ff54 	bl	8005230 <findslot>
 8005388:	9901      	ldr	r1, [sp, #4]
 800538a:	4604      	mov	r4, r0
 800538c:	b930      	cbnz	r0, 800539c <_write+0x1e>
 800538e:	f000 fc7f 	bl	8005c90 <__errno>
 8005392:	2309      	movs	r3, #9
 8005394:	6003      	str	r3, [r0, #0]
 8005396:	f04f 30ff 	mov.w	r0, #4294967295
 800539a:	e012      	b.n	80053c2 <_write+0x44>
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	462a      	mov	r2, r5
 80053a0:	f7ff ffdd 	bl	800535e <_swiwrite>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	dbf6      	blt.n	8005396 <_write+0x18>
 80053a8:	6862      	ldr	r2, [r4, #4]
 80053aa:	1a2b      	subs	r3, r5, r0
 80053ac:	441a      	add	r2, r3
 80053ae:	42a8      	cmp	r0, r5
 80053b0:	6062      	str	r2, [r4, #4]
 80053b2:	d105      	bne.n	80053c0 <_write+0x42>
 80053b4:	2000      	movs	r0, #0
 80053b6:	b003      	add	sp, #12
 80053b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053bc:	f7ff bf52 	b.w	8005264 <error>
 80053c0:	4618      	mov	r0, r3
 80053c2:	b003      	add	sp, #12
 80053c4:	bd30      	pop	{r4, r5, pc}

080053c6 <_swiclose>:
 80053c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053c8:	2402      	movs	r4, #2
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	ad01      	add	r5, sp, #4
 80053ce:	4620      	mov	r0, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	beab      	bkpt	0x00ab
 80053d4:	4604      	mov	r4, r0
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff ff52 	bl	8005280 <checkerror>
 80053dc:	b003      	add	sp, #12
 80053de:	bd30      	pop	{r4, r5, pc}

080053e0 <_close>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4605      	mov	r5, r0
 80053e4:	f7ff ff24 	bl	8005230 <findslot>
 80053e8:	4604      	mov	r4, r0
 80053ea:	b930      	cbnz	r0, 80053fa <_close+0x1a>
 80053ec:	f000 fc50 	bl	8005c90 <__errno>
 80053f0:	2309      	movs	r3, #9
 80053f2:	6003      	str	r3, [r0, #0]
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	3d01      	subs	r5, #1
 80053fc:	2d01      	cmp	r5, #1
 80053fe:	d809      	bhi.n	8005414 <_close+0x34>
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <_close+0x48>)
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d104      	bne.n	8005414 <_close+0x34>
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	6003      	str	r3, [r0, #0]
 8005410:	2000      	movs	r0, #0
 8005412:	e7f1      	b.n	80053f8 <_close+0x18>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	f7ff ffd6 	bl	80053c6 <_swiclose>
 800541a:	2800      	cmp	r0, #0
 800541c:	d1ec      	bne.n	80053f8 <_close+0x18>
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	e7e8      	b.n	80053f8 <_close+0x18>
 8005426:	bf00      	nop
 8005428:	200041ac 	.word	0x200041ac

0800542c <_getpid>:
 800542c:	2001      	movs	r0, #1
 800542e:	4770      	bx	lr

08005430 <_swistat>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	460c      	mov	r4, r1
 8005434:	f7ff fefc 	bl	8005230 <findslot>
 8005438:	4605      	mov	r5, r0
 800543a:	b930      	cbnz	r0, 800544a <_swistat+0x1a>
 800543c:	f000 fc28 	bl	8005c90 <__errno>
 8005440:	2309      	movs	r3, #9
 8005442:	6003      	str	r3, [r0, #0]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005456:	64a3      	str	r3, [r4, #72]	; 0x48
 8005458:	260c      	movs	r6, #12
 800545a:	4630      	mov	r0, r6
 800545c:	4629      	mov	r1, r5
 800545e:	beab      	bkpt	0x00ab
 8005460:	4605      	mov	r5, r0
 8005462:	4628      	mov	r0, r5
 8005464:	f7ff ff0c 	bl	8005280 <checkerror>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	bf1c      	itt	ne
 800546c:	6120      	strne	r0, [r4, #16]
 800546e:	2000      	movne	r0, #0
 8005470:	e7ea      	b.n	8005448 <_swistat+0x18>

08005472 <_fstat>:
 8005472:	460b      	mov	r3, r1
 8005474:	b510      	push	{r4, lr}
 8005476:	2100      	movs	r1, #0
 8005478:	4604      	mov	r4, r0
 800547a:	2258      	movs	r2, #88	; 0x58
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fbb8 	bl	8005bf2 <memset>
 8005482:	4601      	mov	r1, r0
 8005484:	4620      	mov	r0, r4
 8005486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548a:	f7ff bfd1 	b.w	8005430 <_swistat>

0800548e <_stat>:
 800548e:	b538      	push	{r3, r4, r5, lr}
 8005490:	460d      	mov	r5, r1
 8005492:	4604      	mov	r4, r0
 8005494:	2258      	movs	r2, #88	; 0x58
 8005496:	2100      	movs	r1, #0
 8005498:	4628      	mov	r0, r5
 800549a:	f000 fbaa 	bl	8005bf2 <memset>
 800549e:	4620      	mov	r0, r4
 80054a0:	2100      	movs	r1, #0
 80054a2:	f000 f811 	bl	80054c8 <_swiopen>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	4604      	mov	r4, r0
 80054aa:	d00b      	beq.n	80054c4 <_stat+0x36>
 80054ac:	686b      	ldr	r3, [r5, #4]
 80054ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054b2:	606b      	str	r3, [r5, #4]
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7ff ffbb 	bl	8005430 <_swistat>
 80054ba:	4605      	mov	r5, r0
 80054bc:	4620      	mov	r0, r4
 80054be:	f7ff ff8f 	bl	80053e0 <_close>
 80054c2:	462c      	mov	r4, r5
 80054c4:	4620      	mov	r0, r4
 80054c6:	bd38      	pop	{r3, r4, r5, pc}

080054c8 <_swiopen>:
 80054c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054cc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005578 <_swiopen+0xb0>
 80054d0:	b097      	sub	sp, #92	; 0x5c
 80054d2:	4607      	mov	r7, r0
 80054d4:	460e      	mov	r6, r1
 80054d6:	2500      	movs	r5, #0
 80054d8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80054dc:	1c61      	adds	r1, r4, #1
 80054de:	d037      	beq.n	8005550 <_swiopen+0x88>
 80054e0:	3501      	adds	r5, #1
 80054e2:	2d14      	cmp	r5, #20
 80054e4:	d1f8      	bne.n	80054d8 <_swiopen+0x10>
 80054e6:	f000 fbd3 	bl	8005c90 <__errno>
 80054ea:	2318      	movs	r3, #24
 80054ec:	6003      	str	r3, [r0, #0]
 80054ee:	f04f 34ff 	mov.w	r4, #4294967295
 80054f2:	e03d      	b.n	8005570 <_swiopen+0xa8>
 80054f4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80054f8:	f240 6301 	movw	r3, #1537	; 0x601
 80054fc:	07b2      	lsls	r2, r6, #30
 80054fe:	bf48      	it	mi
 8005500:	f044 0402 	orrmi.w	r4, r4, #2
 8005504:	421e      	tst	r6, r3
 8005506:	bf18      	it	ne
 8005508:	f044 0404 	orrne.w	r4, r4, #4
 800550c:	0733      	lsls	r3, r6, #28
 800550e:	bf48      	it	mi
 8005510:	f024 0404 	bicmi.w	r4, r4, #4
 8005514:	4638      	mov	r0, r7
 8005516:	bf48      	it	mi
 8005518:	f044 0408 	orrmi.w	r4, r4, #8
 800551c:	9700      	str	r7, [sp, #0]
 800551e:	f7fa fe5f 	bl	80001e0 <strlen>
 8005522:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8005526:	2401      	movs	r4, #1
 8005528:	4620      	mov	r0, r4
 800552a:	4649      	mov	r1, r9
 800552c:	beab      	bkpt	0x00ab
 800552e:	4604      	mov	r4, r0
 8005530:	2c00      	cmp	r4, #0
 8005532:	db08      	blt.n	8005546 <_swiopen+0x7e>
 8005534:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005538:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800553c:	2300      	movs	r3, #0
 800553e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005542:	462c      	mov	r4, r5
 8005544:	e014      	b.n	8005570 <_swiopen+0xa8>
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff fe8c 	bl	8005264 <error>
 800554c:	4604      	mov	r4, r0
 800554e:	e00f      	b.n	8005570 <_swiopen+0xa8>
 8005550:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005554:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005558:	46e9      	mov	r9, sp
 800555a:	d1cb      	bne.n	80054f4 <_swiopen+0x2c>
 800555c:	4649      	mov	r1, r9
 800555e:	4638      	mov	r0, r7
 8005560:	f7ff ff95 	bl	800548e <_stat>
 8005564:	3001      	adds	r0, #1
 8005566:	d0c5      	beq.n	80054f4 <_swiopen+0x2c>
 8005568:	f000 fb92 	bl	8005c90 <__errno>
 800556c:	2311      	movs	r3, #17
 800556e:	6003      	str	r3, [r0, #0]
 8005570:	4620      	mov	r0, r4
 8005572:	b017      	add	sp, #92	; 0x5c
 8005574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005578:	200041ac 	.word	0x200041ac

0800557c <_get_semihosting_exts>:
 800557c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005580:	4606      	mov	r6, r0
 8005582:	460f      	mov	r7, r1
 8005584:	482a      	ldr	r0, [pc, #168]	; (8005630 <_get_semihosting_exts+0xb4>)
 8005586:	2100      	movs	r1, #0
 8005588:	4615      	mov	r5, r2
 800558a:	f7ff ff9d 	bl	80054c8 <_swiopen>
 800558e:	462a      	mov	r2, r5
 8005590:	4604      	mov	r4, r0
 8005592:	2100      	movs	r1, #0
 8005594:	4630      	mov	r0, r6
 8005596:	f000 fb2c 	bl	8005bf2 <memset>
 800559a:	1c63      	adds	r3, r4, #1
 800559c:	d016      	beq.n	80055cc <_get_semihosting_exts+0x50>
 800559e:	4620      	mov	r0, r4
 80055a0:	f7ff fe46 	bl	8005230 <findslot>
 80055a4:	f04f 080c 	mov.w	r8, #12
 80055a8:	4681      	mov	r9, r0
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	beab      	bkpt	0x00ab
 80055b0:	4680      	mov	r8, r0
 80055b2:	4640      	mov	r0, r8
 80055b4:	f7ff fe64 	bl	8005280 <checkerror>
 80055b8:	2803      	cmp	r0, #3
 80055ba:	dd02      	ble.n	80055c2 <_get_semihosting_exts+0x46>
 80055bc:	1ec3      	subs	r3, r0, #3
 80055be:	42ab      	cmp	r3, r5
 80055c0:	dc08      	bgt.n	80055d4 <_get_semihosting_exts+0x58>
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7ff ff0c 	bl	80053e0 <_close>
 80055c8:	f04f 34ff 	mov.w	r4, #4294967295
 80055cc:	4620      	mov	r0, r4
 80055ce:	b003      	add	sp, #12
 80055d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d4:	2204      	movs	r2, #4
 80055d6:	eb0d 0102 	add.w	r1, sp, r2
 80055da:	4620      	mov	r0, r4
 80055dc:	f7ff fe65 	bl	80052aa <_read>
 80055e0:	2803      	cmp	r0, #3
 80055e2:	ddee      	ble.n	80055c2 <_get_semihosting_exts+0x46>
 80055e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055e8:	2b53      	cmp	r3, #83	; 0x53
 80055ea:	d1ea      	bne.n	80055c2 <_get_semihosting_exts+0x46>
 80055ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80055f0:	2b48      	cmp	r3, #72	; 0x48
 80055f2:	d1e6      	bne.n	80055c2 <_get_semihosting_exts+0x46>
 80055f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80055f8:	2b46      	cmp	r3, #70	; 0x46
 80055fa:	d1e2      	bne.n	80055c2 <_get_semihosting_exts+0x46>
 80055fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005600:	2b42      	cmp	r3, #66	; 0x42
 8005602:	d1de      	bne.n	80055c2 <_get_semihosting_exts+0x46>
 8005604:	2201      	movs	r2, #1
 8005606:	4639      	mov	r1, r7
 8005608:	4620      	mov	r0, r4
 800560a:	f7ff fe6a 	bl	80052e2 <_swilseek>
 800560e:	2800      	cmp	r0, #0
 8005610:	dbd7      	blt.n	80055c2 <_get_semihosting_exts+0x46>
 8005612:	462a      	mov	r2, r5
 8005614:	4631      	mov	r1, r6
 8005616:	4620      	mov	r0, r4
 8005618:	f7ff fe47 	bl	80052aa <_read>
 800561c:	4605      	mov	r5, r0
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff fede 	bl	80053e0 <_close>
 8005624:	4628      	mov	r0, r5
 8005626:	f7ff fe2b 	bl	8005280 <checkerror>
 800562a:	4604      	mov	r4, r0
 800562c:	e7ce      	b.n	80055cc <_get_semihosting_exts+0x50>
 800562e:	bf00      	nop
 8005630:	08006ed2 	.word	0x08006ed2

08005634 <initialise_semihosting_exts>:
 8005634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005636:	4d0a      	ldr	r5, [pc, #40]	; (8005660 <initialise_semihosting_exts+0x2c>)
 8005638:	4c0a      	ldr	r4, [pc, #40]	; (8005664 <initialise_semihosting_exts+0x30>)
 800563a:	2100      	movs	r1, #0
 800563c:	2201      	movs	r2, #1
 800563e:	a801      	add	r0, sp, #4
 8005640:	6029      	str	r1, [r5, #0]
 8005642:	6022      	str	r2, [r4, #0]
 8005644:	f7ff ff9a 	bl	800557c <_get_semihosting_exts>
 8005648:	2800      	cmp	r0, #0
 800564a:	dd07      	ble.n	800565c <initialise_semihosting_exts+0x28>
 800564c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005650:	f003 0201 	and.w	r2, r3, #1
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	6023      	str	r3, [r4, #0]
 800565c:	b003      	add	sp, #12
 800565e:	bd30      	pop	{r4, r5, pc}
 8005660:	2000001c 	.word	0x2000001c
 8005664:	20000020 	.word	0x20000020

08005668 <_has_ext_stdout_stderr>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4c04      	ldr	r4, [pc, #16]	; (800567c <_has_ext_stdout_stderr+0x14>)
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da01      	bge.n	8005676 <_has_ext_stdout_stderr+0xe>
 8005672:	f7ff ffdf 	bl	8005634 <initialise_semihosting_exts>
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	20000020 	.word	0x20000020

08005680 <initialise_monitor_handles>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	b085      	sub	sp, #20
 8005686:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005738 <initialise_monitor_handles+0xb8>
 800568a:	f8cd 9004 	str.w	r9, [sp, #4]
 800568e:	2303      	movs	r3, #3
 8005690:	2400      	movs	r4, #0
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	af01      	add	r7, sp, #4
 8005696:	9402      	str	r4, [sp, #8]
 8005698:	2501      	movs	r5, #1
 800569a:	4628      	mov	r0, r5
 800569c:	4639      	mov	r1, r7
 800569e:	beab      	bkpt	0x00ab
 80056a0:	4605      	mov	r5, r0
 80056a2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800573c <initialise_monitor_handles+0xbc>
 80056a6:	4623      	mov	r3, r4
 80056a8:	4c20      	ldr	r4, [pc, #128]	; (800572c <initialise_monitor_handles+0xac>)
 80056aa:	f8c8 5000 	str.w	r5, [r8]
 80056ae:	f04f 32ff 	mov.w	r2, #4294967295
 80056b2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80056b6:	3301      	adds	r3, #1
 80056b8:	2b14      	cmp	r3, #20
 80056ba:	d1fa      	bne.n	80056b2 <initialise_monitor_handles+0x32>
 80056bc:	f7ff ffd4 	bl	8005668 <_has_ext_stdout_stderr>
 80056c0:	4d1b      	ldr	r5, [pc, #108]	; (8005730 <initialise_monitor_handles+0xb0>)
 80056c2:	b1d0      	cbz	r0, 80056fa <initialise_monitor_handles+0x7a>
 80056c4:	f04f 0a03 	mov.w	sl, #3
 80056c8:	2304      	movs	r3, #4
 80056ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80056ce:	2601      	movs	r6, #1
 80056d0:	f8cd a00c 	str.w	sl, [sp, #12]
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	beab      	bkpt	0x00ab
 80056dc:	4683      	mov	fp, r0
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <initialise_monitor_handles+0xb4>)
 80056e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80056e4:	f8c3 b000 	str.w	fp, [r3]
 80056e8:	2308      	movs	r3, #8
 80056ea:	f8cd a00c 	str.w	sl, [sp, #12]
 80056ee:	9302      	str	r3, [sp, #8]
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	beab      	bkpt	0x00ab
 80056f6:	4606      	mov	r6, r0
 80056f8:	602e      	str	r6, [r5, #0]
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	bf02      	ittt	eq
 8005700:	4b0c      	ldreq	r3, [pc, #48]	; (8005734 <initialise_monitor_handles+0xb4>)
 8005702:	681b      	ldreq	r3, [r3, #0]
 8005704:	602b      	streq	r3, [r5, #0]
 8005706:	2600      	movs	r6, #0
 8005708:	f8d8 3000 	ldr.w	r3, [r8]
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	6066      	str	r6, [r4, #4]
 8005710:	f7ff ffaa 	bl	8005668 <_has_ext_stdout_stderr>
 8005714:	b130      	cbz	r0, 8005724 <initialise_monitor_handles+0xa4>
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <initialise_monitor_handles+0xb4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005724:	b005      	add	sp, #20
 8005726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572a:	bf00      	nop
 800572c:	200041ac 	.word	0x200041ac
 8005730:	200041a0 	.word	0x200041a0
 8005734:	200041a8 	.word	0x200041a8
 8005738:	08006ee8 	.word	0x08006ee8
 800573c:	200041a4 	.word	0x200041a4

08005740 <_isatty>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	f7ff fd75 	bl	8005230 <findslot>
 8005746:	2509      	movs	r5, #9
 8005748:	4604      	mov	r4, r0
 800574a:	b920      	cbnz	r0, 8005756 <_isatty+0x16>
 800574c:	f000 faa0 	bl	8005c90 <__errno>
 8005750:	6005      	str	r5, [r0, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	beab      	bkpt	0x00ab
 800575c:	4604      	mov	r4, r0
 800575e:	2c01      	cmp	r4, #1
 8005760:	d0f7      	beq.n	8005752 <_isatty+0x12>
 8005762:	f000 fa95 	bl	8005c90 <__errno>
 8005766:	2400      	movs	r4, #0
 8005768:	4605      	mov	r5, r0
 800576a:	2613      	movs	r6, #19
 800576c:	4630      	mov	r0, r6
 800576e:	4621      	mov	r1, r4
 8005770:	beab      	bkpt	0x00ab
 8005772:	4606      	mov	r6, r0
 8005774:	602e      	str	r6, [r5, #0]
 8005776:	e7ec      	b.n	8005752 <_isatty+0x12>

08005778 <__assert_func>:
 8005778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800577a:	4614      	mov	r4, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <__assert_func+0x2c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4605      	mov	r5, r0
 8005784:	68d8      	ldr	r0, [r3, #12]
 8005786:	b14c      	cbz	r4, 800579c <__assert_func+0x24>
 8005788:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <__assert_func+0x30>)
 800578a:	9100      	str	r1, [sp, #0]
 800578c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005790:	4906      	ldr	r1, [pc, #24]	; (80057ac <__assert_func+0x34>)
 8005792:	462b      	mov	r3, r5
 8005794:	f000 f974 	bl	8005a80 <fiprintf>
 8005798:	f000 fab5 	bl	8005d06 <abort>
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <__assert_func+0x38>)
 800579e:	461c      	mov	r4, r3
 80057a0:	e7f3      	b.n	800578a <__assert_func+0x12>
 80057a2:	bf00      	nop
 80057a4:	2000007c 	.word	0x2000007c
 80057a8:	08006eec 	.word	0x08006eec
 80057ac:	08006ef9 	.word	0x08006ef9
 80057b0:	08006f27 	.word	0x08006f27

080057b4 <__sflush_r>:
 80057b4:	898a      	ldrh	r2, [r1, #12]
 80057b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ba:	4605      	mov	r5, r0
 80057bc:	0710      	lsls	r0, r2, #28
 80057be:	460c      	mov	r4, r1
 80057c0:	d458      	bmi.n	8005874 <__sflush_r+0xc0>
 80057c2:	684b      	ldr	r3, [r1, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dc05      	bgt.n	80057d4 <__sflush_r+0x20>
 80057c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	dc02      	bgt.n	80057d4 <__sflush_r+0x20>
 80057ce:	2000      	movs	r0, #0
 80057d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057d6:	2e00      	cmp	r6, #0
 80057d8:	d0f9      	beq.n	80057ce <__sflush_r+0x1a>
 80057da:	2300      	movs	r3, #0
 80057dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057e0:	682f      	ldr	r7, [r5, #0]
 80057e2:	6a21      	ldr	r1, [r4, #32]
 80057e4:	602b      	str	r3, [r5, #0]
 80057e6:	d032      	beq.n	800584e <__sflush_r+0x9a>
 80057e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	075a      	lsls	r2, r3, #29
 80057ee:	d505      	bpl.n	80057fc <__sflush_r+0x48>
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	1ac0      	subs	r0, r0, r3
 80057f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057f6:	b10b      	cbz	r3, 80057fc <__sflush_r+0x48>
 80057f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057fa:	1ac0      	subs	r0, r0, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	4602      	mov	r2, r0
 8005800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005802:	6a21      	ldr	r1, [r4, #32]
 8005804:	4628      	mov	r0, r5
 8005806:	47b0      	blx	r6
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	d106      	bne.n	800581c <__sflush_r+0x68>
 800580e:	6829      	ldr	r1, [r5, #0]
 8005810:	291d      	cmp	r1, #29
 8005812:	d82b      	bhi.n	800586c <__sflush_r+0xb8>
 8005814:	4a29      	ldr	r2, [pc, #164]	; (80058bc <__sflush_r+0x108>)
 8005816:	410a      	asrs	r2, r1
 8005818:	07d6      	lsls	r6, r2, #31
 800581a:	d427      	bmi.n	800586c <__sflush_r+0xb8>
 800581c:	2200      	movs	r2, #0
 800581e:	6062      	str	r2, [r4, #4]
 8005820:	04d9      	lsls	r1, r3, #19
 8005822:	6922      	ldr	r2, [r4, #16]
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	d504      	bpl.n	8005832 <__sflush_r+0x7e>
 8005828:	1c42      	adds	r2, r0, #1
 800582a:	d101      	bne.n	8005830 <__sflush_r+0x7c>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b903      	cbnz	r3, 8005832 <__sflush_r+0x7e>
 8005830:	6560      	str	r0, [r4, #84]	; 0x54
 8005832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005834:	602f      	str	r7, [r5, #0]
 8005836:	2900      	cmp	r1, #0
 8005838:	d0c9      	beq.n	80057ce <__sflush_r+0x1a>
 800583a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800583e:	4299      	cmp	r1, r3
 8005840:	d002      	beq.n	8005848 <__sflush_r+0x94>
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fa66 	bl	8005d14 <_free_r>
 8005848:	2000      	movs	r0, #0
 800584a:	6360      	str	r0, [r4, #52]	; 0x34
 800584c:	e7c0      	b.n	80057d0 <__sflush_r+0x1c>
 800584e:	2301      	movs	r3, #1
 8005850:	4628      	mov	r0, r5
 8005852:	47b0      	blx	r6
 8005854:	1c41      	adds	r1, r0, #1
 8005856:	d1c8      	bne.n	80057ea <__sflush_r+0x36>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0c5      	beq.n	80057ea <__sflush_r+0x36>
 800585e:	2b1d      	cmp	r3, #29
 8005860:	d001      	beq.n	8005866 <__sflush_r+0xb2>
 8005862:	2b16      	cmp	r3, #22
 8005864:	d101      	bne.n	800586a <__sflush_r+0xb6>
 8005866:	602f      	str	r7, [r5, #0]
 8005868:	e7b1      	b.n	80057ce <__sflush_r+0x1a>
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	e7ad      	b.n	80057d0 <__sflush_r+0x1c>
 8005874:	690f      	ldr	r7, [r1, #16]
 8005876:	2f00      	cmp	r7, #0
 8005878:	d0a9      	beq.n	80057ce <__sflush_r+0x1a>
 800587a:	0793      	lsls	r3, r2, #30
 800587c:	680e      	ldr	r6, [r1, #0]
 800587e:	bf08      	it	eq
 8005880:	694b      	ldreq	r3, [r1, #20]
 8005882:	600f      	str	r7, [r1, #0]
 8005884:	bf18      	it	ne
 8005886:	2300      	movne	r3, #0
 8005888:	eba6 0807 	sub.w	r8, r6, r7
 800588c:	608b      	str	r3, [r1, #8]
 800588e:	f1b8 0f00 	cmp.w	r8, #0
 8005892:	dd9c      	ble.n	80057ce <__sflush_r+0x1a>
 8005894:	6a21      	ldr	r1, [r4, #32]
 8005896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005898:	4643      	mov	r3, r8
 800589a:	463a      	mov	r2, r7
 800589c:	4628      	mov	r0, r5
 800589e:	47b0      	blx	r6
 80058a0:	2800      	cmp	r0, #0
 80058a2:	dc06      	bgt.n	80058b2 <__sflush_r+0xfe>
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e78e      	b.n	80057d0 <__sflush_r+0x1c>
 80058b2:	4407      	add	r7, r0
 80058b4:	eba8 0800 	sub.w	r8, r8, r0
 80058b8:	e7e9      	b.n	800588e <__sflush_r+0xda>
 80058ba:	bf00      	nop
 80058bc:	dfbffffe 	.word	0xdfbffffe

080058c0 <_fflush_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	690b      	ldr	r3, [r1, #16]
 80058c4:	4605      	mov	r5, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b913      	cbnz	r3, 80058d0 <_fflush_r+0x10>
 80058ca:	2500      	movs	r5, #0
 80058cc:	4628      	mov	r0, r5
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	b118      	cbz	r0, 80058da <_fflush_r+0x1a>
 80058d2:	6a03      	ldr	r3, [r0, #32]
 80058d4:	b90b      	cbnz	r3, 80058da <_fflush_r+0x1a>
 80058d6:	f000 f8bb 	bl	8005a50 <__sinit>
 80058da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f3      	beq.n	80058ca <_fflush_r+0xa>
 80058e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058e4:	07d0      	lsls	r0, r2, #31
 80058e6:	d404      	bmi.n	80058f2 <_fflush_r+0x32>
 80058e8:	0599      	lsls	r1, r3, #22
 80058ea:	d402      	bmi.n	80058f2 <_fflush_r+0x32>
 80058ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ee:	f000 f9fa 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 80058f2:	4628      	mov	r0, r5
 80058f4:	4621      	mov	r1, r4
 80058f6:	f7ff ff5d 	bl	80057b4 <__sflush_r>
 80058fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058fc:	07da      	lsls	r2, r3, #31
 80058fe:	4605      	mov	r5, r0
 8005900:	d4e4      	bmi.n	80058cc <_fflush_r+0xc>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	059b      	lsls	r3, r3, #22
 8005906:	d4e1      	bmi.n	80058cc <_fflush_r+0xc>
 8005908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590a:	f000 f9ed 	bl	8005ce8 <__retarget_lock_release_recursive>
 800590e:	e7dd      	b.n	80058cc <_fflush_r+0xc>

08005910 <fflush>:
 8005910:	4601      	mov	r1, r0
 8005912:	b920      	cbnz	r0, 800591e <fflush+0xe>
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <fflush+0x18>)
 8005916:	4905      	ldr	r1, [pc, #20]	; (800592c <fflush+0x1c>)
 8005918:	4805      	ldr	r0, [pc, #20]	; (8005930 <fflush+0x20>)
 800591a:	f000 b8c3 	b.w	8005aa4 <_fwalk_sglue>
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <fflush+0x24>)
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	f7ff bfcd 	b.w	80058c0 <_fflush_r>
 8005926:	bf00      	nop
 8005928:	20000024 	.word	0x20000024
 800592c:	080058c1 	.word	0x080058c1
 8005930:	20000030 	.word	0x20000030
 8005934:	2000007c 	.word	0x2000007c

08005938 <std>:
 8005938:	2300      	movs	r3, #0
 800593a:	b510      	push	{r4, lr}
 800593c:	4604      	mov	r4, r0
 800593e:	e9c0 3300 	strd	r3, r3, [r0]
 8005942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005946:	6083      	str	r3, [r0, #8]
 8005948:	8181      	strh	r1, [r0, #12]
 800594a:	6643      	str	r3, [r0, #100]	; 0x64
 800594c:	81c2      	strh	r2, [r0, #14]
 800594e:	6183      	str	r3, [r0, #24]
 8005950:	4619      	mov	r1, r3
 8005952:	2208      	movs	r2, #8
 8005954:	305c      	adds	r0, #92	; 0x5c
 8005956:	f000 f94c 	bl	8005bf2 <memset>
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <std+0x58>)
 800595c:	6263      	str	r3, [r4, #36]	; 0x24
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <std+0x5c>)
 8005960:	62a3      	str	r3, [r4, #40]	; 0x28
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <std+0x60>)
 8005964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <std+0x64>)
 8005968:	6323      	str	r3, [r4, #48]	; 0x30
 800596a:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <std+0x68>)
 800596c:	6224      	str	r4, [r4, #32]
 800596e:	429c      	cmp	r4, r3
 8005970:	d006      	beq.n	8005980 <std+0x48>
 8005972:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005976:	4294      	cmp	r4, r2
 8005978:	d002      	beq.n	8005980 <std+0x48>
 800597a:	33d0      	adds	r3, #208	; 0xd0
 800597c:	429c      	cmp	r4, r3
 800597e:	d105      	bne.n	800598c <std+0x54>
 8005980:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005988:	f000 b9ac 	b.w	8005ce4 <__retarget_lock_init_recursive>
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	08005b6d 	.word	0x08005b6d
 8005994:	08005b8f 	.word	0x08005b8f
 8005998:	08005bc7 	.word	0x08005bc7
 800599c:	08005beb 	.word	0x08005beb
 80059a0:	2000424c 	.word	0x2000424c

080059a4 <stdio_exit_handler>:
 80059a4:	4a02      	ldr	r2, [pc, #8]	; (80059b0 <stdio_exit_handler+0xc>)
 80059a6:	4903      	ldr	r1, [pc, #12]	; (80059b4 <stdio_exit_handler+0x10>)
 80059a8:	4803      	ldr	r0, [pc, #12]	; (80059b8 <stdio_exit_handler+0x14>)
 80059aa:	f000 b87b 	b.w	8005aa4 <_fwalk_sglue>
 80059ae:	bf00      	nop
 80059b0:	20000024 	.word	0x20000024
 80059b4:	080058c1 	.word	0x080058c1
 80059b8:	20000030 	.word	0x20000030

080059bc <cleanup_stdio>:
 80059bc:	6841      	ldr	r1, [r0, #4]
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <cleanup_stdio+0x34>)
 80059c0:	4299      	cmp	r1, r3
 80059c2:	b510      	push	{r4, lr}
 80059c4:	4604      	mov	r4, r0
 80059c6:	d001      	beq.n	80059cc <cleanup_stdio+0x10>
 80059c8:	f7ff ff7a 	bl	80058c0 <_fflush_r>
 80059cc:	68a1      	ldr	r1, [r4, #8]
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <cleanup_stdio+0x38>)
 80059d0:	4299      	cmp	r1, r3
 80059d2:	d002      	beq.n	80059da <cleanup_stdio+0x1e>
 80059d4:	4620      	mov	r0, r4
 80059d6:	f7ff ff73 	bl	80058c0 <_fflush_r>
 80059da:	68e1      	ldr	r1, [r4, #12]
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <cleanup_stdio+0x3c>)
 80059de:	4299      	cmp	r1, r3
 80059e0:	d004      	beq.n	80059ec <cleanup_stdio+0x30>
 80059e2:	4620      	mov	r0, r4
 80059e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e8:	f7ff bf6a 	b.w	80058c0 <_fflush_r>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	bf00      	nop
 80059f0:	2000424c 	.word	0x2000424c
 80059f4:	200042b4 	.word	0x200042b4
 80059f8:	2000431c 	.word	0x2000431c

080059fc <global_stdio_init.part.0>:
 80059fc:	b510      	push	{r4, lr}
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <global_stdio_init.part.0+0x30>)
 8005a00:	4c0b      	ldr	r4, [pc, #44]	; (8005a30 <global_stdio_init.part.0+0x34>)
 8005a02:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <global_stdio_init.part.0+0x38>)
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	4620      	mov	r0, r4
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2104      	movs	r1, #4
 8005a0c:	f7ff ff94 	bl	8005938 <std>
 8005a10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a14:	2201      	movs	r2, #1
 8005a16:	2109      	movs	r1, #9
 8005a18:	f7ff ff8e 	bl	8005938 <std>
 8005a1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a20:	2202      	movs	r2, #2
 8005a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a26:	2112      	movs	r1, #18
 8005a28:	f7ff bf86 	b.w	8005938 <std>
 8005a2c:	20004384 	.word	0x20004384
 8005a30:	2000424c 	.word	0x2000424c
 8005a34:	080059a5 	.word	0x080059a5

08005a38 <__sfp_lock_acquire>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__sfp_lock_acquire+0x8>)
 8005a3a:	f000 b954 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	2000438d 	.word	0x2000438d

08005a44 <__sfp_lock_release>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__sfp_lock_release+0x8>)
 8005a46:	f000 b94f 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	2000438d 	.word	0x2000438d

08005a50 <__sinit>:
 8005a50:	b510      	push	{r4, lr}
 8005a52:	4604      	mov	r4, r0
 8005a54:	f7ff fff0 	bl	8005a38 <__sfp_lock_acquire>
 8005a58:	6a23      	ldr	r3, [r4, #32]
 8005a5a:	b11b      	cbz	r3, 8005a64 <__sinit+0x14>
 8005a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a60:	f7ff bff0 	b.w	8005a44 <__sfp_lock_release>
 8005a64:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <__sinit+0x28>)
 8005a66:	6223      	str	r3, [r4, #32]
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <__sinit+0x2c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f5      	bne.n	8005a5c <__sinit+0xc>
 8005a70:	f7ff ffc4 	bl	80059fc <global_stdio_init.part.0>
 8005a74:	e7f2      	b.n	8005a5c <__sinit+0xc>
 8005a76:	bf00      	nop
 8005a78:	080059bd 	.word	0x080059bd
 8005a7c:	20004384 	.word	0x20004384

08005a80 <fiprintf>:
 8005a80:	b40e      	push	{r1, r2, r3}
 8005a82:	b503      	push	{r0, r1, lr}
 8005a84:	4601      	mov	r1, r0
 8005a86:	ab03      	add	r3, sp, #12
 8005a88:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <fiprintf+0x20>)
 8005a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a8e:	6800      	ldr	r0, [r0, #0]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	f000 fbb9 	bl	8006208 <_vfiprintf_r>
 8005a96:	b002      	add	sp, #8
 8005a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a9c:	b003      	add	sp, #12
 8005a9e:	4770      	bx	lr
 8005aa0:	2000007c 	.word	0x2000007c

08005aa4 <_fwalk_sglue>:
 8005aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	4688      	mov	r8, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	2600      	movs	r6, #0
 8005ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ab8:	d505      	bpl.n	8005ac6 <_fwalk_sglue+0x22>
 8005aba:	6824      	ldr	r4, [r4, #0]
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	d1f7      	bne.n	8005ab0 <_fwalk_sglue+0xc>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d907      	bls.n	8005adc <_fwalk_sglue+0x38>
 8005acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	d003      	beq.n	8005adc <_fwalk_sglue+0x38>
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	4306      	orrs	r6, r0
 8005adc:	3568      	adds	r5, #104	; 0x68
 8005ade:	e7e9      	b.n	8005ab4 <_fwalk_sglue+0x10>

08005ae0 <iprintf>:
 8005ae0:	b40f      	push	{r0, r1, r2, r3}
 8005ae2:	b507      	push	{r0, r1, r2, lr}
 8005ae4:	4906      	ldr	r1, [pc, #24]	; (8005b00 <iprintf+0x20>)
 8005ae6:	ab04      	add	r3, sp, #16
 8005ae8:	6808      	ldr	r0, [r1, #0]
 8005aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aee:	6881      	ldr	r1, [r0, #8]
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	f000 fb89 	bl	8006208 <_vfiprintf_r>
 8005af6:	b003      	add	sp, #12
 8005af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005afc:	b004      	add	sp, #16
 8005afe:	4770      	bx	lr
 8005b00:	2000007c 	.word	0x2000007c

08005b04 <sniprintf>:
 8005b04:	b40c      	push	{r2, r3}
 8005b06:	b530      	push	{r4, r5, lr}
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <sniprintf+0x64>)
 8005b0a:	1e0c      	subs	r4, r1, #0
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	b09d      	sub	sp, #116	; 0x74
 8005b10:	da08      	bge.n	8005b24 <sniprintf+0x20>
 8005b12:	238b      	movs	r3, #139	; 0x8b
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1a:	b01d      	add	sp, #116	; 0x74
 8005b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b20:	b002      	add	sp, #8
 8005b22:	4770      	bx	lr
 8005b24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b2c:	bf14      	ite	ne
 8005b2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b32:	4623      	moveq	r3, r4
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b3c:	9002      	str	r0, [sp, #8]
 8005b3e:	9006      	str	r0, [sp, #24]
 8005b40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b46:	ab21      	add	r3, sp, #132	; 0x84
 8005b48:	a902      	add	r1, sp, #8
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	f000 fa33 	bl	8005fb8 <_svfiprintf_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	bfbc      	itt	lt
 8005b56:	238b      	movlt	r3, #139	; 0x8b
 8005b58:	602b      	strlt	r3, [r5, #0]
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d0dd      	beq.n	8005b1a <sniprintf+0x16>
 8005b5e:	9b02      	ldr	r3, [sp, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	e7d9      	b.n	8005b1a <sniprintf+0x16>
 8005b66:	bf00      	nop
 8005b68:	2000007c 	.word	0x2000007c

08005b6c <__sread>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	f000 f868 	bl	8005c48 <_read_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	bfab      	itete	ge
 8005b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b80:	181b      	addge	r3, r3, r0
 8005b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b86:	bfac      	ite	ge
 8005b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b8a:	81a3      	strhlt	r3, [r4, #12]
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <__swrite>:
 8005b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	461f      	mov	r7, r3
 8005b94:	898b      	ldrh	r3, [r1, #12]
 8005b96:	05db      	lsls	r3, r3, #23
 8005b98:	4605      	mov	r5, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	d505      	bpl.n	8005bac <__swrite+0x1e>
 8005ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f000 f83c 	bl	8005c24 <_lseek_r>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	f000 b853 	b.w	8005c6c <_write_r>

08005bc6 <__sseek>:
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bce:	f000 f829 	bl	8005c24 <_lseek_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	bf15      	itete	ne
 8005bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005be2:	81a3      	strheq	r3, [r4, #12]
 8005be4:	bf18      	it	ne
 8005be6:	81a3      	strhne	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__sclose>:
 8005bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bee:	f000 b809 	b.w	8005c04 <_close_r>

08005bf2 <memset>:
 8005bf2:	4402      	add	r2, r0
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d100      	bne.n	8005bfc <memset+0xa>
 8005bfa:	4770      	bx	lr
 8005bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8005c00:	e7f9      	b.n	8005bf6 <memset+0x4>
	...

08005c04 <_close_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d06      	ldr	r5, [pc, #24]	; (8005c20 <_close_r+0x1c>)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	f7ff fbe6 	bl	80053e0 <_close>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_close_r+0x1a>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_close_r+0x1a>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	20004388 	.word	0x20004388

08005c24 <_lseek_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d07      	ldr	r5, [pc, #28]	; (8005c44 <_lseek_r+0x20>)
 8005c28:	4604      	mov	r4, r0
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	2200      	movs	r2, #0
 8005c30:	602a      	str	r2, [r5, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f7ff fb91 	bl	800535a <_lseek>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_lseek_r+0x1e>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_lseek_r+0x1e>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20004388 	.word	0x20004388

08005c48 <_read_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	; (8005c68 <_read_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7ff fb27 	bl	80052aa <_read>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_read_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_read_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20004388 	.word	0x20004388

08005c6c <_write_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	; (8005c8c <_write_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7ff fb7f 	bl	800537e <_write>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_write_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_write_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	20004388 	.word	0x20004388

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	2000007c 	.word	0x2000007c

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	; (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 ff1e 	bl	8006af0 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08006f64 	.word	0x08006f64
 8005cd8:	08006f64 	.word	0x08006f64
 8005cdc:	08006f64 	.word	0x08006f64
 8005ce0:	08006f68 	.word	0x08006f68

08005ce4 <__retarget_lock_init_recursive>:
 8005ce4:	4770      	bx	lr

08005ce6 <__retarget_lock_acquire_recursive>:
 8005ce6:	4770      	bx	lr

08005ce8 <__retarget_lock_release_recursive>:
 8005ce8:	4770      	bx	lr

08005cea <memcpy>:
 8005cea:	440a      	add	r2, r1
 8005cec:	4291      	cmp	r1, r2
 8005cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cf2:	d100      	bne.n	8005cf6 <memcpy+0xc>
 8005cf4:	4770      	bx	lr
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d00:	4291      	cmp	r1, r2
 8005d02:	d1f9      	bne.n	8005cf8 <memcpy+0xe>
 8005d04:	bd10      	pop	{r4, pc}

08005d06 <abort>:
 8005d06:	b508      	push	{r3, lr}
 8005d08:	2006      	movs	r0, #6
 8005d0a:	f000 fdff 	bl	800690c <raise>
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f000 feec 	bl	8006aec <_exit>

08005d14 <_free_r>:
 8005d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d16:	2900      	cmp	r1, #0
 8005d18:	d044      	beq.n	8005da4 <_free_r+0x90>
 8005d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d1e:	9001      	str	r0, [sp, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f1a1 0404 	sub.w	r4, r1, #4
 8005d26:	bfb8      	it	lt
 8005d28:	18e4      	addlt	r4, r4, r3
 8005d2a:	f000 f8df 	bl	8005eec <__malloc_lock>
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <_free_r+0x94>)
 8005d30:	9801      	ldr	r0, [sp, #4]
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	b933      	cbnz	r3, 8005d44 <_free_r+0x30>
 8005d36:	6063      	str	r3, [r4, #4]
 8005d38:	6014      	str	r4, [r2, #0]
 8005d3a:	b003      	add	sp, #12
 8005d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d40:	f000 b8da 	b.w	8005ef8 <__malloc_unlock>
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d908      	bls.n	8005d5a <_free_r+0x46>
 8005d48:	6825      	ldr	r5, [r4, #0]
 8005d4a:	1961      	adds	r1, r4, r5
 8005d4c:	428b      	cmp	r3, r1
 8005d4e:	bf01      	itttt	eq
 8005d50:	6819      	ldreq	r1, [r3, #0]
 8005d52:	685b      	ldreq	r3, [r3, #4]
 8005d54:	1949      	addeq	r1, r1, r5
 8005d56:	6021      	streq	r1, [r4, #0]
 8005d58:	e7ed      	b.n	8005d36 <_free_r+0x22>
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	b10b      	cbz	r3, 8005d64 <_free_r+0x50>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d9fa      	bls.n	8005d5a <_free_r+0x46>
 8005d64:	6811      	ldr	r1, [r2, #0]
 8005d66:	1855      	adds	r5, r2, r1
 8005d68:	42a5      	cmp	r5, r4
 8005d6a:	d10b      	bne.n	8005d84 <_free_r+0x70>
 8005d6c:	6824      	ldr	r4, [r4, #0]
 8005d6e:	4421      	add	r1, r4
 8005d70:	1854      	adds	r4, r2, r1
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	d1e0      	bne.n	8005d3a <_free_r+0x26>
 8005d78:	681c      	ldr	r4, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	6053      	str	r3, [r2, #4]
 8005d7e:	440c      	add	r4, r1
 8005d80:	6014      	str	r4, [r2, #0]
 8005d82:	e7da      	b.n	8005d3a <_free_r+0x26>
 8005d84:	d902      	bls.n	8005d8c <_free_r+0x78>
 8005d86:	230c      	movs	r3, #12
 8005d88:	6003      	str	r3, [r0, #0]
 8005d8a:	e7d6      	b.n	8005d3a <_free_r+0x26>
 8005d8c:	6825      	ldr	r5, [r4, #0]
 8005d8e:	1961      	adds	r1, r4, r5
 8005d90:	428b      	cmp	r3, r1
 8005d92:	bf04      	itt	eq
 8005d94:	6819      	ldreq	r1, [r3, #0]
 8005d96:	685b      	ldreq	r3, [r3, #4]
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	bf04      	itt	eq
 8005d9c:	1949      	addeq	r1, r1, r5
 8005d9e:	6021      	streq	r1, [r4, #0]
 8005da0:	6054      	str	r4, [r2, #4]
 8005da2:	e7ca      	b.n	8005d3a <_free_r+0x26>
 8005da4:	b003      	add	sp, #12
 8005da6:	bd30      	pop	{r4, r5, pc}
 8005da8:	20004390 	.word	0x20004390

08005dac <sbrk_aligned>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	4e0e      	ldr	r6, [pc, #56]	; (8005de8 <sbrk_aligned+0x3c>)
 8005db0:	460c      	mov	r4, r1
 8005db2:	6831      	ldr	r1, [r6, #0]
 8005db4:	4605      	mov	r5, r0
 8005db6:	b911      	cbnz	r1, 8005dbe <sbrk_aligned+0x12>
 8005db8:	f000 fdc4 	bl	8006944 <_sbrk_r>
 8005dbc:	6030      	str	r0, [r6, #0]
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 fdbf 	bl	8006944 <_sbrk_r>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	d00a      	beq.n	8005de0 <sbrk_aligned+0x34>
 8005dca:	1cc4      	adds	r4, r0, #3
 8005dcc:	f024 0403 	bic.w	r4, r4, #3
 8005dd0:	42a0      	cmp	r0, r4
 8005dd2:	d007      	beq.n	8005de4 <sbrk_aligned+0x38>
 8005dd4:	1a21      	subs	r1, r4, r0
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fdb4 	bl	8006944 <_sbrk_r>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d101      	bne.n	8005de4 <sbrk_aligned+0x38>
 8005de0:	f04f 34ff 	mov.w	r4, #4294967295
 8005de4:	4620      	mov	r0, r4
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	20004394 	.word	0x20004394

08005dec <_malloc_r>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	1ccd      	adds	r5, r1, #3
 8005df2:	f025 0503 	bic.w	r5, r5, #3
 8005df6:	3508      	adds	r5, #8
 8005df8:	2d0c      	cmp	r5, #12
 8005dfa:	bf38      	it	cc
 8005dfc:	250c      	movcc	r5, #12
 8005dfe:	2d00      	cmp	r5, #0
 8005e00:	4607      	mov	r7, r0
 8005e02:	db01      	blt.n	8005e08 <_malloc_r+0x1c>
 8005e04:	42a9      	cmp	r1, r5
 8005e06:	d905      	bls.n	8005e14 <_malloc_r+0x28>
 8005e08:	230c      	movs	r3, #12
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	4630      	mov	r0, r6
 8005e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ee8 <_malloc_r+0xfc>
 8005e18:	f000 f868 	bl	8005eec <__malloc_lock>
 8005e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e20:	461c      	mov	r4, r3
 8005e22:	bb5c      	cbnz	r4, 8005e7c <_malloc_r+0x90>
 8005e24:	4629      	mov	r1, r5
 8005e26:	4638      	mov	r0, r7
 8005e28:	f7ff ffc0 	bl	8005dac <sbrk_aligned>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	4604      	mov	r4, r0
 8005e30:	d155      	bne.n	8005ede <_malloc_r+0xf2>
 8005e32:	f8d8 4000 	ldr.w	r4, [r8]
 8005e36:	4626      	mov	r6, r4
 8005e38:	2e00      	cmp	r6, #0
 8005e3a:	d145      	bne.n	8005ec8 <_malloc_r+0xdc>
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	d048      	beq.n	8005ed2 <_malloc_r+0xe6>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	4631      	mov	r1, r6
 8005e44:	4638      	mov	r0, r7
 8005e46:	eb04 0903 	add.w	r9, r4, r3
 8005e4a:	f000 fd7b 	bl	8006944 <_sbrk_r>
 8005e4e:	4581      	cmp	r9, r0
 8005e50:	d13f      	bne.n	8005ed2 <_malloc_r+0xe6>
 8005e52:	6821      	ldr	r1, [r4, #0]
 8005e54:	1a6d      	subs	r5, r5, r1
 8005e56:	4629      	mov	r1, r5
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff ffa7 	bl	8005dac <sbrk_aligned>
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d037      	beq.n	8005ed2 <_malloc_r+0xe6>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	442b      	add	r3, r5
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	f8d8 3000 	ldr.w	r3, [r8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d038      	beq.n	8005ee2 <_malloc_r+0xf6>
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	42a2      	cmp	r2, r4
 8005e74:	d12b      	bne.n	8005ece <_malloc_r+0xe2>
 8005e76:	2200      	movs	r2, #0
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	e00f      	b.n	8005e9c <_malloc_r+0xb0>
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	1b52      	subs	r2, r2, r5
 8005e80:	d41f      	bmi.n	8005ec2 <_malloc_r+0xd6>
 8005e82:	2a0b      	cmp	r2, #11
 8005e84:	d917      	bls.n	8005eb6 <_malloc_r+0xca>
 8005e86:	1961      	adds	r1, r4, r5
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	6025      	str	r5, [r4, #0]
 8005e8c:	bf18      	it	ne
 8005e8e:	6059      	strne	r1, [r3, #4]
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	bf08      	it	eq
 8005e94:	f8c8 1000 	streq.w	r1, [r8]
 8005e98:	5162      	str	r2, [r4, r5]
 8005e9a:	604b      	str	r3, [r1, #4]
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f104 060b 	add.w	r6, r4, #11
 8005ea2:	f000 f829 	bl	8005ef8 <__malloc_unlock>
 8005ea6:	f026 0607 	bic.w	r6, r6, #7
 8005eaa:	1d23      	adds	r3, r4, #4
 8005eac:	1af2      	subs	r2, r6, r3
 8005eae:	d0ae      	beq.n	8005e0e <_malloc_r+0x22>
 8005eb0:	1b9b      	subs	r3, r3, r6
 8005eb2:	50a3      	str	r3, [r4, r2]
 8005eb4:	e7ab      	b.n	8005e0e <_malloc_r+0x22>
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	6862      	ldr	r2, [r4, #4]
 8005eba:	d1dd      	bne.n	8005e78 <_malloc_r+0x8c>
 8005ebc:	f8c8 2000 	str.w	r2, [r8]
 8005ec0:	e7ec      	b.n	8005e9c <_malloc_r+0xb0>
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	6864      	ldr	r4, [r4, #4]
 8005ec6:	e7ac      	b.n	8005e22 <_malloc_r+0x36>
 8005ec8:	4634      	mov	r4, r6
 8005eca:	6876      	ldr	r6, [r6, #4]
 8005ecc:	e7b4      	b.n	8005e38 <_malloc_r+0x4c>
 8005ece:	4613      	mov	r3, r2
 8005ed0:	e7cc      	b.n	8005e6c <_malloc_r+0x80>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f000 f80e 	bl	8005ef8 <__malloc_unlock>
 8005edc:	e797      	b.n	8005e0e <_malloc_r+0x22>
 8005ede:	6025      	str	r5, [r4, #0]
 8005ee0:	e7dc      	b.n	8005e9c <_malloc_r+0xb0>
 8005ee2:	605b      	str	r3, [r3, #4]
 8005ee4:	deff      	udf	#255	; 0xff
 8005ee6:	bf00      	nop
 8005ee8:	20004390 	.word	0x20004390

08005eec <__malloc_lock>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__malloc_lock+0x8>)
 8005eee:	f7ff befa 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	2000438c 	.word	0x2000438c

08005ef8 <__malloc_unlock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__malloc_unlock+0x8>)
 8005efa:	f7ff bef5 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8005efe:	bf00      	nop
 8005f00:	2000438c 	.word	0x2000438c

08005f04 <__ssputs_r>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	688e      	ldr	r6, [r1, #8]
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	42be      	cmp	r6, r7
 8005f0e:	680b      	ldr	r3, [r1, #0]
 8005f10:	4682      	mov	sl, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	4690      	mov	r8, r2
 8005f16:	d82c      	bhi.n	8005f72 <__ssputs_r+0x6e>
 8005f18:	898a      	ldrh	r2, [r1, #12]
 8005f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f1e:	d026      	beq.n	8005f6e <__ssputs_r+0x6a>
 8005f20:	6965      	ldr	r5, [r4, #20]
 8005f22:	6909      	ldr	r1, [r1, #16]
 8005f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f28:	eba3 0901 	sub.w	r9, r3, r1
 8005f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f30:	1c7b      	adds	r3, r7, #1
 8005f32:	444b      	add	r3, r9
 8005f34:	106d      	asrs	r5, r5, #1
 8005f36:	429d      	cmp	r5, r3
 8005f38:	bf38      	it	cc
 8005f3a:	461d      	movcc	r5, r3
 8005f3c:	0553      	lsls	r3, r2, #21
 8005f3e:	d527      	bpl.n	8005f90 <__ssputs_r+0x8c>
 8005f40:	4629      	mov	r1, r5
 8005f42:	f7ff ff53 	bl	8005dec <_malloc_r>
 8005f46:	4606      	mov	r6, r0
 8005f48:	b360      	cbz	r0, 8005fa4 <__ssputs_r+0xa0>
 8005f4a:	6921      	ldr	r1, [r4, #16]
 8005f4c:	464a      	mov	r2, r9
 8005f4e:	f7ff fecc 	bl	8005cea <memcpy>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	6126      	str	r6, [r4, #16]
 8005f60:	6165      	str	r5, [r4, #20]
 8005f62:	444e      	add	r6, r9
 8005f64:	eba5 0509 	sub.w	r5, r5, r9
 8005f68:	6026      	str	r6, [r4, #0]
 8005f6a:	60a5      	str	r5, [r4, #8]
 8005f6c:	463e      	mov	r6, r7
 8005f6e:	42be      	cmp	r6, r7
 8005f70:	d900      	bls.n	8005f74 <__ssputs_r+0x70>
 8005f72:	463e      	mov	r6, r7
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	4632      	mov	r2, r6
 8005f78:	4641      	mov	r1, r8
 8005f7a:	f000 fc85 	bl	8006888 <memmove>
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	1b9b      	subs	r3, r3, r6
 8005f82:	60a3      	str	r3, [r4, #8]
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	4433      	add	r3, r6
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f90:	462a      	mov	r2, r5
 8005f92:	f000 fce7 	bl	8006964 <_realloc_r>
 8005f96:	4606      	mov	r6, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1e0      	bne.n	8005f5e <__ssputs_r+0x5a>
 8005f9c:	6921      	ldr	r1, [r4, #16]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	f7ff feb8 	bl	8005d14 <_free_r>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	f8ca 3000 	str.w	r3, [sl]
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	e7e9      	b.n	8005f8c <__ssputs_r+0x88>

08005fb8 <_svfiprintf_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	4698      	mov	r8, r3
 8005fbe:	898b      	ldrh	r3, [r1, #12]
 8005fc0:	061b      	lsls	r3, r3, #24
 8005fc2:	b09d      	sub	sp, #116	; 0x74
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	d50e      	bpl.n	8005fea <_svfiprintf_r+0x32>
 8005fcc:	690b      	ldr	r3, [r1, #16]
 8005fce:	b963      	cbnz	r3, 8005fea <_svfiprintf_r+0x32>
 8005fd0:	2140      	movs	r1, #64	; 0x40
 8005fd2:	f7ff ff0b 	bl	8005dec <_malloc_r>
 8005fd6:	6028      	str	r0, [r5, #0]
 8005fd8:	6128      	str	r0, [r5, #16]
 8005fda:	b920      	cbnz	r0, 8005fe6 <_svfiprintf_r+0x2e>
 8005fdc:	230c      	movs	r3, #12
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	e0d0      	b.n	8006188 <_svfiprintf_r+0x1d0>
 8005fe6:	2340      	movs	r3, #64	; 0x40
 8005fe8:	616b      	str	r3, [r5, #20]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9309      	str	r3, [sp, #36]	; 0x24
 8005fee:	2320      	movs	r3, #32
 8005ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff8:	2330      	movs	r3, #48	; 0x30
 8005ffa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80061a0 <_svfiprintf_r+0x1e8>
 8005ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006002:	f04f 0901 	mov.w	r9, #1
 8006006:	4623      	mov	r3, r4
 8006008:	469a      	mov	sl, r3
 800600a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800600e:	b10a      	cbz	r2, 8006014 <_svfiprintf_r+0x5c>
 8006010:	2a25      	cmp	r2, #37	; 0x25
 8006012:	d1f9      	bne.n	8006008 <_svfiprintf_r+0x50>
 8006014:	ebba 0b04 	subs.w	fp, sl, r4
 8006018:	d00b      	beq.n	8006032 <_svfiprintf_r+0x7a>
 800601a:	465b      	mov	r3, fp
 800601c:	4622      	mov	r2, r4
 800601e:	4629      	mov	r1, r5
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff ff6f 	bl	8005f04 <__ssputs_r>
 8006026:	3001      	adds	r0, #1
 8006028:	f000 80a9 	beq.w	800617e <_svfiprintf_r+0x1c6>
 800602c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602e:	445a      	add	r2, fp
 8006030:	9209      	str	r2, [sp, #36]	; 0x24
 8006032:	f89a 3000 	ldrb.w	r3, [sl]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80a1 	beq.w	800617e <_svfiprintf_r+0x1c6>
 800603c:	2300      	movs	r3, #0
 800603e:	f04f 32ff 	mov.w	r2, #4294967295
 8006042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006046:	f10a 0a01 	add.w	sl, sl, #1
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	9307      	str	r3, [sp, #28]
 800604e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006052:	931a      	str	r3, [sp, #104]	; 0x68
 8006054:	4654      	mov	r4, sl
 8006056:	2205      	movs	r2, #5
 8006058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605c:	4850      	ldr	r0, [pc, #320]	; (80061a0 <_svfiprintf_r+0x1e8>)
 800605e:	f7fa f8c7 	bl	80001f0 <memchr>
 8006062:	9a04      	ldr	r2, [sp, #16]
 8006064:	b9d8      	cbnz	r0, 800609e <_svfiprintf_r+0xe6>
 8006066:	06d0      	lsls	r0, r2, #27
 8006068:	bf44      	itt	mi
 800606a:	2320      	movmi	r3, #32
 800606c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006070:	0711      	lsls	r1, r2, #28
 8006072:	bf44      	itt	mi
 8006074:	232b      	movmi	r3, #43	; 0x2b
 8006076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607a:	f89a 3000 	ldrb.w	r3, [sl]
 800607e:	2b2a      	cmp	r3, #42	; 0x2a
 8006080:	d015      	beq.n	80060ae <_svfiprintf_r+0xf6>
 8006082:	9a07      	ldr	r2, [sp, #28]
 8006084:	4654      	mov	r4, sl
 8006086:	2000      	movs	r0, #0
 8006088:	f04f 0c0a 	mov.w	ip, #10
 800608c:	4621      	mov	r1, r4
 800608e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006092:	3b30      	subs	r3, #48	; 0x30
 8006094:	2b09      	cmp	r3, #9
 8006096:	d94d      	bls.n	8006134 <_svfiprintf_r+0x17c>
 8006098:	b1b0      	cbz	r0, 80060c8 <_svfiprintf_r+0x110>
 800609a:	9207      	str	r2, [sp, #28]
 800609c:	e014      	b.n	80060c8 <_svfiprintf_r+0x110>
 800609e:	eba0 0308 	sub.w	r3, r0, r8
 80060a2:	fa09 f303 	lsl.w	r3, r9, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	46a2      	mov	sl, r4
 80060ac:	e7d2      	b.n	8006054 <_svfiprintf_r+0x9c>
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	1d19      	adds	r1, r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	9103      	str	r1, [sp, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bfbb      	ittet	lt
 80060ba:	425b      	neglt	r3, r3
 80060bc:	f042 0202 	orrlt.w	r2, r2, #2
 80060c0:	9307      	strge	r3, [sp, #28]
 80060c2:	9307      	strlt	r3, [sp, #28]
 80060c4:	bfb8      	it	lt
 80060c6:	9204      	strlt	r2, [sp, #16]
 80060c8:	7823      	ldrb	r3, [r4, #0]
 80060ca:	2b2e      	cmp	r3, #46	; 0x2e
 80060cc:	d10c      	bne.n	80060e8 <_svfiprintf_r+0x130>
 80060ce:	7863      	ldrb	r3, [r4, #1]
 80060d0:	2b2a      	cmp	r3, #42	; 0x2a
 80060d2:	d134      	bne.n	800613e <_svfiprintf_r+0x186>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	1d1a      	adds	r2, r3, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	9203      	str	r2, [sp, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bfb8      	it	lt
 80060e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060e4:	3402      	adds	r4, #2
 80060e6:	9305      	str	r3, [sp, #20]
 80060e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80061b0 <_svfiprintf_r+0x1f8>
 80060ec:	7821      	ldrb	r1, [r4, #0]
 80060ee:	2203      	movs	r2, #3
 80060f0:	4650      	mov	r0, sl
 80060f2:	f7fa f87d 	bl	80001f0 <memchr>
 80060f6:	b138      	cbz	r0, 8006108 <_svfiprintf_r+0x150>
 80060f8:	9b04      	ldr	r3, [sp, #16]
 80060fa:	eba0 000a 	sub.w	r0, r0, sl
 80060fe:	2240      	movs	r2, #64	; 0x40
 8006100:	4082      	lsls	r2, r0
 8006102:	4313      	orrs	r3, r2
 8006104:	3401      	adds	r4, #1
 8006106:	9304      	str	r3, [sp, #16]
 8006108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610c:	4825      	ldr	r0, [pc, #148]	; (80061a4 <_svfiprintf_r+0x1ec>)
 800610e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006112:	2206      	movs	r2, #6
 8006114:	f7fa f86c 	bl	80001f0 <memchr>
 8006118:	2800      	cmp	r0, #0
 800611a:	d038      	beq.n	800618e <_svfiprintf_r+0x1d6>
 800611c:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <_svfiprintf_r+0x1f0>)
 800611e:	bb1b      	cbnz	r3, 8006168 <_svfiprintf_r+0x1b0>
 8006120:	9b03      	ldr	r3, [sp, #12]
 8006122:	3307      	adds	r3, #7
 8006124:	f023 0307 	bic.w	r3, r3, #7
 8006128:	3308      	adds	r3, #8
 800612a:	9303      	str	r3, [sp, #12]
 800612c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612e:	4433      	add	r3, r6
 8006130:	9309      	str	r3, [sp, #36]	; 0x24
 8006132:	e768      	b.n	8006006 <_svfiprintf_r+0x4e>
 8006134:	fb0c 3202 	mla	r2, ip, r2, r3
 8006138:	460c      	mov	r4, r1
 800613a:	2001      	movs	r0, #1
 800613c:	e7a6      	b.n	800608c <_svfiprintf_r+0xd4>
 800613e:	2300      	movs	r3, #0
 8006140:	3401      	adds	r4, #1
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	4619      	mov	r1, r3
 8006146:	f04f 0c0a 	mov.w	ip, #10
 800614a:	4620      	mov	r0, r4
 800614c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006150:	3a30      	subs	r2, #48	; 0x30
 8006152:	2a09      	cmp	r2, #9
 8006154:	d903      	bls.n	800615e <_svfiprintf_r+0x1a6>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0c6      	beq.n	80060e8 <_svfiprintf_r+0x130>
 800615a:	9105      	str	r1, [sp, #20]
 800615c:	e7c4      	b.n	80060e8 <_svfiprintf_r+0x130>
 800615e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006162:	4604      	mov	r4, r0
 8006164:	2301      	movs	r3, #1
 8006166:	e7f0      	b.n	800614a <_svfiprintf_r+0x192>
 8006168:	ab03      	add	r3, sp, #12
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	462a      	mov	r2, r5
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <_svfiprintf_r+0x1f4>)
 8006170:	a904      	add	r1, sp, #16
 8006172:	4638      	mov	r0, r7
 8006174:	f3af 8000 	nop.w
 8006178:	1c42      	adds	r2, r0, #1
 800617a:	4606      	mov	r6, r0
 800617c:	d1d6      	bne.n	800612c <_svfiprintf_r+0x174>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	065b      	lsls	r3, r3, #25
 8006182:	f53f af2d 	bmi.w	8005fe0 <_svfiprintf_r+0x28>
 8006186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006188:	b01d      	add	sp, #116	; 0x74
 800618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618e:	ab03      	add	r3, sp, #12
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	462a      	mov	r2, r5
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <_svfiprintf_r+0x1f4>)
 8006196:	a904      	add	r1, sp, #16
 8006198:	4638      	mov	r0, r7
 800619a:	f000 f9bd 	bl	8006518 <_printf_i>
 800619e:	e7eb      	b.n	8006178 <_svfiprintf_r+0x1c0>
 80061a0:	08006f28 	.word	0x08006f28
 80061a4:	08006f32 	.word	0x08006f32
 80061a8:	00000000 	.word	0x00000000
 80061ac:	08005f05 	.word	0x08005f05
 80061b0:	08006f2e 	.word	0x08006f2e

080061b4 <__sfputc_r>:
 80061b4:	6893      	ldr	r3, [r2, #8]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	b410      	push	{r4}
 80061bc:	6093      	str	r3, [r2, #8]
 80061be:	da08      	bge.n	80061d2 <__sfputc_r+0x1e>
 80061c0:	6994      	ldr	r4, [r2, #24]
 80061c2:	42a3      	cmp	r3, r4
 80061c4:	db01      	blt.n	80061ca <__sfputc_r+0x16>
 80061c6:	290a      	cmp	r1, #10
 80061c8:	d103      	bne.n	80061d2 <__sfputc_r+0x1e>
 80061ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ce:	f000 bac5 	b.w	800675c <__swbuf_r>
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	1c58      	adds	r0, r3, #1
 80061d6:	6010      	str	r0, [r2, #0]
 80061d8:	7019      	strb	r1, [r3, #0]
 80061da:	4608      	mov	r0, r1
 80061dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <__sfputs_r>:
 80061e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e4:	4606      	mov	r6, r0
 80061e6:	460f      	mov	r7, r1
 80061e8:	4614      	mov	r4, r2
 80061ea:	18d5      	adds	r5, r2, r3
 80061ec:	42ac      	cmp	r4, r5
 80061ee:	d101      	bne.n	80061f4 <__sfputs_r+0x12>
 80061f0:	2000      	movs	r0, #0
 80061f2:	e007      	b.n	8006204 <__sfputs_r+0x22>
 80061f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f8:	463a      	mov	r2, r7
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7ff ffda 	bl	80061b4 <__sfputc_r>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d1f3      	bne.n	80061ec <__sfputs_r+0xa>
 8006204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006208 <_vfiprintf_r>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	460d      	mov	r5, r1
 800620e:	b09d      	sub	sp, #116	; 0x74
 8006210:	4614      	mov	r4, r2
 8006212:	4698      	mov	r8, r3
 8006214:	4606      	mov	r6, r0
 8006216:	b118      	cbz	r0, 8006220 <_vfiprintf_r+0x18>
 8006218:	6a03      	ldr	r3, [r0, #32]
 800621a:	b90b      	cbnz	r3, 8006220 <_vfiprintf_r+0x18>
 800621c:	f7ff fc18 	bl	8005a50 <__sinit>
 8006220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006222:	07d9      	lsls	r1, r3, #31
 8006224:	d405      	bmi.n	8006232 <_vfiprintf_r+0x2a>
 8006226:	89ab      	ldrh	r3, [r5, #12]
 8006228:	059a      	lsls	r2, r3, #22
 800622a:	d402      	bmi.n	8006232 <_vfiprintf_r+0x2a>
 800622c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800622e:	f7ff fd5a 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 8006232:	89ab      	ldrh	r3, [r5, #12]
 8006234:	071b      	lsls	r3, r3, #28
 8006236:	d501      	bpl.n	800623c <_vfiprintf_r+0x34>
 8006238:	692b      	ldr	r3, [r5, #16]
 800623a:	b99b      	cbnz	r3, 8006264 <_vfiprintf_r+0x5c>
 800623c:	4629      	mov	r1, r5
 800623e:	4630      	mov	r0, r6
 8006240:	f000 faca 	bl	80067d8 <__swsetup_r>
 8006244:	b170      	cbz	r0, 8006264 <_vfiprintf_r+0x5c>
 8006246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006248:	07dc      	lsls	r4, r3, #31
 800624a:	d504      	bpl.n	8006256 <_vfiprintf_r+0x4e>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	b01d      	add	sp, #116	; 0x74
 8006252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	0598      	lsls	r0, r3, #22
 800625a:	d4f7      	bmi.n	800624c <_vfiprintf_r+0x44>
 800625c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800625e:	f7ff fd43 	bl	8005ce8 <__retarget_lock_release_recursive>
 8006262:	e7f3      	b.n	800624c <_vfiprintf_r+0x44>
 8006264:	2300      	movs	r3, #0
 8006266:	9309      	str	r3, [sp, #36]	; 0x24
 8006268:	2320      	movs	r3, #32
 800626a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800626e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006272:	2330      	movs	r3, #48	; 0x30
 8006274:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006428 <_vfiprintf_r+0x220>
 8006278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800627c:	f04f 0901 	mov.w	r9, #1
 8006280:	4623      	mov	r3, r4
 8006282:	469a      	mov	sl, r3
 8006284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006288:	b10a      	cbz	r2, 800628e <_vfiprintf_r+0x86>
 800628a:	2a25      	cmp	r2, #37	; 0x25
 800628c:	d1f9      	bne.n	8006282 <_vfiprintf_r+0x7a>
 800628e:	ebba 0b04 	subs.w	fp, sl, r4
 8006292:	d00b      	beq.n	80062ac <_vfiprintf_r+0xa4>
 8006294:	465b      	mov	r3, fp
 8006296:	4622      	mov	r2, r4
 8006298:	4629      	mov	r1, r5
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ffa1 	bl	80061e2 <__sfputs_r>
 80062a0:	3001      	adds	r0, #1
 80062a2:	f000 80a9 	beq.w	80063f8 <_vfiprintf_r+0x1f0>
 80062a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a8:	445a      	add	r2, fp
 80062aa:	9209      	str	r2, [sp, #36]	; 0x24
 80062ac:	f89a 3000 	ldrb.w	r3, [sl]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80a1 	beq.w	80063f8 <_vfiprintf_r+0x1f0>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c0:	f10a 0a01 	add.w	sl, sl, #1
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	9307      	str	r3, [sp, #28]
 80062c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062cc:	931a      	str	r3, [sp, #104]	; 0x68
 80062ce:	4654      	mov	r4, sl
 80062d0:	2205      	movs	r2, #5
 80062d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d6:	4854      	ldr	r0, [pc, #336]	; (8006428 <_vfiprintf_r+0x220>)
 80062d8:	f7f9 ff8a 	bl	80001f0 <memchr>
 80062dc:	9a04      	ldr	r2, [sp, #16]
 80062de:	b9d8      	cbnz	r0, 8006318 <_vfiprintf_r+0x110>
 80062e0:	06d1      	lsls	r1, r2, #27
 80062e2:	bf44      	itt	mi
 80062e4:	2320      	movmi	r3, #32
 80062e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ea:	0713      	lsls	r3, r2, #28
 80062ec:	bf44      	itt	mi
 80062ee:	232b      	movmi	r3, #43	; 0x2b
 80062f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f4:	f89a 3000 	ldrb.w	r3, [sl]
 80062f8:	2b2a      	cmp	r3, #42	; 0x2a
 80062fa:	d015      	beq.n	8006328 <_vfiprintf_r+0x120>
 80062fc:	9a07      	ldr	r2, [sp, #28]
 80062fe:	4654      	mov	r4, sl
 8006300:	2000      	movs	r0, #0
 8006302:	f04f 0c0a 	mov.w	ip, #10
 8006306:	4621      	mov	r1, r4
 8006308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630c:	3b30      	subs	r3, #48	; 0x30
 800630e:	2b09      	cmp	r3, #9
 8006310:	d94d      	bls.n	80063ae <_vfiprintf_r+0x1a6>
 8006312:	b1b0      	cbz	r0, 8006342 <_vfiprintf_r+0x13a>
 8006314:	9207      	str	r2, [sp, #28]
 8006316:	e014      	b.n	8006342 <_vfiprintf_r+0x13a>
 8006318:	eba0 0308 	sub.w	r3, r0, r8
 800631c:	fa09 f303 	lsl.w	r3, r9, r3
 8006320:	4313      	orrs	r3, r2
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	46a2      	mov	sl, r4
 8006326:	e7d2      	b.n	80062ce <_vfiprintf_r+0xc6>
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	1d19      	adds	r1, r3, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	9103      	str	r1, [sp, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	bfbb      	ittet	lt
 8006334:	425b      	neglt	r3, r3
 8006336:	f042 0202 	orrlt.w	r2, r2, #2
 800633a:	9307      	strge	r3, [sp, #28]
 800633c:	9307      	strlt	r3, [sp, #28]
 800633e:	bfb8      	it	lt
 8006340:	9204      	strlt	r2, [sp, #16]
 8006342:	7823      	ldrb	r3, [r4, #0]
 8006344:	2b2e      	cmp	r3, #46	; 0x2e
 8006346:	d10c      	bne.n	8006362 <_vfiprintf_r+0x15a>
 8006348:	7863      	ldrb	r3, [r4, #1]
 800634a:	2b2a      	cmp	r3, #42	; 0x2a
 800634c:	d134      	bne.n	80063b8 <_vfiprintf_r+0x1b0>
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	9203      	str	r2, [sp, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfb8      	it	lt
 800635a:	f04f 33ff 	movlt.w	r3, #4294967295
 800635e:	3402      	adds	r4, #2
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006438 <_vfiprintf_r+0x230>
 8006366:	7821      	ldrb	r1, [r4, #0]
 8006368:	2203      	movs	r2, #3
 800636a:	4650      	mov	r0, sl
 800636c:	f7f9 ff40 	bl	80001f0 <memchr>
 8006370:	b138      	cbz	r0, 8006382 <_vfiprintf_r+0x17a>
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	eba0 000a 	sub.w	r0, r0, sl
 8006378:	2240      	movs	r2, #64	; 0x40
 800637a:	4082      	lsls	r2, r0
 800637c:	4313      	orrs	r3, r2
 800637e:	3401      	adds	r4, #1
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006386:	4829      	ldr	r0, [pc, #164]	; (800642c <_vfiprintf_r+0x224>)
 8006388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800638c:	2206      	movs	r2, #6
 800638e:	f7f9 ff2f 	bl	80001f0 <memchr>
 8006392:	2800      	cmp	r0, #0
 8006394:	d03f      	beq.n	8006416 <_vfiprintf_r+0x20e>
 8006396:	4b26      	ldr	r3, [pc, #152]	; (8006430 <_vfiprintf_r+0x228>)
 8006398:	bb1b      	cbnz	r3, 80063e2 <_vfiprintf_r+0x1da>
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	3307      	adds	r3, #7
 800639e:	f023 0307 	bic.w	r3, r3, #7
 80063a2:	3308      	adds	r3, #8
 80063a4:	9303      	str	r3, [sp, #12]
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	443b      	add	r3, r7
 80063aa:	9309      	str	r3, [sp, #36]	; 0x24
 80063ac:	e768      	b.n	8006280 <_vfiprintf_r+0x78>
 80063ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b2:	460c      	mov	r4, r1
 80063b4:	2001      	movs	r0, #1
 80063b6:	e7a6      	b.n	8006306 <_vfiprintf_r+0xfe>
 80063b8:	2300      	movs	r3, #0
 80063ba:	3401      	adds	r4, #1
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	4619      	mov	r1, r3
 80063c0:	f04f 0c0a 	mov.w	ip, #10
 80063c4:	4620      	mov	r0, r4
 80063c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ca:	3a30      	subs	r2, #48	; 0x30
 80063cc:	2a09      	cmp	r2, #9
 80063ce:	d903      	bls.n	80063d8 <_vfiprintf_r+0x1d0>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0c6      	beq.n	8006362 <_vfiprintf_r+0x15a>
 80063d4:	9105      	str	r1, [sp, #20]
 80063d6:	e7c4      	b.n	8006362 <_vfiprintf_r+0x15a>
 80063d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063dc:	4604      	mov	r4, r0
 80063de:	2301      	movs	r3, #1
 80063e0:	e7f0      	b.n	80063c4 <_vfiprintf_r+0x1bc>
 80063e2:	ab03      	add	r3, sp, #12
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	462a      	mov	r2, r5
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <_vfiprintf_r+0x22c>)
 80063ea:	a904      	add	r1, sp, #16
 80063ec:	4630      	mov	r0, r6
 80063ee:	f3af 8000 	nop.w
 80063f2:	4607      	mov	r7, r0
 80063f4:	1c78      	adds	r0, r7, #1
 80063f6:	d1d6      	bne.n	80063a6 <_vfiprintf_r+0x19e>
 80063f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063fa:	07d9      	lsls	r1, r3, #31
 80063fc:	d405      	bmi.n	800640a <_vfiprintf_r+0x202>
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	059a      	lsls	r2, r3, #22
 8006402:	d402      	bmi.n	800640a <_vfiprintf_r+0x202>
 8006404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006406:	f7ff fc6f 	bl	8005ce8 <__retarget_lock_release_recursive>
 800640a:	89ab      	ldrh	r3, [r5, #12]
 800640c:	065b      	lsls	r3, r3, #25
 800640e:	f53f af1d 	bmi.w	800624c <_vfiprintf_r+0x44>
 8006412:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006414:	e71c      	b.n	8006250 <_vfiprintf_r+0x48>
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462a      	mov	r2, r5
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <_vfiprintf_r+0x22c>)
 800641e:	a904      	add	r1, sp, #16
 8006420:	4630      	mov	r0, r6
 8006422:	f000 f879 	bl	8006518 <_printf_i>
 8006426:	e7e4      	b.n	80063f2 <_vfiprintf_r+0x1ea>
 8006428:	08006f28 	.word	0x08006f28
 800642c:	08006f32 	.word	0x08006f32
 8006430:	00000000 	.word	0x00000000
 8006434:	080061e3 	.word	0x080061e3
 8006438:	08006f2e 	.word	0x08006f2e

0800643c <_printf_common>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	4616      	mov	r6, r2
 8006442:	4699      	mov	r9, r3
 8006444:	688a      	ldr	r2, [r1, #8]
 8006446:	690b      	ldr	r3, [r1, #16]
 8006448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800644c:	4293      	cmp	r3, r2
 800644e:	bfb8      	it	lt
 8006450:	4613      	movlt	r3, r2
 8006452:	6033      	str	r3, [r6, #0]
 8006454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006458:	4607      	mov	r7, r0
 800645a:	460c      	mov	r4, r1
 800645c:	b10a      	cbz	r2, 8006462 <_printf_common+0x26>
 800645e:	3301      	adds	r3, #1
 8006460:	6033      	str	r3, [r6, #0]
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	0699      	lsls	r1, r3, #26
 8006466:	bf42      	ittt	mi
 8006468:	6833      	ldrmi	r3, [r6, #0]
 800646a:	3302      	addmi	r3, #2
 800646c:	6033      	strmi	r3, [r6, #0]
 800646e:	6825      	ldr	r5, [r4, #0]
 8006470:	f015 0506 	ands.w	r5, r5, #6
 8006474:	d106      	bne.n	8006484 <_printf_common+0x48>
 8006476:	f104 0a19 	add.w	sl, r4, #25
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	6832      	ldr	r2, [r6, #0]
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	42ab      	cmp	r3, r5
 8006482:	dc26      	bgt.n	80064d2 <_printf_common+0x96>
 8006484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006488:	1e13      	subs	r3, r2, #0
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	bf18      	it	ne
 800648e:	2301      	movne	r3, #1
 8006490:	0692      	lsls	r2, r2, #26
 8006492:	d42b      	bmi.n	80064ec <_printf_common+0xb0>
 8006494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006498:	4649      	mov	r1, r9
 800649a:	4638      	mov	r0, r7
 800649c:	47c0      	blx	r8
 800649e:	3001      	adds	r0, #1
 80064a0:	d01e      	beq.n	80064e0 <_printf_common+0xa4>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	6922      	ldr	r2, [r4, #16]
 80064a6:	f003 0306 	and.w	r3, r3, #6
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	bf02      	ittt	eq
 80064ae:	68e5      	ldreq	r5, [r4, #12]
 80064b0:	6833      	ldreq	r3, [r6, #0]
 80064b2:	1aed      	subeq	r5, r5, r3
 80064b4:	68a3      	ldr	r3, [r4, #8]
 80064b6:	bf0c      	ite	eq
 80064b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064bc:	2500      	movne	r5, #0
 80064be:	4293      	cmp	r3, r2
 80064c0:	bfc4      	itt	gt
 80064c2:	1a9b      	subgt	r3, r3, r2
 80064c4:	18ed      	addgt	r5, r5, r3
 80064c6:	2600      	movs	r6, #0
 80064c8:	341a      	adds	r4, #26
 80064ca:	42b5      	cmp	r5, r6
 80064cc:	d11a      	bne.n	8006504 <_printf_common+0xc8>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e008      	b.n	80064e4 <_printf_common+0xa8>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4652      	mov	r2, sl
 80064d6:	4649      	mov	r1, r9
 80064d8:	4638      	mov	r0, r7
 80064da:	47c0      	blx	r8
 80064dc:	3001      	adds	r0, #1
 80064de:	d103      	bne.n	80064e8 <_printf_common+0xac>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e8:	3501      	adds	r5, #1
 80064ea:	e7c6      	b.n	800647a <_printf_common+0x3e>
 80064ec:	18e1      	adds	r1, r4, r3
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	2030      	movs	r0, #48	; 0x30
 80064f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f6:	4422      	add	r2, r4
 80064f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006500:	3302      	adds	r3, #2
 8006502:	e7c7      	b.n	8006494 <_printf_common+0x58>
 8006504:	2301      	movs	r3, #1
 8006506:	4622      	mov	r2, r4
 8006508:	4649      	mov	r1, r9
 800650a:	4638      	mov	r0, r7
 800650c:	47c0      	blx	r8
 800650e:	3001      	adds	r0, #1
 8006510:	d0e6      	beq.n	80064e0 <_printf_common+0xa4>
 8006512:	3601      	adds	r6, #1
 8006514:	e7d9      	b.n	80064ca <_printf_common+0x8e>
	...

08006518 <_printf_i>:
 8006518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	7e0f      	ldrb	r7, [r1, #24]
 800651e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006520:	2f78      	cmp	r7, #120	; 0x78
 8006522:	4691      	mov	r9, r2
 8006524:	4680      	mov	r8, r0
 8006526:	460c      	mov	r4, r1
 8006528:	469a      	mov	sl, r3
 800652a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800652e:	d807      	bhi.n	8006540 <_printf_i+0x28>
 8006530:	2f62      	cmp	r7, #98	; 0x62
 8006532:	d80a      	bhi.n	800654a <_printf_i+0x32>
 8006534:	2f00      	cmp	r7, #0
 8006536:	f000 80d4 	beq.w	80066e2 <_printf_i+0x1ca>
 800653a:	2f58      	cmp	r7, #88	; 0x58
 800653c:	f000 80c0 	beq.w	80066c0 <_printf_i+0x1a8>
 8006540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006548:	e03a      	b.n	80065c0 <_printf_i+0xa8>
 800654a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800654e:	2b15      	cmp	r3, #21
 8006550:	d8f6      	bhi.n	8006540 <_printf_i+0x28>
 8006552:	a101      	add	r1, pc, #4	; (adr r1, 8006558 <_printf_i+0x40>)
 8006554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065c5 	.word	0x080065c5
 8006560:	08006541 	.word	0x08006541
 8006564:	08006541 	.word	0x08006541
 8006568:	08006541 	.word	0x08006541
 800656c:	08006541 	.word	0x08006541
 8006570:	080065c5 	.word	0x080065c5
 8006574:	08006541 	.word	0x08006541
 8006578:	08006541 	.word	0x08006541
 800657c:	08006541 	.word	0x08006541
 8006580:	08006541 	.word	0x08006541
 8006584:	080066c9 	.word	0x080066c9
 8006588:	080065f1 	.word	0x080065f1
 800658c:	08006683 	.word	0x08006683
 8006590:	08006541 	.word	0x08006541
 8006594:	08006541 	.word	0x08006541
 8006598:	080066eb 	.word	0x080066eb
 800659c:	08006541 	.word	0x08006541
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	08006541 	.word	0x08006541
 80065a8:	08006541 	.word	0x08006541
 80065ac:	0800668b 	.word	0x0800668b
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	602a      	str	r2, [r5, #0]
 80065b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c0:	2301      	movs	r3, #1
 80065c2:	e09f      	b.n	8006704 <_printf_i+0x1ec>
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	0607      	lsls	r7, r0, #24
 80065ca:	f103 0104 	add.w	r1, r3, #4
 80065ce:	6029      	str	r1, [r5, #0]
 80065d0:	d501      	bpl.n	80065d6 <_printf_i+0xbe>
 80065d2:	681e      	ldr	r6, [r3, #0]
 80065d4:	e003      	b.n	80065de <_printf_i+0xc6>
 80065d6:	0646      	lsls	r6, r0, #25
 80065d8:	d5fb      	bpl.n	80065d2 <_printf_i+0xba>
 80065da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80065de:	2e00      	cmp	r6, #0
 80065e0:	da03      	bge.n	80065ea <_printf_i+0xd2>
 80065e2:	232d      	movs	r3, #45	; 0x2d
 80065e4:	4276      	negs	r6, r6
 80065e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ea:	485a      	ldr	r0, [pc, #360]	; (8006754 <_printf_i+0x23c>)
 80065ec:	230a      	movs	r3, #10
 80065ee:	e012      	b.n	8006616 <_printf_i+0xfe>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	6029      	str	r1, [r5, #0]
 80065f8:	0605      	lsls	r5, r0, #24
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0xe8>
 80065fc:	681e      	ldr	r6, [r3, #0]
 80065fe:	e002      	b.n	8006606 <_printf_i+0xee>
 8006600:	0641      	lsls	r1, r0, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0xe4>
 8006604:	881e      	ldrh	r6, [r3, #0]
 8006606:	4853      	ldr	r0, [pc, #332]	; (8006754 <_printf_i+0x23c>)
 8006608:	2f6f      	cmp	r7, #111	; 0x6f
 800660a:	bf0c      	ite	eq
 800660c:	2308      	moveq	r3, #8
 800660e:	230a      	movne	r3, #10
 8006610:	2100      	movs	r1, #0
 8006612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006616:	6865      	ldr	r5, [r4, #4]
 8006618:	60a5      	str	r5, [r4, #8]
 800661a:	2d00      	cmp	r5, #0
 800661c:	bfa2      	ittt	ge
 800661e:	6821      	ldrge	r1, [r4, #0]
 8006620:	f021 0104 	bicge.w	r1, r1, #4
 8006624:	6021      	strge	r1, [r4, #0]
 8006626:	b90e      	cbnz	r6, 800662c <_printf_i+0x114>
 8006628:	2d00      	cmp	r5, #0
 800662a:	d04b      	beq.n	80066c4 <_printf_i+0x1ac>
 800662c:	4615      	mov	r5, r2
 800662e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006632:	fb03 6711 	mls	r7, r3, r1, r6
 8006636:	5dc7      	ldrb	r7, [r0, r7]
 8006638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800663c:	4637      	mov	r7, r6
 800663e:	42bb      	cmp	r3, r7
 8006640:	460e      	mov	r6, r1
 8006642:	d9f4      	bls.n	800662e <_printf_i+0x116>
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10b      	bne.n	8006660 <_printf_i+0x148>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07de      	lsls	r6, r3, #31
 800664c:	d508      	bpl.n	8006660 <_printf_i+0x148>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	6861      	ldr	r1, [r4, #4]
 8006652:	4299      	cmp	r1, r3
 8006654:	bfde      	ittt	le
 8006656:	2330      	movle	r3, #48	; 0x30
 8006658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800665c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006660:	1b52      	subs	r2, r2, r5
 8006662:	6122      	str	r2, [r4, #16]
 8006664:	f8cd a000 	str.w	sl, [sp]
 8006668:	464b      	mov	r3, r9
 800666a:	aa03      	add	r2, sp, #12
 800666c:	4621      	mov	r1, r4
 800666e:	4640      	mov	r0, r8
 8006670:	f7ff fee4 	bl	800643c <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	d14a      	bne.n	800670e <_printf_i+0x1f6>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b004      	add	sp, #16
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	f043 0320 	orr.w	r3, r3, #32
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	4833      	ldr	r0, [pc, #204]	; (8006758 <_printf_i+0x240>)
 800668c:	2778      	movs	r7, #120	; 0x78
 800668e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	6829      	ldr	r1, [r5, #0]
 8006696:	061f      	lsls	r7, r3, #24
 8006698:	f851 6b04 	ldr.w	r6, [r1], #4
 800669c:	d402      	bmi.n	80066a4 <_printf_i+0x18c>
 800669e:	065f      	lsls	r7, r3, #25
 80066a0:	bf48      	it	mi
 80066a2:	b2b6      	uxthmi	r6, r6
 80066a4:	07df      	lsls	r7, r3, #31
 80066a6:	bf48      	it	mi
 80066a8:	f043 0320 	orrmi.w	r3, r3, #32
 80066ac:	6029      	str	r1, [r5, #0]
 80066ae:	bf48      	it	mi
 80066b0:	6023      	strmi	r3, [r4, #0]
 80066b2:	b91e      	cbnz	r6, 80066bc <_printf_i+0x1a4>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	f023 0320 	bic.w	r3, r3, #32
 80066ba:	6023      	str	r3, [r4, #0]
 80066bc:	2310      	movs	r3, #16
 80066be:	e7a7      	b.n	8006610 <_printf_i+0xf8>
 80066c0:	4824      	ldr	r0, [pc, #144]	; (8006754 <_printf_i+0x23c>)
 80066c2:	e7e4      	b.n	800668e <_printf_i+0x176>
 80066c4:	4615      	mov	r5, r2
 80066c6:	e7bd      	b.n	8006644 <_printf_i+0x12c>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6826      	ldr	r6, [r4, #0]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6028      	str	r0, [r5, #0]
 80066d2:	0635      	lsls	r5, r6, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x1c4>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x1ca>
 80066dc:	0670      	lsls	r0, r6, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x1c0>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	4615      	mov	r5, r2
 80066e8:	e7bc      	b.n	8006664 <_printf_i+0x14c>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	602a      	str	r2, [r5, #0]
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7f9 fd7a 	bl	80001f0 <memchr>
 80066fc:	b108      	cbz	r0, 8006702 <_printf_i+0x1ea>
 80066fe:	1b40      	subs	r0, r0, r5
 8006700:	6060      	str	r0, [r4, #4]
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	2300      	movs	r3, #0
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670c:	e7aa      	b.n	8006664 <_printf_i+0x14c>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	462a      	mov	r2, r5
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	47d0      	blx	sl
 8006718:	3001      	adds	r0, #1
 800671a:	d0ad      	beq.n	8006678 <_printf_i+0x160>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d413      	bmi.n	800674a <_printf_i+0x232>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	bfb8      	it	lt
 800672a:	4618      	movlt	r0, r3
 800672c:	e7a6      	b.n	800667c <_printf_i+0x164>
 800672e:	2301      	movs	r3, #1
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d09d      	beq.n	8006678 <_printf_i+0x160>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf2      	bgt.n	800672e <_printf_i+0x216>
 8006748:	e7eb      	b.n	8006722 <_printf_i+0x20a>
 800674a:	2500      	movs	r5, #0
 800674c:	f104 0619 	add.w	r6, r4, #25
 8006750:	e7f5      	b.n	800673e <_printf_i+0x226>
 8006752:	bf00      	nop
 8006754:	08006f39 	.word	0x08006f39
 8006758:	08006f4a 	.word	0x08006f4a

0800675c <__swbuf_r>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	460e      	mov	r6, r1
 8006760:	4614      	mov	r4, r2
 8006762:	4605      	mov	r5, r0
 8006764:	b118      	cbz	r0, 800676e <__swbuf_r+0x12>
 8006766:	6a03      	ldr	r3, [r0, #32]
 8006768:	b90b      	cbnz	r3, 800676e <__swbuf_r+0x12>
 800676a:	f7ff f971 	bl	8005a50 <__sinit>
 800676e:	69a3      	ldr	r3, [r4, #24]
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	071a      	lsls	r2, r3, #28
 8006776:	d525      	bpl.n	80067c4 <__swbuf_r+0x68>
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	b31b      	cbz	r3, 80067c4 <__swbuf_r+0x68>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	6922      	ldr	r2, [r4, #16]
 8006780:	1a98      	subs	r0, r3, r2
 8006782:	6963      	ldr	r3, [r4, #20]
 8006784:	b2f6      	uxtb	r6, r6
 8006786:	4283      	cmp	r3, r0
 8006788:	4637      	mov	r7, r6
 800678a:	dc04      	bgt.n	8006796 <__swbuf_r+0x3a>
 800678c:	4621      	mov	r1, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f7ff f896 	bl	80058c0 <_fflush_r>
 8006794:	b9e0      	cbnz	r0, 80067d0 <__swbuf_r+0x74>
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	3b01      	subs	r3, #1
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	6022      	str	r2, [r4, #0]
 80067a2:	701e      	strb	r6, [r3, #0]
 80067a4:	6962      	ldr	r2, [r4, #20]
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d004      	beq.n	80067b6 <__swbuf_r+0x5a>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	07db      	lsls	r3, r3, #31
 80067b0:	d506      	bpl.n	80067c0 <__swbuf_r+0x64>
 80067b2:	2e0a      	cmp	r6, #10
 80067b4:	d104      	bne.n	80067c0 <__swbuf_r+0x64>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f7ff f881 	bl	80058c0 <_fflush_r>
 80067be:	b938      	cbnz	r0, 80067d0 <__swbuf_r+0x74>
 80067c0:	4638      	mov	r0, r7
 80067c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f806 	bl	80067d8 <__swsetup_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0d5      	beq.n	800677c <__swbuf_r+0x20>
 80067d0:	f04f 37ff 	mov.w	r7, #4294967295
 80067d4:	e7f4      	b.n	80067c0 <__swbuf_r+0x64>
	...

080067d8 <__swsetup_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <__swsetup_r+0xac>)
 80067dc:	4605      	mov	r5, r0
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	460c      	mov	r4, r1
 80067e2:	b118      	cbz	r0, 80067ec <__swsetup_r+0x14>
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	b90b      	cbnz	r3, 80067ec <__swsetup_r+0x14>
 80067e8:	f7ff f932 	bl	8005a50 <__sinit>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067f2:	0718      	lsls	r0, r3, #28
 80067f4:	d422      	bmi.n	800683c <__swsetup_r+0x64>
 80067f6:	06d9      	lsls	r1, r3, #27
 80067f8:	d407      	bmi.n	800680a <__swsetup_r+0x32>
 80067fa:	2309      	movs	r3, #9
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e034      	b.n	8006874 <__swsetup_r+0x9c>
 800680a:	0758      	lsls	r0, r3, #29
 800680c:	d512      	bpl.n	8006834 <__swsetup_r+0x5c>
 800680e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006810:	b141      	cbz	r1, 8006824 <__swsetup_r+0x4c>
 8006812:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006816:	4299      	cmp	r1, r3
 8006818:	d002      	beq.n	8006820 <__swsetup_r+0x48>
 800681a:	4628      	mov	r0, r5
 800681c:	f7ff fa7a 	bl	8005d14 <_free_r>
 8006820:	2300      	movs	r3, #0
 8006822:	6363      	str	r3, [r4, #52]	; 0x34
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	2300      	movs	r3, #0
 800682e:	6063      	str	r3, [r4, #4]
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f043 0308 	orr.w	r3, r3, #8
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	b94b      	cbnz	r3, 8006854 <__swsetup_r+0x7c>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684a:	d003      	beq.n	8006854 <__swsetup_r+0x7c>
 800684c:	4621      	mov	r1, r4
 800684e:	4628      	mov	r0, r5
 8006850:	f000 f8dd 	bl	8006a0e <__smakebuf_r>
 8006854:	89a0      	ldrh	r0, [r4, #12]
 8006856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800685a:	f010 0301 	ands.w	r3, r0, #1
 800685e:	d00a      	beq.n	8006876 <__swsetup_r+0x9e>
 8006860:	2300      	movs	r3, #0
 8006862:	60a3      	str	r3, [r4, #8]
 8006864:	6963      	ldr	r3, [r4, #20]
 8006866:	425b      	negs	r3, r3
 8006868:	61a3      	str	r3, [r4, #24]
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	b943      	cbnz	r3, 8006880 <__swsetup_r+0xa8>
 800686e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006872:	d1c4      	bne.n	80067fe <__swsetup_r+0x26>
 8006874:	bd38      	pop	{r3, r4, r5, pc}
 8006876:	0781      	lsls	r1, r0, #30
 8006878:	bf58      	it	pl
 800687a:	6963      	ldrpl	r3, [r4, #20]
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	e7f4      	b.n	800686a <__swsetup_r+0x92>
 8006880:	2000      	movs	r0, #0
 8006882:	e7f7      	b.n	8006874 <__swsetup_r+0x9c>
 8006884:	2000007c 	.word	0x2000007c

08006888 <memmove>:
 8006888:	4288      	cmp	r0, r1
 800688a:	b510      	push	{r4, lr}
 800688c:	eb01 0402 	add.w	r4, r1, r2
 8006890:	d902      	bls.n	8006898 <memmove+0x10>
 8006892:	4284      	cmp	r4, r0
 8006894:	4623      	mov	r3, r4
 8006896:	d807      	bhi.n	80068a8 <memmove+0x20>
 8006898:	1e43      	subs	r3, r0, #1
 800689a:	42a1      	cmp	r1, r4
 800689c:	d008      	beq.n	80068b0 <memmove+0x28>
 800689e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068a6:	e7f8      	b.n	800689a <memmove+0x12>
 80068a8:	4402      	add	r2, r0
 80068aa:	4601      	mov	r1, r0
 80068ac:	428a      	cmp	r2, r1
 80068ae:	d100      	bne.n	80068b2 <memmove+0x2a>
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ba:	e7f7      	b.n	80068ac <memmove+0x24>

080068bc <_raise_r>:
 80068bc:	291f      	cmp	r1, #31
 80068be:	b538      	push	{r3, r4, r5, lr}
 80068c0:	4604      	mov	r4, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	d904      	bls.n	80068d0 <_raise_r+0x14>
 80068c6:	2316      	movs	r3, #22
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80068d2:	b112      	cbz	r2, 80068da <_raise_r+0x1e>
 80068d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068d8:	b94b      	cbnz	r3, 80068ee <_raise_r+0x32>
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 f830 	bl	8006940 <_getpid_r>
 80068e0:	462a      	mov	r2, r5
 80068e2:	4601      	mov	r1, r0
 80068e4:	4620      	mov	r0, r4
 80068e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ea:	f000 b817 	b.w	800691c <_kill_r>
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d00a      	beq.n	8006908 <_raise_r+0x4c>
 80068f2:	1c59      	adds	r1, r3, #1
 80068f4:	d103      	bne.n	80068fe <_raise_r+0x42>
 80068f6:	2316      	movs	r3, #22
 80068f8:	6003      	str	r3, [r0, #0]
 80068fa:	2001      	movs	r0, #1
 80068fc:	e7e7      	b.n	80068ce <_raise_r+0x12>
 80068fe:	2400      	movs	r4, #0
 8006900:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006904:	4628      	mov	r0, r5
 8006906:	4798      	blx	r3
 8006908:	2000      	movs	r0, #0
 800690a:	e7e0      	b.n	80068ce <_raise_r+0x12>

0800690c <raise>:
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <raise+0xc>)
 800690e:	4601      	mov	r1, r0
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	f7ff bfd3 	b.w	80068bc <_raise_r>
 8006916:	bf00      	nop
 8006918:	2000007c 	.word	0x2000007c

0800691c <_kill_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d07      	ldr	r5, [pc, #28]	; (800693c <_kill_r+0x20>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	4611      	mov	r1, r2
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	f000 f8d7 	bl	8006adc <_kill>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	d102      	bne.n	8006938 <_kill_r+0x1c>
 8006932:	682b      	ldr	r3, [r5, #0]
 8006934:	b103      	cbz	r3, 8006938 <_kill_r+0x1c>
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	bd38      	pop	{r3, r4, r5, pc}
 800693a:	bf00      	nop
 800693c:	20004388 	.word	0x20004388

08006940 <_getpid_r>:
 8006940:	f7fe bd74 	b.w	800542c <_getpid>

08006944 <_sbrk_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d06      	ldr	r5, [pc, #24]	; (8006960 <_sbrk_r+0x1c>)
 8006948:	2300      	movs	r3, #0
 800694a:	4604      	mov	r4, r0
 800694c:	4608      	mov	r0, r1
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f7fa f910 	bl	8000b74 <_sbrk>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_sbrk_r+0x1a>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_sbrk_r+0x1a>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20004388 	.word	0x20004388

08006964 <_realloc_r>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	4680      	mov	r8, r0
 800696a:	4614      	mov	r4, r2
 800696c:	460e      	mov	r6, r1
 800696e:	b921      	cbnz	r1, 800697a <_realloc_r+0x16>
 8006970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4611      	mov	r1, r2
 8006976:	f7ff ba39 	b.w	8005dec <_malloc_r>
 800697a:	b92a      	cbnz	r2, 8006988 <_realloc_r+0x24>
 800697c:	f7ff f9ca 	bl	8005d14 <_free_r>
 8006980:	4625      	mov	r5, r4
 8006982:	4628      	mov	r0, r5
 8006984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006988:	f000 f8a0 	bl	8006acc <_malloc_usable_size_r>
 800698c:	4284      	cmp	r4, r0
 800698e:	4607      	mov	r7, r0
 8006990:	d802      	bhi.n	8006998 <_realloc_r+0x34>
 8006992:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006996:	d812      	bhi.n	80069be <_realloc_r+0x5a>
 8006998:	4621      	mov	r1, r4
 800699a:	4640      	mov	r0, r8
 800699c:	f7ff fa26 	bl	8005dec <_malloc_r>
 80069a0:	4605      	mov	r5, r0
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d0ed      	beq.n	8006982 <_realloc_r+0x1e>
 80069a6:	42bc      	cmp	r4, r7
 80069a8:	4622      	mov	r2, r4
 80069aa:	4631      	mov	r1, r6
 80069ac:	bf28      	it	cs
 80069ae:	463a      	movcs	r2, r7
 80069b0:	f7ff f99b 	bl	8005cea <memcpy>
 80069b4:	4631      	mov	r1, r6
 80069b6:	4640      	mov	r0, r8
 80069b8:	f7ff f9ac 	bl	8005d14 <_free_r>
 80069bc:	e7e1      	b.n	8006982 <_realloc_r+0x1e>
 80069be:	4635      	mov	r5, r6
 80069c0:	e7df      	b.n	8006982 <_realloc_r+0x1e>

080069c2 <__swhatbuf_r>:
 80069c2:	b570      	push	{r4, r5, r6, lr}
 80069c4:	460c      	mov	r4, r1
 80069c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ca:	2900      	cmp	r1, #0
 80069cc:	b096      	sub	sp, #88	; 0x58
 80069ce:	4615      	mov	r5, r2
 80069d0:	461e      	mov	r6, r3
 80069d2:	da0d      	bge.n	80069f0 <__swhatbuf_r+0x2e>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069da:	f04f 0100 	mov.w	r1, #0
 80069de:	bf0c      	ite	eq
 80069e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069e4:	2340      	movne	r3, #64	; 0x40
 80069e6:	2000      	movs	r0, #0
 80069e8:	6031      	str	r1, [r6, #0]
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	b016      	add	sp, #88	; 0x58
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	466a      	mov	r2, sp
 80069f2:	f000 f849 	bl	8006a88 <_fstat_r>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	dbec      	blt.n	80069d4 <__swhatbuf_r+0x12>
 80069fa:	9901      	ldr	r1, [sp, #4]
 80069fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a04:	4259      	negs	r1, r3
 8006a06:	4159      	adcs	r1, r3
 8006a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0c:	e7eb      	b.n	80069e6 <__swhatbuf_r+0x24>

08006a0e <__smakebuf_r>:
 8006a0e:	898b      	ldrh	r3, [r1, #12]
 8006a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a12:	079d      	lsls	r5, r3, #30
 8006a14:	4606      	mov	r6, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	d507      	bpl.n	8006a2a <__smakebuf_r+0x1c>
 8006a1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	2301      	movs	r3, #1
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	b002      	add	sp, #8
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
 8006a2a:	ab01      	add	r3, sp, #4
 8006a2c:	466a      	mov	r2, sp
 8006a2e:	f7ff ffc8 	bl	80069c2 <__swhatbuf_r>
 8006a32:	9900      	ldr	r1, [sp, #0]
 8006a34:	4605      	mov	r5, r0
 8006a36:	4630      	mov	r0, r6
 8006a38:	f7ff f9d8 	bl	8005dec <_malloc_r>
 8006a3c:	b948      	cbnz	r0, 8006a52 <__smakebuf_r+0x44>
 8006a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a42:	059a      	lsls	r2, r3, #22
 8006a44:	d4ef      	bmi.n	8006a26 <__smakebuf_r+0x18>
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	f043 0302 	orr.w	r3, r3, #2
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	e7e3      	b.n	8006a1a <__smakebuf_r+0xc>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	6020      	str	r0, [r4, #0]
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	9b00      	ldr	r3, [sp, #0]
 8006a5e:	6163      	str	r3, [r4, #20]
 8006a60:	9b01      	ldr	r3, [sp, #4]
 8006a62:	6120      	str	r0, [r4, #16]
 8006a64:	b15b      	cbz	r3, 8006a7e <__smakebuf_r+0x70>
 8006a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f000 f81e 	bl	8006aac <_isatty_r>
 8006a70:	b128      	cbz	r0, 8006a7e <__smakebuf_r+0x70>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	431d      	orrs	r5, r3
 8006a82:	81a5      	strh	r5, [r4, #12]
 8006a84:	e7cf      	b.n	8006a26 <__smakebuf_r+0x18>
	...

08006a88 <_fstat_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4d07      	ldr	r5, [pc, #28]	; (8006aa8 <_fstat_r+0x20>)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	f7fe fcec 	bl	8005472 <_fstat>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d102      	bne.n	8006aa4 <_fstat_r+0x1c>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	b103      	cbz	r3, 8006aa4 <_fstat_r+0x1c>
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	bd38      	pop	{r3, r4, r5, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20004388 	.word	0x20004388

08006aac <_isatty_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4d06      	ldr	r5, [pc, #24]	; (8006ac8 <_isatty_r+0x1c>)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	f7fe fe42 	bl	8005740 <_isatty>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_isatty_r+0x1a>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_isatty_r+0x1a>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	20004388 	.word	0x20004388

08006acc <_malloc_usable_size_r>:
 8006acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad0:	1f18      	subs	r0, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	bfbc      	itt	lt
 8006ad6:	580b      	ldrlt	r3, [r1, r0]
 8006ad8:	18c0      	addlt	r0, r0, r3
 8006ada:	4770      	bx	lr

08006adc <_kill>:
 8006adc:	4b02      	ldr	r3, [pc, #8]	; (8006ae8 <_kill+0xc>)
 8006ade:	2258      	movs	r2, #88	; 0x58
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	4770      	bx	lr
 8006ae8:	20004388 	.word	0x20004388

08006aec <_exit>:
 8006aec:	e7fe      	b.n	8006aec <_exit>
	...

08006af0 <_init>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr

08006afc <_fini>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr
