
Trabajo_practico_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800687c  0800687c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800687c  0800687c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006884  08006884  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800688c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000431c  2000008c  08006918  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043a8  08006918  000243a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e89  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384e  00000000  00000000  00034f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  000387d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9b  00000000  00000000  00039ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b24  00000000  00000000  0003a95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017aa0  00000000  00000000  0005447f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009741e  00000000  00000000  0006bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a20  00000000  00000000  00103340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00108d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006640 	.word	0x08006640

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08006640 	.word	0x08006640

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000a8 	.word	0x200000a8
 80005bc:	20000108 	.word	0x20000108

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80005c4:	f004 fe80 	bl	80052c8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb46 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f810 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8f0 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8c4 	bl	8000760 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d8:	f000 f876 	bl	80006c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x2c>)
 80005de:	f001 fb53 	bl	8001c88 <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005e2:	f004 f963 	bl	80048ac <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f002 f9fd 	bl	80029e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x2a>
 80005ec:	20000308 	.word	0x20000308

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f99f 	bl	8005942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <SystemClock_Config+0xd0>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd4>)
 800063e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000664:	2310      	movs	r3, #16
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000672:	2307      	movs	r3, #7
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fdea 	bl	8001254 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f939 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f84c 	bl	8001744 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b2:	f000 f923 	bl	80008fc <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_TIM2_Init+0x94>)
 80006e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_TIM2_Init+0x94>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_TIM2_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_TIM2_Init+0x94>)
 80006fa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80006fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_TIM2_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM2_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM2_Init+0x94>)
 800070e:	f001 fa6b 	bl	8001be8 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000718:	f000 f8f0 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_TIM2_Init+0x94>)
 800072a:	f001 fbff 	bl	8001f2c <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 f8e2 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_TIM2_Init+0x94>)
 8000746:	f001 fe07 	bl	8002358 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f8d4 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000308 	.word	0x20000308

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f001 fe60 	bl	800245c <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f8ab 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000350 	.word	0x20000350
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|LED_B_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2133      	movs	r1, #51	; 0x33
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fcee 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xd8>)
 800085c:	f000 fb44 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin|LD2_Pin;
 8000860:	2333      	movs	r3, #51	; 0x33
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000878:	f000 fb36 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020800 	.word	0x40020800

08000890 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <configureTimerForRunTimeStats+0x14>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	20000398 	.word	0x20000398

080008a8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <getRunTimeCounterValue+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000398 	.word	0x20000398

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 f9e3 	bl	8000c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008de:	d104      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e8:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010000 	.word	0x40010000
 80008f8:	20000398 	.word	0x20000398

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 faa1 	bl	8000e94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000970:	d115      	bne.n	800099e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201c      	movs	r0, #28
 8000994:	f000 fa7e 	bl	8000e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f000 fa97 	bl	8000ecc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a22:	f000 fa61 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f886 	bl	8001b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a78:	f001 f870 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8000a7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <HAL_InitTick+0xd4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <HAL_InitTick+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ab4:	f001 f898 	bl	8001be8 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11b      	bne.n	8000afe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ac8:	f001 f8de 	bl	8001c88 <HAL_TIM_Base_Start_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 f9f6 	bl	8000ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d808      	bhi.n	8000af8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	2019      	movs	r0, #25
 8000aec:	f000 f9d2 	bl	8000e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0xe0>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e002      	b.n	8000afe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	2000039c 	.word	0x2000039c
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b52:	f001 f8fb 	bl	8001d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000039c 	.word	0x2000039c

08000b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM2_IRQHandler+0x10>)
 8000b66:	f001 f8f1 	bl	8001d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000308 	.word	0x20000308

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f004 ff2c 	bl	8005a00 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20018000 	.word	0x20018000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	200003e4 	.word	0x200003e4
 8000bdc:	200043a8 	.word	0x200043a8

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f004 feeb 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fcc3 	bl	80005c0 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000c48:	0800688c 	.word	0x0800688c
  ldr r2, =_sbss
 8000c4c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000c50:	200043a8 	.word	0x200043a8

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f8fc 	bl	8000e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f7ff fed8 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe3c 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200003e8 	.word	0x200003e8

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200003e8 	.word	0x200003e8

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff4c 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea6:	f7ff ff61 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f7ff ffb1 	bl	8000e18 <NVIC_EncodePriority>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff80 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff54 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e159      	b.n	80011b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8148 	bne.w	80011b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a2 	beq.w	80011b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a56      	ldr	r2, [pc, #344]	; (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HAL_GPIO_Init+0x2e8>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_GPIO_Init+0x2ec>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_GPIO_Init+0x2f0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x202>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2f4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x1fe>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_GPIO_Init+0x2f8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x1fa>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <HAL_GPIO_Init+0x2fc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x1f6>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a45      	ldr	r2, [pc, #276]	; (80011e8 <HAL_GPIO_Init+0x300>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x1f2>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010da:	2307      	movs	r3, #7
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x204>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4935      	ldr	r1, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x2ec>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <HAL_GPIO_Init+0x304>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_GPIO_Init+0x304>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_GPIO_Init+0x304>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_GPIO_Init+0x304>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f aea2 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e001      	b.n	8001212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcda 	bl	8000cc4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcd6 	bl	8000cc4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fcc6 	bl	8000cc4 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fcc2 	bl	8000cc4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc7b 	bl	8000cc4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc77 	bl	8000cc4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc5a 	bl	8000cc4 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc56 	bl	8000cc4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc3a 	bl	8000cc4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc36 	bl	8000cc4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc23 	bl	8000cc4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc1f 	bl	8000cc4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbdf 	bl	8000cc4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbdb 	bl	8000cc4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fba0 	bl	8000cc4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fb9c 	bl	8000cc4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb8a 	bl	8000cc4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb86 	bl	8000cc4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb5a 	bl	8000cc4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb56 	bl	8000cc4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb2f 	bl	8000cc4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb2b 	bl	8000cc4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb18 	bl	8000cc4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb14 	bl	8000cc4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa46 	bl	8000cc4 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa42 	bl	8000cc4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f8a6 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08006810 	.word	0x08006810
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	; 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a20:	f7fe fc36 	bl	8000290 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fbdc 	bl	8000290 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08006820 	.word	0x08006820

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08006820 	.word	0x08006820

08001b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	220f      	movs	r2, #15
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_RCC_GetClockConfig+0x60>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0207 	and.w	r2, r3, #7
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fea6 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 fa70 	bl	800210c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e044      	b.n	8001d2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d018      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cca:	d013      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_TIM_Base_Start_IT+0xb4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d010      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800
 8001d44:	40000c00 	.word	0x40000c00
 8001d48:	40014000 	.word	0x40014000

08001d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0202 	mvn.w	r2, #2
 8001d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f999 	bl	80020ce <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f98b 	bl	80020ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f99c 	bl	80020e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0204 	mvn.w	r2, #4
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f973 	bl	80020ce <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f965 	bl	80020ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f976 	bl	80020e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0208 	mvn.w	r2, #8
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f94d 	bl	80020ce <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f93f 	bl	80020ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f950 	bl	80020e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d020      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0210 	mvn.w	r2, #16
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f927 	bl	80020ce <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f919 	bl	80020ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f92a 	bl	80020e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0201 	mvn.w	r2, #1
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fd04 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fab6 	bl	8002448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8fb 	bl	80020f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0220 	mvn.w	r2, #32
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa88 	bl	8002434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x1c>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e0b4      	b.n	80020b2 <HAL_TIM_ConfigClockSource+0x186>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f80:	d03e      	beq.n	8002000 <HAL_TIM_ConfigClockSource+0xd4>
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f86:	f200 8087 	bhi.w	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8e:	f000 8086 	beq.w	800209e <HAL_TIM_ConfigClockSource+0x172>
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f96:	d87f      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b70      	cmp	r3, #112	; 0x70
 8001f9a:	d01a      	beq.n	8001fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f9c:	2b70      	cmp	r3, #112	; 0x70
 8001f9e:	d87b      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa0:	2b60      	cmp	r3, #96	; 0x60
 8001fa2:	d050      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0x11a>
 8001fa4:	2b60      	cmp	r3, #96	; 0x60
 8001fa6:	d877      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa8:	2b50      	cmp	r3, #80	; 0x50
 8001faa:	d03c      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0xfa>
 8001fac:	2b50      	cmp	r3, #80	; 0x50
 8001fae:	d873      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d058      	beq.n	8002066 <HAL_TIM_ConfigClockSource+0x13a>
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d86f      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb8:	2b30      	cmp	r3, #48	; 0x30
 8001fba:	d064      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	d86b      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d060      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d867      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d05c      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d05a      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd0:	e062      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fe2:	f000 f999 	bl	8002318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	609a      	str	r2, [r3, #8]
      break;
 8001ffe:	e04f      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002010:	f000 f982 	bl	8002318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002022:	609a      	str	r2, [r3, #8]
      break;
 8002024:	e03c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002032:	461a      	mov	r2, r3
 8002034:	f000 f8f6 	bl	8002224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2150      	movs	r1, #80	; 0x50
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f94f 	bl	80022e2 <TIM_ITRx_SetConfig>
      break;
 8002044:	e02c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002052:	461a      	mov	r2, r3
 8002054:	f000 f915 	bl	8002282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2160      	movs	r1, #96	; 0x60
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f93f 	bl	80022e2 <TIM_ITRx_SetConfig>
      break;
 8002064:	e01c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002072:	461a      	mov	r2, r3
 8002074:	f000 f8d6 	bl	8002224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f92f 	bl	80022e2 <TIM_ITRx_SetConfig>
      break;
 8002084:	e00c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	4610      	mov	r0, r2
 8002092:	f000 f926 	bl	80022e2 <TIM_ITRx_SetConfig>
      break;
 8002096:	e003      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      break;
 800209c:	e000      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800209e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <TIM_Base_SetConfig+0xfc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00f      	beq.n	8002144 <TIM_Base_SetConfig+0x38>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212a:	d00b      	beq.n	8002144 <TIM_Base_SetConfig+0x38>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <TIM_Base_SetConfig+0x100>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <TIM_Base_SetConfig+0x38>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a36      	ldr	r2, [pc, #216]	; (8002210 <TIM_Base_SetConfig+0x104>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_Base_SetConfig+0x38>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a35      	ldr	r2, [pc, #212]	; (8002214 <TIM_Base_SetConfig+0x108>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d108      	bne.n	8002156 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <TIM_Base_SetConfig+0xfc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01b      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d017      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <TIM_Base_SetConfig+0x100>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <TIM_Base_SetConfig+0x104>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00f      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <TIM_Base_SetConfig+0x108>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00b      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <TIM_Base_SetConfig+0x10c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <TIM_Base_SetConfig+0x110>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d003      	beq.n	8002196 <TIM_Base_SetConfig+0x8a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d108      	bne.n	80021a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <TIM_Base_SetConfig+0xfc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f023 0201 	bic.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800

08002224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f023 0201 	bic.w	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 030a 	bic.w	r3, r3, #10
 8002260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	621a      	str	r2, [r3, #32]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f023 0210 	bic.w	r2, r3, #16
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	031b      	lsls	r3, r3, #12
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	621a      	str	r2, [r3, #32]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	f043 0307 	orr.w	r3, r3, #7
 8002304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	021a      	lsls	r2, r3, #8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	431a      	orrs	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800236c:	2302      	movs	r3, #2
 800236e:	e050      	b.n	8002412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d018      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d013      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00e      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a16      	ldr	r2, [pc, #88]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d009      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10c      	bne.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40014000 	.word	0x40014000

08002434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e042      	b.n	80024f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fa92 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f82b 	bl	80024fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b0c0      	sub	sp, #256	; 0x100
 8002502:	af00      	add	r7, sp, #0
 8002504:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	ea40 0301 	orr.w	r3, r0, r1
 8002524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002554:	f021 010c 	bic.w	r1, r1, #12
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002562:	430b      	orrs	r3, r1
 8002564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002576:	6999      	ldr	r1, [r3, #24]
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	ea40 0301 	orr.w	r3, r0, r1
 8002582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <UART_SetConfig+0x2cc>)
 800258c:	429a      	cmp	r2, r3
 800258e:	d005      	beq.n	800259c <UART_SetConfig+0xa0>
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b8d      	ldr	r3, [pc, #564]	; (80027cc <UART_SetConfig+0x2d0>)
 8002598:	429a      	cmp	r2, r3
 800259a:	d104      	bne.n	80025a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800259c:	f7ff fade 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 80025a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025a4:	e003      	b.n	80025ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025a6:	f7ff fac5 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 80025aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b8:	f040 810c 	bne.w	80027d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	1891      	adds	r1, r2, r2
 80025d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80025d6:	415b      	adcs	r3, r3
 80025d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025de:	4621      	mov	r1, r4
 80025e0:	eb12 0801 	adds.w	r8, r2, r1
 80025e4:	4629      	mov	r1, r5
 80025e6:	eb43 0901 	adc.w	r9, r3, r1
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025fe:	4690      	mov	r8, r2
 8002600:	4699      	mov	r9, r3
 8002602:	4623      	mov	r3, r4
 8002604:	eb18 0303 	adds.w	r3, r8, r3
 8002608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800260c:	462b      	mov	r3, r5
 800260e:	eb49 0303 	adc.w	r3, r9, r3
 8002612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800262a:	460b      	mov	r3, r1
 800262c:	18db      	adds	r3, r3, r3
 800262e:	653b      	str	r3, [r7, #80]	; 0x50
 8002630:	4613      	mov	r3, r2
 8002632:	eb42 0303 	adc.w	r3, r2, r3
 8002636:	657b      	str	r3, [r7, #84]	; 0x54
 8002638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800263c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002640:	f7fd fe26 	bl	8000290 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <UART_SetConfig+0x2d4>)
 800264a:	fba3 2302 	umull	r2, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	011c      	lsls	r4, r3, #4
 8002652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800265c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	1891      	adds	r1, r2, r2
 800266a:	64b9      	str	r1, [r7, #72]	; 0x48
 800266c:	415b      	adcs	r3, r3
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002674:	4641      	mov	r1, r8
 8002676:	eb12 0a01 	adds.w	sl, r2, r1
 800267a:	4649      	mov	r1, r9
 800267c:	eb43 0b01 	adc.w	fp, r3, r1
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800268c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002694:	4692      	mov	sl, r2
 8002696:	469b      	mov	fp, r3
 8002698:	4643      	mov	r3, r8
 800269a:	eb1a 0303 	adds.w	r3, sl, r3
 800269e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026a2:	464b      	mov	r3, r9
 80026a4:	eb4b 0303 	adc.w	r3, fp, r3
 80026a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026c0:	460b      	mov	r3, r1
 80026c2:	18db      	adds	r3, r3, r3
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
 80026c6:	4613      	mov	r3, r2
 80026c8:	eb42 0303 	adc.w	r3, r2, r3
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026d6:	f7fd fddb 	bl	8000290 <__aeabi_uldivmod>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <UART_SetConfig+0x2d4>)
 80026e2:	fba3 2301 	umull	r2, r3, r3, r1
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2264      	movs	r2, #100	; 0x64
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	1acb      	subs	r3, r1, r3
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <UART_SetConfig+0x2d4>)
 80026f8:	fba3 2302 	umull	r2, r3, r3, r2
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002704:	441c      	add	r4, r3
 8002706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002710:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002718:	4642      	mov	r2, r8
 800271a:	464b      	mov	r3, r9
 800271c:	1891      	adds	r1, r2, r2
 800271e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002720:	415b      	adcs	r3, r3
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002728:	4641      	mov	r1, r8
 800272a:	1851      	adds	r1, r2, r1
 800272c:	6339      	str	r1, [r7, #48]	; 0x30
 800272e:	4649      	mov	r1, r9
 8002730:	414b      	adcs	r3, r1
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002740:	4659      	mov	r1, fp
 8002742:	00cb      	lsls	r3, r1, #3
 8002744:	4651      	mov	r1, sl
 8002746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800274a:	4651      	mov	r1, sl
 800274c:	00ca      	lsls	r2, r1, #3
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	4603      	mov	r3, r0
 8002754:	4642      	mov	r2, r8
 8002756:	189b      	adds	r3, r3, r2
 8002758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800275c:	464b      	mov	r3, r9
 800275e:	460a      	mov	r2, r1
 8002760:	eb42 0303 	adc.w	r3, r2, r3
 8002764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002774:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800277c:	460b      	mov	r3, r1
 800277e:	18db      	adds	r3, r3, r3
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	4613      	mov	r3, r2
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800278e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002792:	f7fd fd7d 	bl	8000290 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <UART_SetConfig+0x2d4>)
 800279c:	fba3 1302 	umull	r1, r3, r3, r2
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	2164      	movs	r1, #100	; 0x64
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	3332      	adds	r3, #50	; 0x32
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <UART_SetConfig+0x2d4>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4422      	add	r2, r4
 80027c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027c4:	e106      	b.n	80029d4 <UART_SetConfig+0x4d8>
 80027c6:	bf00      	nop
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40011400 	.word	0x40011400
 80027d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	6239      	str	r1, [r7, #32]
 80027ee:	415b      	adcs	r3, r3
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027f6:	4641      	mov	r1, r8
 80027f8:	1854      	adds	r4, r2, r1
 80027fa:	4649      	mov	r1, r9
 80027fc:	eb43 0501 	adc.w	r5, r3, r1
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	00eb      	lsls	r3, r5, #3
 800280a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280e:	00e2      	lsls	r2, r4, #3
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	4643      	mov	r3, r8
 8002816:	18e3      	adds	r3, r4, r3
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800281c:	464b      	mov	r3, r9
 800281e:	eb45 0303 	adc.w	r3, r5, r3
 8002822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002842:	4629      	mov	r1, r5
 8002844:	008b      	lsls	r3, r1, #2
 8002846:	4621      	mov	r1, r4
 8002848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284c:	4621      	mov	r1, r4
 800284e:	008a      	lsls	r2, r1, #2
 8002850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002854:	f7fd fd1c 	bl	8000290 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4b60      	ldr	r3, [pc, #384]	; (80029e0 <UART_SetConfig+0x4e4>)
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	011c      	lsls	r4, r3, #4
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	1891      	adds	r1, r2, r2
 800287e:	61b9      	str	r1, [r7, #24]
 8002880:	415b      	adcs	r3, r3
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002888:	4641      	mov	r1, r8
 800288a:	1851      	adds	r1, r2, r1
 800288c:	6139      	str	r1, [r7, #16]
 800288e:	4649      	mov	r1, r9
 8002890:	414b      	adcs	r3, r1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a0:	4659      	mov	r1, fp
 80028a2:	00cb      	lsls	r3, r1, #3
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028aa:	4651      	mov	r1, sl
 80028ac:	00ca      	lsls	r2, r1, #3
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	4642      	mov	r2, r8
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028bc:	464b      	mov	r3, r9
 80028be:	460a      	mov	r2, r1
 80028c0:	eb42 0303 	adc.w	r3, r2, r3
 80028c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028e0:	4649      	mov	r1, r9
 80028e2:	008b      	lsls	r3, r1, #2
 80028e4:	4641      	mov	r1, r8
 80028e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ea:	4641      	mov	r1, r8
 80028ec:	008a      	lsls	r2, r1, #2
 80028ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028f2:	f7fd fccd 	bl	8000290 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <UART_SetConfig+0x4e4>)
 80028fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2264      	movs	r2, #100	; 0x64
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	1acb      	subs	r3, r1, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	3332      	adds	r3, #50	; 0x32
 8002910:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <UART_SetConfig+0x4e4>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291c:	441c      	add	r4, r3
 800291e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002922:	2200      	movs	r2, #0
 8002924:	673b      	str	r3, [r7, #112]	; 0x70
 8002926:	677a      	str	r2, [r7, #116]	; 0x74
 8002928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	415b      	adcs	r3, r3
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800293c:	4641      	mov	r1, r8
 800293e:	1851      	adds	r1, r2, r1
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	4649      	mov	r1, r9
 8002944:	414b      	adcs	r3, r1
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002954:	4659      	mov	r1, fp
 8002956:	00cb      	lsls	r3, r1, #3
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295e:	4651      	mov	r1, sl
 8002960:	00ca      	lsls	r2, r1, #3
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	4603      	mov	r3, r0
 8002968:	4642      	mov	r2, r8
 800296a:	189b      	adds	r3, r3, r2
 800296c:	66bb      	str	r3, [r7, #104]	; 0x68
 800296e:	464b      	mov	r3, r9
 8002970:	460a      	mov	r2, r1
 8002972:	eb42 0303 	adc.w	r3, r2, r3
 8002976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	663b      	str	r3, [r7, #96]	; 0x60
 8002982:	667a      	str	r2, [r7, #100]	; 0x64
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002990:	4649      	mov	r1, r9
 8002992:	008b      	lsls	r3, r1, #2
 8002994:	4641      	mov	r1, r8
 8002996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299a:	4641      	mov	r1, r8
 800299c:	008a      	lsls	r2, r1, #2
 800299e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029a2:	f7fd fc75 	bl	8000290 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <UART_SetConfig+0x4e4>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	2164      	movs	r1, #100	; 0x64
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <UART_SetConfig+0x4e4>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	f003 020f 	and.w	r2, r3, #15
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4422      	add	r2, r4
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029da:	46bd      	mov	sp, r7
 80029dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029e0:	51eb851f 	.word	0x51eb851f

080029e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029e8:	f000 fe0e 	bl	8003608 <vTaskStartScheduler>
  
  return osOK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f103 0208 	add.w	r2, r3, #8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f103 0208 	add.w	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f103 0208 	add.w	r2, r3, #8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d103      	bne.n	8002ab4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e00c      	b.n	8002ace <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e002      	b.n	8002ac2 <vListInsert+0x2e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d2f6      	bcs.n	8002abc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6892      	ldr	r2, [r2, #8]
 8002b1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d103      	bne.n	8002b3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b86:	f001 fbc5 	bl	8004314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	441a      	add	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	441a      	add	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d114      	bne.n	8002c06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01a      	beq.n	8002c1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3310      	adds	r3, #16
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 ff9f 	bl	8003b2c <xTaskRemoveFromEventList>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <xQueueGenericReset+0xcc>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	e009      	b.n	8002c1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3310      	adds	r3, #16
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fef1 	bl	80029f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3324      	adds	r3, #36	; 0x24
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff feec 	bl	80029f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c1a:	f001 fbab 	bl	8004374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	e000ed04 	.word	0xe000ed04

08002c2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	613b      	str	r3, [r7, #16]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3350      	adds	r3, #80	; 0x50
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fc37 	bl	80044d8 <pvPortMalloc>
 8002c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3350      	adds	r3, #80	; 0x50
 8002c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f805 	bl	8002ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c96:	69bb      	ldr	r3, [r7, #24]
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e002      	b.n	8002cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cce:	2101      	movs	r1, #1
 8002cd0:	69b8      	ldr	r0, [r7, #24]
 8002cd2:	f7ff ff43 	bl	8002b5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <xQueueGenericSend+0x32>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <xQueueGenericSend+0x40>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <xQueueGenericSend+0x44>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <xQueueGenericSend+0x46>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <xQueueGenericSend+0x60>
	__asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x6e>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <xQueueGenericSend+0x72>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGenericSend+0x74>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	623b      	str	r3, [r7, #32]
}
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d76:	f001 f895 	bl	8003ea4 <xTaskGetSchedulerState>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <xQueueGenericSend+0x9e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0xa2>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericSend+0xa4>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61fb      	str	r3, [r7, #28]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002da6:	f001 fab5 	bl	8004314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <xQueueGenericSend+0xd4>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d129      	bne.n	8002e10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc2:	f000 f96f 	bl	80030a4 <prvCopyDataToQueue>
 8002dc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3324      	adds	r3, #36	; 0x24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fea9 	bl	8003b2c <xTaskRemoveFromEventList>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <xQueueGenericSend+0x1f8>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	e00a      	b.n	8002e08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <xQueueGenericSend+0x1f8>)
 8002dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e08:	f001 fab4 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e063      	b.n	8002ed8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e16:	f001 faad 	bl	8004374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e05c      	b.n	8002ed8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fee1 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e32:	f001 fa9f 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e36:	f000 fc49 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e3a:	f001 fa6b 	bl	8004314 <vPortEnterCritical>
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d103      	bne.n	8002e54 <xQueueGenericSend+0x16c>
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x182>
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6a:	f001 fa83 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e6e:	1d3a      	adds	r2, r7, #4
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fed0 	bl	8003c1c <xTaskCheckForTimeOut>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d124      	bne.n	8002ecc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e84:	f000 fa06 	bl	8003294 <prvIsQueueFull>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	3310      	adds	r3, #16
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fe24 	bl	8003ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e9e:	f000 f991 	bl	80031c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ea2:	f000 fc21 	bl	80036e8 <xTaskResumeAll>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f af7c 	bne.w	8002da6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <xQueueGenericSend+0x1f8>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	e772      	b.n	8002da6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec2:	f000 f97f 	bl	80031c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ec6:	f000 fc0f 	bl	80036e8 <xTaskResumeAll>
 8002eca:	e76c      	b.n	8002da6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ece:	f000 f979 	bl	80031c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ed2:	f000 fc09 	bl	80036e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ed6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	; 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <xQueueReceive+0x30>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	623b      	str	r3, [r7, #32]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <xQueueReceive+0x3e>
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <xQueueReceive+0x42>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueReceive+0x44>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueReceive+0x5e>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	61fb      	str	r3, [r7, #28]
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f42:	f000 ffaf 	bl	8003ea4 <xTaskGetSchedulerState>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <xQueueReceive+0x6e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <xQueueReceive+0x72>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueReceive+0x74>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueReceive+0x8e>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f72:	f001 f9cf 	bl	8004314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01f      	beq.n	8002fc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f86:	f000 f8f7 	bl	8003178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00f      	beq.n	8002fba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	3310      	adds	r3, #16
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fdc4 	bl	8003b2c <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <xQueueReceive+0x1bc>)
 8002fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fba:	f001 f9db 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e069      	b.n	8003096 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc8:	f001 f9d4 	bl	8004374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e062      	b.n	8003096 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fe08 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fe4:	f001 f9c6 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe8:	f000 fb70 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fec:	f001 f992 	bl	8004314 <vPortEnterCritical>
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d103      	bne.n	8003006 <xQueueReceive+0x122>
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d103      	bne.n	800301c <xQueueReceive+0x138>
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800301c:	f001 f9aa 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003020:	1d3a      	adds	r2, r7, #4
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fdf7 	bl	8003c1c <xTaskCheckForTimeOut>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d123      	bne.n	800307c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003036:	f000 f917 	bl	8003268 <prvIsQueueEmpty>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fd4b 	bl	8003ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800304e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003050:	f000 f8b8 	bl	80031c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003054:	f000 fb48 	bl	80036e8 <xTaskResumeAll>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d189      	bne.n	8002f72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <xQueueReceive+0x1bc>)
 8003060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	e780      	b.n	8002f72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003072:	f000 f8a7 	bl	80031c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003076:	f000 fb37 	bl	80036e8 <xTaskResumeAll>
 800307a:	e77a      	b.n	8002f72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800307c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307e:	f000 f8a1 	bl	80031c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003082:	f000 fb31 	bl	80036e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003088:	f000 f8ee 	bl	8003268 <prvIsQueueEmpty>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f43f af6f 	beq.w	8002f72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003096:	4618      	mov	r0, r3
 8003098:	3730      	adds	r7, #48	; 0x30
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d14d      	bne.n	8003166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ff06 	bl	8003ee0 <xTaskPriorityDisinherit>
 80030d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e043      	b.n	8003166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d119      	bne.n	8003118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6858      	ldr	r0, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	461a      	mov	r2, r3
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	f002 fcb3 	bl	8005a5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d32b      	bcc.n	8003166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e026      	b.n	8003166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68d8      	ldr	r0, [r3, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	461a      	mov	r2, r3
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	f002 fc99 	bl	8005a5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	425b      	negs	r3, r3
 8003132:	441a      	add	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	425b      	negs	r3, r3
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d105      	bne.n	8003166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3b01      	subs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d303      	bcc.n	80031ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68d9      	ldr	r1, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	461a      	mov	r2, r3
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f002 fc4f 	bl	8005a5a <memcpy>
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031cc:	f001 f8a2 	bl	8004314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031d8:	e011      	b.n	80031fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3324      	adds	r3, #36	; 0x24
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fca0 	bl	8003b2c <xTaskRemoveFromEventList>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031f2:	f000 fd75 	bl	8003ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dce9      	bgt.n	80031da <prvUnlockQueue+0x16>
 8003206:	e000      	b.n	800320a <prvUnlockQueue+0x46>
					break;
 8003208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	22ff      	movs	r2, #255	; 0xff
 800320e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003212:	f001 f8af 	bl	8004374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003216:	f001 f87d 	bl	8004314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003222:	e011      	b.n	8003248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3310      	adds	r3, #16
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fc7b 	bl	8003b2c <xTaskRemoveFromEventList>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800323c:	f000 fd50 	bl	8003ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	3b01      	subs	r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800324c:	2b00      	cmp	r3, #0
 800324e:	dce9      	bgt.n	8003224 <prvUnlockQueue+0x60>
 8003250:	e000      	b.n	8003254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800325c:	f001 f88a 	bl	8004374 <vPortExitCritical>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003270:	f001 f850 	bl	8004314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800327c:	2301      	movs	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e001      	b.n	8003286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003286:	f001 f875 	bl	8004374 <vPortExitCritical>

	return xReturn;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800329c:	f001 f83a 	bl	8004314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d102      	bne.n	80032b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e001      	b.n	80032b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032b6:	f001 f85d 	bl	8004374 <vPortExitCritical>

	return xReturn;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af04      	add	r7, sp, #16
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	623b      	str	r3, [r7, #32]
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xTaskCreateStatic+0x46>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	61fb      	str	r3, [r7, #28]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800330a:	2360      	movs	r3, #96	; 0x60
 800330c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b60      	cmp	r3, #96	; 0x60
 8003312:	d00a      	beq.n	800332a <xTaskCreateStatic+0x66>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61bb      	str	r3, [r7, #24]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800332a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01e      	beq.n	8003370 <xTaskCreateStatic+0xac>
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003340:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	2202      	movs	r2, #2
 8003346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800334a:	2300      	movs	r3, #0
 800334c:	9303      	str	r3, [sp, #12]
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f850 	bl	8003408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800336a:	f000 f8df 	bl	800352c <prvAddNewTaskToReadyList>
 800336e:	e001      	b.n	8003374 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003374:	697b      	ldr	r3, [r7, #20]
	}
 8003376:	4618      	mov	r0, r3
 8003378:	3728      	adds	r7, #40	; 0x28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800337e:	b580      	push	{r7, lr}
 8003380:	b08c      	sub	sp, #48	; 0x30
 8003382:	af04      	add	r7, sp, #16
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4618      	mov	r0, r3
 8003394:	f001 f8a0 	bl	80044d8 <pvPortMalloc>
 8003398:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033a0:	2060      	movs	r0, #96	; 0x60
 80033a2:	f001 f899 	bl	80044d8 <pvPortMalloc>
 80033a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
 80033b4:	e005      	b.n	80033c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f001 f95a 	bl	8004670 <vPortFree>
 80033bc:	e001      	b.n	80033c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033d0:	88fa      	ldrh	r2, [r7, #6]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9303      	str	r3, [sp, #12]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	9302      	str	r3, [sp, #8]
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f80e 	bl	8003408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033ec:	69f8      	ldr	r0, [r7, #28]
 80033ee:	f000 f89d 	bl	800352c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e002      	b.n	80033fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	21a5      	movs	r1, #165	; 0xa5
 8003422:	f002 fa8e 	bl	8005942 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003430:	3b01      	subs	r3, #1
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <prvInitialiseNewTask+0x58>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	617b      	str	r3, [r7, #20]
}
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01f      	beq.n	80034a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e012      	b.n	8003492 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	7819      	ldrb	r1, [r3, #0]
 8003474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	3334      	adds	r3, #52	; 0x34
 800347c:	460a      	mov	r2, r1
 800347e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	3301      	adds	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d9e9      	bls.n	800346c <prvInitialiseNewTask+0x64>
 8003498:	e000      	b.n	800349c <prvInitialiseNewTask+0x94>
			{
				break;
 800349a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a4:	e003      	b.n	80034ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d901      	bls.n	80034b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034b4:	2306      	movs	r3, #6
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2200      	movs	r2, #0
 80034c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	3304      	adds	r3, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff faaf 	bl	8002a32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	3318      	adds	r3, #24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff faaa 	bl	8002a32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	f1c3 0207 	rsb	r2, r3, #7
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	2200      	movs	r2, #0
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	2200      	movs	r2, #0
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	2200      	movs	r2, #0
 8003504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	69b8      	ldr	r0, [r7, #24]
 800350e:	f000 fdd3 	bl	80040b8 <pxPortInitialiseStack>
 8003512:	4602      	mov	r2, r0
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003524:	bf00      	nop
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003534:	f000 feee 	bl	8004314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <prvAddNewTaskToReadyList+0xc0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <prvAddNewTaskToReadyList+0xc0>)
 8003540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800354a:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <prvAddNewTaskToReadyList+0xc0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d110      	bne.n	800357a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003558:	f000 fbe6 	bl	8003d28 <prvInitialiseTaskLists>
 800355c:	e00d      	b.n	800357a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <prvAddNewTaskToReadyList+0xc8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	429a      	cmp	r2, r3
 8003572:	d802      	bhi.n	800357a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800357a:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <prvAddNewTaskToReadyList+0xcc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <prvAddNewTaskToReadyList+0xcc>)
 8003582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <prvAddNewTaskToReadyList+0xcc>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <prvAddNewTaskToReadyList+0xd0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <prvAddNewTaskToReadyList+0xd0>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <prvAddNewTaskToReadyList+0xd4>)
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7ff fa49 	bl	8002a4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035ba:	f000 fedb 	bl	8004374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <prvAddNewTaskToReadyList+0xc8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <prvAddNewTaskToReadyList+0xd8>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200004ec 	.word	0x200004ec
 80035f0:	200003ec 	.word	0x200003ec
 80035f4:	200004f8 	.word	0x200004f8
 80035f8:	20000508 	.word	0x20000508
 80035fc:	200004f4 	.word	0x200004f4
 8003600:	200003f0 	.word	0x200003f0
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003616:	463a      	mov	r2, r7
 8003618:	1d39      	adds	r1, r7, #4
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ffb4 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	9202      	str	r2, [sp, #8]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	460a      	mov	r2, r1
 8003636:	491f      	ldr	r1, [pc, #124]	; (80036b4 <vTaskStartScheduler+0xac>)
 8003638:	481f      	ldr	r0, [pc, #124]	; (80036b8 <vTaskStartScheduler+0xb0>)
 800363a:	f7ff fe43 	bl	80032c4 <xTaskCreateStatic>
 800363e:	4603      	mov	r3, r0
 8003640:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <vTaskStartScheduler+0xb4>)
 8003642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <vTaskStartScheduler+0xb4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e001      	b.n	8003656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d118      	bne.n	800368e <vTaskStartScheduler+0x86>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	613b      	str	r3, [r7, #16]
}
 800366e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <vTaskStartScheduler+0xb8>)
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <vTaskStartScheduler+0xbc>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <vTaskStartScheduler+0xc0>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003684:	f7fd f904 	bl	8000890 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003688:	f000 fda2 	bl	80041d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800368c:	e00e      	b.n	80036ac <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d10a      	bne.n	80036ac <vTaskStartScheduler+0xa4>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	60fb      	str	r3, [r7, #12]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <vTaskStartScheduler+0xa2>
}
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	08006658 	.word	0x08006658
 80036b8:	08003cf9 	.word	0x08003cf9
 80036bc:	20000510 	.word	0x20000510
 80036c0:	2000050c 	.word	0x2000050c
 80036c4:	200004f8 	.word	0x200004f8
 80036c8:	200004f0 	.word	0x200004f0

080036cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <vTaskSuspendAll+0x18>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a03      	ldr	r2, [pc, #12]	; (80036e4 <vTaskSuspendAll+0x18>)
 80036d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	20000514 	.word	0x20000514

080036e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <xTaskResumeAll+0x114>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <xTaskResumeAll+0x2c>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	603b      	str	r3, [r7, #0]
}
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003714:	f000 fdfe 	bl	8004314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003718:	4b38      	ldr	r3, [pc, #224]	; (80037fc <xTaskResumeAll+0x114>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	4a37      	ldr	r2, [pc, #220]	; (80037fc <xTaskResumeAll+0x114>)
 8003720:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <xTaskResumeAll+0x114>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d161      	bne.n	80037ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800372a:	4b35      	ldr	r3, [pc, #212]	; (8003800 <xTaskResumeAll+0x118>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d05d      	beq.n	80037ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003732:	e02e      	b.n	8003792 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <xTaskResumeAll+0x11c>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3318      	adds	r3, #24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff f9e0 	bl	8002b06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3304      	adds	r3, #4
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff f9db 	bl	8002b06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <xTaskResumeAll+0x120>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4313      	orrs	r3, r2
 800375e:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <xTaskResumeAll+0x120>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4a27      	ldr	r2, [pc, #156]	; (800380c <xTaskResumeAll+0x124>)
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f7ff f967 	bl	8002a4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <xTaskResumeAll+0x128>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	429a      	cmp	r2, r3
 800378a:	d302      	bcc.n	8003792 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <xTaskResumeAll+0x12c>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <xTaskResumeAll+0x11c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1cc      	bne.n	8003734 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037a0:	f000 fb60 	bl	8003e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <xTaskResumeAll+0x130>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d010      	beq.n	80037d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037b0:	f000 f86a 	bl	8003888 <xTaskIncrementTick>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80037ba:	4b16      	ldr	r3, [pc, #88]	; (8003814 <xTaskResumeAll+0x12c>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f1      	bne.n	80037b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <xTaskResumeAll+0x130>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <xTaskResumeAll+0x12c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037da:	2301      	movs	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <xTaskResumeAll+0x134>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037ee:	f000 fdc1 	bl	8004374 <vPortExitCritical>

	return xAlreadyYielded;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000514 	.word	0x20000514
 8003800:	200004ec 	.word	0x200004ec
 8003804:	200004ac 	.word	0x200004ac
 8003808:	200004f4 	.word	0x200004f4
 800380c:	200003f0 	.word	0x200003f0
 8003810:	200003ec 	.word	0x200003ec
 8003814:	20000500 	.word	0x20000500
 8003818:	200004fc 	.word	0x200004fc
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <xTaskGetTickCount+0x1c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800382c:	687b      	ldr	r3, [r7, #4]
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	200004f0 	.word	0x200004f0

08003840 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <pcTaskGetName+0x14>
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <pcTaskGetName+0x44>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e000      	b.n	8003856 <pcTaskGetName+0x16>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <pcTaskGetName+0x34>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60bb      	str	r3, [r7, #8]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3334      	adds	r3, #52	; 0x34
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	200003ec 	.word	0x200003ec

08003888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003892:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <xTaskIncrementTick+0x144>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 808e 	bne.w	80039b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <xTaskIncrementTick+0x148>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038a4:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <xTaskIncrementTick+0x148>)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d120      	bne.n	80038f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038b0:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <xTaskIncrementTick+0x14c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	603b      	str	r3, [r7, #0]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <xTaskIncrementTick+0x46>
 80038d0:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <xTaskIncrementTick+0x14c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <xTaskIncrementTick+0x150>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3e      	ldr	r2, [pc, #248]	; (80039d4 <xTaskIncrementTick+0x14c>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4a3e      	ldr	r2, [pc, #248]	; (80039d8 <xTaskIncrementTick+0x150>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <xTaskIncrementTick+0x154>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <xTaskIncrementTick+0x154>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	f000 fab9 	bl	8003e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038f2:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <xTaskIncrementTick+0x158>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d348      	bcc.n	800398e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <xTaskIncrementTick+0x14c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <xTaskIncrementTick+0x158>)
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	601a      	str	r2, [r3, #0]
					break;
 800390e:	e03e      	b.n	800398e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <xTaskIncrementTick+0x14c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d203      	bcs.n	8003930 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003928:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <xTaskIncrementTick+0x158>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800392e:	e02e      	b.n	800398e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff f8e6 	bl	8002b06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3318      	adds	r3, #24
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff f8dd 	bl	8002b06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	2201      	movs	r2, #1
 8003952:	409a      	lsls	r2, r3
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <xTaskIncrementTick+0x15c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <xTaskIncrementTick+0x15c>)
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <xTaskIncrementTick+0x160>)
 800396c:	441a      	add	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3304      	adds	r3, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f7ff f869 	bl	8002a4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <xTaskIncrementTick+0x164>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	429a      	cmp	r2, r3
 8003986:	d3b9      	bcc.n	80038fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800398c:	e7b6      	b.n	80038fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <xTaskIncrementTick+0x164>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4914      	ldr	r1, [pc, #80]	; (80039e8 <xTaskIncrementTick+0x160>)
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d901      	bls.n	80039aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <xTaskIncrementTick+0x168>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e004      	b.n	80039c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <xTaskIncrementTick+0x16c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <xTaskIncrementTick+0x16c>)
 80039c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000514 	.word	0x20000514
 80039d0:	200004f0 	.word	0x200004f0
 80039d4:	200004a4 	.word	0x200004a4
 80039d8:	200004a8 	.word	0x200004a8
 80039dc:	20000504 	.word	0x20000504
 80039e0:	2000050c 	.word	0x2000050c
 80039e4:	200004f4 	.word	0x200004f4
 80039e8:	200003f0 	.word	0x200003f0
 80039ec:	200003ec 	.word	0x200003ec
 80039f0:	20000500 	.word	0x20000500
 80039f4:	200004fc 	.word	0x200004fc

080039f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039fe:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <vTaskSwitchContext+0xd0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <vTaskSwitchContext+0xd4>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a0c:	e058      	b.n	8003ac0 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8003a0e:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <vTaskSwitchContext+0xd4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003a14:	f7fc ff48 	bl	80008a8 <getRunTimeCounterValue>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <vTaskSwitchContext+0xd8>)
 8003a1c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <vTaskSwitchContext+0xd8>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <vTaskSwitchContext+0xdc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d909      	bls.n	8003a3e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <vTaskSwitchContext+0xe0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <vTaskSwitchContext+0xd8>)
 8003a32:	6810      	ldr	r0, [r2, #0]
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <vTaskSwitchContext+0xdc>)
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	1a82      	subs	r2, r0, r2
 8003a3a:	440a      	add	r2, r1
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <vTaskSwitchContext+0xd8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <vTaskSwitchContext+0xdc>)
 8003a44:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a46:	4b25      	ldr	r3, [pc, #148]	; (8003adc <vTaskSwitchContext+0xe4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	f1c3 031f 	rsb	r3, r3, #31
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	4920      	ldr	r1, [pc, #128]	; (8003ae0 <vTaskSwitchContext+0xe8>)
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <vTaskSwitchContext+0x8e>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	607b      	str	r3, [r7, #4]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <vTaskSwitchContext+0x8c>
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <vTaskSwitchContext+0xe8>)
 8003a92:	4413      	add	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d104      	bne.n	8003ab6 <vTaskSwitchContext+0xbe>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <vTaskSwitchContext+0xe0>)
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000514 	.word	0x20000514
 8003acc:	20000500 	.word	0x20000500
 8003ad0:	2000051c 	.word	0x2000051c
 8003ad4:	20000518 	.word	0x20000518
 8003ad8:	200003ec 	.word	0x200003ec
 8003adc:	200004f4 	.word	0x200004f4
 8003ae0:	200003f0 	.word	0x200003f0

08003ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <vTaskPlaceOnEventList+0x44>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe ffbe 	bl	8002a94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b18:	2101      	movs	r1, #1
 8003b1a:	6838      	ldr	r0, [r7, #0]
 8003b1c:	f000 fa66 	bl	8003fec <prvAddCurrentTaskToDelayedList>
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200003ec 	.word	0x200003ec

08003b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	60fb      	str	r3, [r7, #12]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe ffd2 	bl	8002b06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <xTaskRemoveFromEventList+0xac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11c      	bne.n	8003ba4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe ffc9 	bl	8002b06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <xTaskRemoveFromEventList+0xb0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <xTaskRemoveFromEventList+0xb0>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <xTaskRemoveFromEventList+0xb4>)
 8003b94:	441a      	add	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe ff55 	bl	8002a4c <vListInsertEnd>
 8003ba2:	e005      	b.n	8003bb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	480e      	ldr	r0, [pc, #56]	; (8003be4 <xTaskRemoveFromEventList+0xb8>)
 8003bac:	f7fe ff4e 	bl	8002a4c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <xTaskRemoveFromEventList+0xbc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d905      	bls.n	8003bca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <xTaskRemoveFromEventList+0xc0>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e001      	b.n	8003bce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000514 	.word	0x20000514
 8003bdc:	200004f4 	.word	0x200004f4
 8003be0:	200003f0 	.word	0x200003f0
 8003be4:	200004ac 	.word	0x200004ac
 8003be8:	200003ec 	.word	0x200003ec
 8003bec:	20000500 	.word	0x20000500

08003bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <vTaskInternalSetTimeOutState+0x24>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <vTaskInternalSetTimeOutState+0x28>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000504 	.word	0x20000504
 8003c18:	200004f0 	.word	0x200004f0

08003c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	60fb      	str	r3, [r7, #12]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c5e:	f000 fb59 	bl	8004314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <xTaskCheckForTimeOut+0xbc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d102      	bne.n	8003c82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e023      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <xTaskCheckForTimeOut+0xc0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d007      	beq.n	8003c9e <xTaskCheckForTimeOut+0x82>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e015      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d20b      	bcs.n	8003cc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff9b 	bl	8003bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e004      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f000 fb53 	bl	8004374 <vPortExitCritical>

	return xReturn;
 8003cce:	69fb      	ldr	r3, [r7, #28]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200004f0 	.word	0x200004f0
 8003cdc:	20000504 	.word	0x20000504

08003ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <vTaskMissedYield+0x14>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000500 	.word	0x20000500

08003cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d00:	f000 f852 	bl	8003da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <prvIdleTask+0x28>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d9f9      	bls.n	8003d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <prvIdleTask+0x2c>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d1c:	e7f0      	b.n	8003d00 <prvIdleTask+0x8>
 8003d1e:	bf00      	nop
 8003d20:	200003f0 	.word	0x200003f0
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	e00c      	b.n	8003d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <prvInitialiseTaskLists+0x60>)
 8003d40:	4413      	add	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fe55 	bl	80029f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d9ef      	bls.n	8003d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d56:	f7fe fe4c 	bl	80029f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5a:	480d      	ldr	r0, [pc, #52]	; (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d5c:	f7fe fe49 	bl	80029f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <prvInitialiseTaskLists+0x6c>)
 8003d62:	f7fe fe46 	bl	80029f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d66:	480c      	ldr	r0, [pc, #48]	; (8003d98 <prvInitialiseTaskLists+0x70>)
 8003d68:	f7fe fe43 	bl	80029f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d6c:	480b      	ldr	r0, [pc, #44]	; (8003d9c <prvInitialiseTaskLists+0x74>)
 8003d6e:	f7fe fe40 	bl	80029f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <prvInitialiseTaskLists+0x78>)
 8003d74:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <prvInitialiseTaskLists+0x7c>)
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200003f0 	.word	0x200003f0
 8003d8c:	2000047c 	.word	0x2000047c
 8003d90:	20000490 	.word	0x20000490
 8003d94:	200004ac 	.word	0x200004ac
 8003d98:	200004c0 	.word	0x200004c0
 8003d9c:	200004d8 	.word	0x200004d8
 8003da0:	200004a4 	.word	0x200004a4
 8003da4:	200004a8 	.word	0x200004a8

08003da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dae:	e019      	b.n	8003de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db0:	f000 fab0 	bl	8004314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <prvCheckTasksWaitingTermination+0x50>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fea0 	bl	8002b06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dda:	f000 facb 	bl	8004374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f810 	bl	8003e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e1      	bne.n	8003db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200004c0 	.word	0x200004c0
 8003dfc:	200004ec 	.word	0x200004ec
 8003e00:	200004d4 	.word	0x200004d4

08003e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fc28 	bl	8004670 <vPortFree>
				vPortFree( pxTCB );
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fc25 	bl	8004670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e26:	e018      	b.n	8003e5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d103      	bne.n	8003e3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fc1c 	bl	8004670 <vPortFree>
	}
 8003e38:	e00f      	b.n	8003e5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d00a      	beq.n	8003e5a <prvDeleteTCB+0x56>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60fb      	str	r3, [r7, #12]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <prvDeleteTCB+0x54>
	}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <prvResetNextTaskUnblockTime+0x38>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e7c:	e008      	b.n	8003e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <prvResetNextTaskUnblockTime+0x38>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	200004a4 	.word	0x200004a4
 8003ea0:	2000050c 	.word	0x2000050c

08003ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <xTaskGetSchedulerState+0x34>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	e008      	b.n	8003eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <xTaskGetSchedulerState+0x38>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	e001      	b.n	8003eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eca:	687b      	ldr	r3, [r7, #4]
	}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	200004f8 	.word	0x200004f8
 8003edc:	20000514 	.word	0x20000514

08003ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d06e      	beq.n	8003fd4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <xTaskPriorityDisinherit+0x100>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d00a      	beq.n	8003f16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d044      	beq.n	8003fd4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d140      	bne.n	8003fd4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fdd5 	bl	8002b06 <uxListRemove>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d115      	bne.n	8003f8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	491f      	ldr	r1, [pc, #124]	; (8003fe4 <xTaskPriorityDisinherit+0x104>)
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <xTaskPriorityDisinherit+0xae>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003f8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	f1c3 0207 	rsb	r2, r3, #7
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <xTaskPriorityDisinherit+0x104>)
 8003fc2:	441a      	add	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7fe fd3e 	bl	8002a4c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fd4:	697b      	ldr	r3, [r7, #20]
	}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200003ec 	.word	0x200003ec
 8003fe4:	200003f0 	.word	0x200003f0
 8003fe8:	200004f4 	.word	0x200004f4

08003fec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fd7f 	bl	8002b06 <uxListRemove>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2201      	movs	r2, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4013      	ands	r3, r2
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004024:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d10a      	bne.n	8004044 <prvAddCurrentTaskToDelayedList+0x58>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	481a      	ldr	r0, [pc, #104]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800403e:	f7fe fd05 	bl	8002a4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004042:	e026      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d209      	bcs.n	8004070 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe fd13 	bl	8002a94 <vListInsert>
}
 800406e:	e010      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe fd09 	bl	8002a94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d202      	bcs.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200004f0 	.word	0x200004f0
 80040a0:	200003ec 	.word	0x200003ec
 80040a4:	200004f4 	.word	0x200004f4
 80040a8:	200004d8 	.word	0x200004d8
 80040ac:	200004a8 	.word	0x200004a8
 80040b0:	200004a4 	.word	0x200004a4
 80040b4:	2000050c 	.word	0x2000050c

080040b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b04      	subs	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b04      	subs	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <pxPortInitialiseStack+0x64>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b14      	subs	r3, #20
 80040f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3b04      	subs	r3, #4
 80040fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f06f 0202 	mvn.w	r2, #2
 8004106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b20      	subs	r3, #32
 800410c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	08004121 	.word	0x08004121

08004120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <prvTaskExitError+0x54>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d00a      	beq.n	800414a <prvTaskExitError+0x2a>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	60fb      	str	r3, [r7, #12]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <prvTaskExitError+0x28>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60bb      	str	r3, [r7, #8]
}
 800415c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800415e:	bf00      	nop
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0fc      	beq.n	8004160 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	2000000c 	.word	0x2000000c
	...

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ca:	bf00      	nop
 80041cc:	e000ed08 	.word	0xe000ed08

080041d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041d6:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <xPortStartScheduler+0x120>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a46      	ldr	r2, [pc, #280]	; (80042f4 <xPortStartScheduler+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10a      	bne.n	80041f6 <xPortStartScheduler+0x26>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	613b      	str	r3, [r7, #16]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041f6:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <xPortStartScheduler+0x120>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <xPortStartScheduler+0x128>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10a      	bne.n	8004216 <xPortStartScheduler+0x46>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <xPortStartScheduler+0x12c>)
 8004218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <xPortStartScheduler+0x130>)
 800423c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <xPortStartScheduler+0x134>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004244:	e009      	b.n	800425a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <xPortStartScheduler+0x134>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <xPortStartScheduler+0x134>)
 800424e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d0ef      	beq.n	8004246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <xPortStartScheduler+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1c3 0307 	rsb	r3, r3, #7
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00a      	beq.n	8004288 <xPortStartScheduler+0xb8>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60bb      	str	r3, [r7, #8]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <xPortStartScheduler+0x134>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <xPortStartScheduler+0x134>)
 8004290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004292:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <xPortStartScheduler+0x134>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <xPortStartScheduler+0x134>)
 800429c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <xPortStartScheduler+0x138>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <xPortStartScheduler+0x138>)
 80042ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <xPortStartScheduler+0x138>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <xPortStartScheduler+0x138>)
 80042b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042be:	f000 f8dd 	bl	800447c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <xPortStartScheduler+0x13c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042c8:	f000 f8fc 	bl	80044c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <xPortStartScheduler+0x140>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <xPortStartScheduler+0x140>)
 80042d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042d8:	f7ff ff66 	bl	80041a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042dc:	f7ff fb8c 	bl	80039f8 <vTaskSwitchContext>
	prvTaskExitError();
 80042e0:	f7ff ff1e 	bl	8004120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000ed00 	.word	0xe000ed00
 80042f4:	410fc271 	.word	0x410fc271
 80042f8:	410fc270 	.word	0x410fc270
 80042fc:	e000e400 	.word	0xe000e400
 8004300:	20000520 	.word	0x20000520
 8004304:	20000524 	.word	0x20000524
 8004308:	e000ed20 	.word	0xe000ed20
 800430c:	2000000c 	.word	0x2000000c
 8004310:	e000ef34 	.word	0xe000ef34

08004314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <vPortEnterCritical+0x58>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <vPortEnterCritical+0x58>)
 8004336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <vPortEnterCritical+0x58>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10f      	bne.n	8004360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortEnterCritical+0x5c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <vPortEnterCritical+0x4c>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <vPortEnterCritical+0x4a>
	}
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	2000000c 	.word	0x2000000c
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <vPortExitCritical+0x50>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <vPortExitCritical+0x24>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	607b      	str	r3, [r7, #4]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <vPortExitCritical+0x50>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <vPortExitCritical+0x50>)
 80043a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <vPortExitCritical+0x50>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <vPortExitCritical+0x42>
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c
	...

080043d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043d0:	f3ef 8009 	mrs	r0, PSP
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <pxCurrentTCBConst>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f01e 0f10 	tst.w	lr, #16
 80043e0:	bf08      	it	eq
 80043e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043f4:	f380 8811 	msr	BASEPRI, r0
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f7ff fafa 	bl	80039f8 <vTaskSwitchContext>
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f380 8811 	msr	BASEPRI, r0
 800440c:	bc09      	pop	{r0, r3}
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6808      	ldr	r0, [r1, #0]
 8004412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004416:	f01e 0f10 	tst.w	lr, #16
 800441a:	bf08      	it	eq
 800441c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004420:	f380 8809 	msr	PSP, r0
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst>:
 8004430:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004452:	f7ff fa19 	bl	8003888 <xTaskIncrementTick>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <SysTick_Handler+0x40>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f383 8811 	msr	BASEPRI, r3
}
 800446e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <vPortSetupTimerInterrupt+0x38>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <vPortSetupTimerInterrupt+0x3c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <vPortSetupTimerInterrupt+0x40>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <vPortSetupTimerInterrupt+0x44>)
 800449a:	3b01      	subs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010
 80044b4:	e000e018 	.word	0xe000e018
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044d4 <vPortEnableVFP+0x10>
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ce:	6001      	str	r1, [r0, #0]
 80044d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e000ed88 	.word	0xe000ed88

080044d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044e4:	f7ff f8f2 	bl	80036cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044e8:	4b5b      	ldr	r3, [pc, #364]	; (8004658 <pvPortMalloc+0x180>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044f0:	f000 f920 	bl	8004734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <pvPortMalloc+0x184>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8093 	bne.w	8004628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01d      	beq.n	8004544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004508:	2208      	movs	r2, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d014      	beq.n	8004544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f023 0307 	bic.w	r3, r3, #7
 8004520:	3308      	adds	r3, #8
 8004522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <pvPortMalloc+0x6c>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	617b      	str	r3, [r7, #20]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d06e      	beq.n	8004628 <pvPortMalloc+0x150>
 800454a:	4b45      	ldr	r3, [pc, #276]	; (8004660 <pvPortMalloc+0x188>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d869      	bhi.n	8004628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004554:	4b43      	ldr	r3, [pc, #268]	; (8004664 <pvPortMalloc+0x18c>)
 8004556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <pvPortMalloc+0x18c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800455e:	e004      	b.n	800456a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <pvPortMalloc+0xa4>
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f1      	bne.n	8004560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800457c:	4b36      	ldr	r3, [pc, #216]	; (8004658 <pvPortMalloc+0x180>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	429a      	cmp	r2, r3
 8004584:	d050      	beq.n	8004628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2208      	movs	r2, #8
 800458c:	4413      	add	r3, r2
 800458e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	2308      	movs	r3, #8
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d91f      	bls.n	80045e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <pvPortMalloc+0xf8>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	613b      	str	r3, [r7, #16]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045e2:	69b8      	ldr	r0, [r7, #24]
 80045e4:	f000 f908 	bl	80047f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <pvPortMalloc+0x188>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <pvPortMalloc+0x188>)
 80045f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <pvPortMalloc+0x188>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <pvPortMalloc+0x190>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d203      	bcs.n	800460a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <pvPortMalloc+0x188>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	; (8004668 <pvPortMalloc+0x190>)
 8004608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <pvPortMalloc+0x184>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	431a      	orrs	r2, r3
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <pvPortMalloc+0x194>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <pvPortMalloc+0x194>)
 8004626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004628:	f7ff f85e 	bl	80036e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <pvPortMalloc+0x174>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <pvPortMalloc+0x172>
	return pvReturn;
 800464c:	69fb      	ldr	r3, [r7, #28]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20004130 	.word	0x20004130
 800465c:	20004144 	.word	0x20004144
 8004660:	20004134 	.word	0x20004134
 8004664:	20004128 	.word	0x20004128
 8004668:	20004138 	.word	0x20004138
 800466c:	2000413c 	.word	0x2000413c

08004670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d04d      	beq.n	800471e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004682:	2308      	movs	r3, #8
 8004684:	425b      	negs	r3, r3
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4413      	add	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <vPortFree+0xb8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4013      	ands	r3, r2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <vPortFree+0x44>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <vPortFree+0x62>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	60bb      	str	r3, [r7, #8]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <vPortFree+0xb8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01e      	beq.n	800471e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11a      	bne.n	800471e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <vPortFree+0xb8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	401a      	ands	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046f8:	f7fe ffe8 	bl	80036cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <vPortFree+0xbc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4413      	add	r3, r2
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <vPortFree+0xbc>)
 8004708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800470a:	6938      	ldr	r0, [r7, #16]
 800470c:	f000 f874 	bl	80047f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <vPortFree+0xc0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	4a06      	ldr	r2, [pc, #24]	; (8004730 <vPortFree+0xc0>)
 8004718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800471a:	f7fe ffe5 	bl	80036e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800471e:	bf00      	nop
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20004144 	.word	0x20004144
 800472c:	20004134 	.word	0x20004134
 8004730:	20004140 	.word	0x20004140

08004734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800473a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800473e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <prvHeapInit+0xac>)
 8004742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3307      	adds	r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <prvHeapInit+0xac>)
 8004764:	4413      	add	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <prvHeapInit+0xb0>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <prvHeapInit+0xb0>)
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004780:	2208      	movs	r2, #8
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0307 	bic.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <prvHeapInit+0xb4>)
 8004794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <prvHeapInit+0xb4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <prvHeapInit+0xb4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <prvHeapInit+0xb4>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <prvHeapInit+0xb8>)
 80047c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <prvHeapInit+0xbc>)
 80047ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <prvHeapInit+0xc0>)
 80047ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000528 	.word	0x20000528
 80047e4:	20004128 	.word	0x20004128
 80047e8:	20004130 	.word	0x20004130
 80047ec:	20004138 	.word	0x20004138
 80047f0:	20004134 	.word	0x20004134
 80047f4:	20004144 	.word	0x20004144

080047f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <prvInsertBlockIntoFreeList+0xac>)
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e002      	b.n	800480c <prvInsertBlockIntoFreeList+0x14>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d8f7      	bhi.n	8004806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4413      	add	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d108      	bne.n	800483a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	441a      	add	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d118      	bne.n	8004880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d00d      	beq.n	8004876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e008      	b.n	8004888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e003      	b.n	8004888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d002      	beq.n	8004896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20004128 	.word	0x20004128
 80048a8:	20004130 	.word	0x20004130

080048ac <app_init>:
LedActiveObject_t    ao_led_blue;
LedActiveObject_t    ao_led_green;
InterfaceUserActiveObject_t ao_user_interface;

void app_init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af02      	add	r7, sp, #8
	LOGGER_LOG(p_sys);
 80048b2:	f7ff fd2f 	bl	8004314 <vPortEnterCritical>
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <app_init+0x88>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <app_init+0x8c>)
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	213f      	movs	r1, #63	; 0x3f
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 ffc7 	bl	8005854 <sniprintf>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <app_init+0x90>)
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <app_init+0x88>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f849 	bl	8004968 <logger_log_print_>
 80048d6:	f7ff fd4d 	bl	8004374 <vPortExitCritical>


	button_initialize_ao(&ao_button);
 80048da:	4819      	ldr	r0, [pc, #100]	; (8004940 <app_init+0x94>)
 80048dc:	f000 f858 	bl	8004990 <button_initialize_ao>
	led_initialize_ao(&ao_led_red, "TASK LED RED",RED);
 80048e0:	2201      	movs	r2, #1
 80048e2:	4918      	ldr	r1, [pc, #96]	; (8004944 <app_init+0x98>)
 80048e4:	4818      	ldr	r0, [pc, #96]	; (8004948 <app_init+0x9c>)
 80048e6:	f000 f8dd 	bl	8004aa4 <led_initialize_ao>
	led_initialize_ao(&ao_led_green, "TASK LED GREEN",GREEN);
 80048ea:	2200      	movs	r2, #0
 80048ec:	4917      	ldr	r1, [pc, #92]	; (800494c <app_init+0xa0>)
 80048ee:	4818      	ldr	r0, [pc, #96]	; (8004950 <app_init+0xa4>)
 80048f0:	f000 f8d8 	bl	8004aa4 <led_initialize_ao>
	led_initialize_ao(&ao_led_blue, "TASK LED BLUE",BLUE);
 80048f4:	2202      	movs	r2, #2
 80048f6:	4917      	ldr	r1, [pc, #92]	; (8004954 <app_init+0xa8>)
 80048f8:	4817      	ldr	r0, [pc, #92]	; (8004958 <app_init+0xac>)
 80048fa:	f000 f8d3 	bl	8004aa4 <led_initialize_ao>

	user_interface_initialize_ao(&ao_user_interface, &ao_button, &ao_led_red, &ao_led_green, &ao_led_blue);
 80048fe:	4b16      	ldr	r3, [pc, #88]	; (8004958 <app_init+0xac>)
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <app_init+0xa4>)
 8004904:	4a10      	ldr	r2, [pc, #64]	; (8004948 <app_init+0x9c>)
 8004906:	490e      	ldr	r1, [pc, #56]	; (8004940 <app_init+0x94>)
 8004908:	4814      	ldr	r0, [pc, #80]	; (800495c <app_init+0xb0>)
 800490a:	f000 f9a3 	bl	8004c54 <user_interface_initialize_ao>

    cycle_counter_init();
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <app_init+0xb4>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4a13      	ldr	r2, [pc, #76]	; (8004960 <app_init+0xb4>)
 8004914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004918:	60d3      	str	r3, [r2, #12]
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <app_init+0xb8>)
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <app_init+0xb8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <app_init+0xb8>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6013      	str	r3, [r2, #0]
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	08006828 	.word	0x08006828
 8004938:	20000010 	.word	0x20000010
 800493c:	200041ac 	.word	0x200041ac
 8004940:	20004148 	.word	0x20004148
 8004944:	080066c8 	.word	0x080066c8
 8004948:	20004150 	.word	0x20004150
 800494c:	080066d8 	.word	0x080066d8
 8004950:	20004160 	.word	0x20004160
 8004954:	080066e8 	.word	0x080066e8
 8004958:	20004158 	.word	0x20004158
 800495c:	20004168 	.word	0x20004168
 8004960:	e000edf0 	.word	0xe000edf0
 8004964:	e0001000 	.word	0xe0001000

08004968 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 ff5d 	bl	8005830 <iprintf>
	fflush(stdout);
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <logger_log_print_+0x24>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fe81 	bl	8005684 <fflush>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000088 	.word	0x20000088

08004990 <button_initialize_ao>:
/// | Private variables ------------------------------

void task_button(void *parameters);

void button_initialize_ao(ButtonActiveObject_t *parameters)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	ButtonActiveObject_t* const AO = (ButtonActiveObject_t *)parameters;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	617b      	str	r3, [r7, #20]
    ret = xTaskCreate(task_button,
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	2301      	movs	r3, #1
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ac:	4916      	ldr	r1, [pc, #88]	; (8004a08 <button_initialize_ao+0x78>)
 80049ae:	4817      	ldr	r0, [pc, #92]	; (8004a0c <button_initialize_ao+0x7c>)
 80049b0:	f7fe fce5 	bl	800337e <xTaskCreate>
 80049b4:	6138      	str	r0, [r7, #16]
    				  "Task button",
					  (2 * configMINIMAL_STACK_SIZE),
					  (void *)AO,
					  (tskIDLE_PRIORITY + 1UL),
					  AO->task_button_h);
    configASSERT(ret == pdPASS);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d00a      	beq.n	80049d2 <button_initialize_ao+0x42>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <button_initialize_ao+0x40>

     AO->queue_button_h = xQueueCreate(LENGTH_QUEUE_PULSE, SIZE_QUEUE_PULSE);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2104      	movs	r1, #4
 80049d6:	2005      	movs	r0, #5
 80049d8:	f7fe f928 	bl	8002c2c <xQueueGenericCreate>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	601a      	str	r2, [r3, #0]
    configASSERT (AO->queue_button_h != NULL);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <button_initialize_ao+0x70>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60bb      	str	r3, [r7, #8]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <button_initialize_ao+0x6e>
 }
 8004a00:	bf00      	nop
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	080066f8 	.word	0x080066f8
 8004a0c:	08004a11 	.word	0x08004a11

08004a10 <task_button>:


 void task_button(void *parameters)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	ButtonActiveObject_t* const AO = (ButtonActiveObject_t *)parameters;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	617b      	str	r3, [r7, #20]
	TickType_t time_tick;
	TickType_t check_send;

	while(true)
	{
		if (BUTTON_PRESSED == HAL_GPIO_ReadPin(PORT_BUTTON, PIN_BUTTON))
 8004a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a20:	481c      	ldr	r0, [pc, #112]	; (8004a94 <task_button+0x84>)
 8004a22:	f7fc fbe5 	bl	80011f0 <HAL_GPIO_ReadPin>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f7      	bne.n	8004a1c <task_button+0xc>
		{
			time_tick = xTaskGetTickCount();
 8004a2c:	f7fe fef8 	bl	8003820 <xTaskGetTickCount>
 8004a30:	4603      	mov	r3, r0
 8004a32:	60fb      	str	r3, [r7, #12]
			while (BUTTON_PRESSED == HAL_GPIO_ReadPin(PORT_BUTTON, PIN_BUTTON))
 8004a34:	bf00      	nop
 8004a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a3a:	4816      	ldr	r0, [pc, #88]	; (8004a94 <task_button+0x84>)
 8004a3c:	f7fc fbd8 	bl	80011f0 <HAL_GPIO_ReadPin>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f7      	beq.n	8004a36 <task_button+0x26>
			{
			}
			time_tick = xTaskGetTickCount() - time_tick;
 8004a46:	f7fe feeb 	bl	8003820 <xTaskGetTickCount>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	60fb      	str	r3, [r7, #12]
			check_send = xQueueSend(AO->queue_button_h, &time_tick, 0);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f107 010c 	add.w	r1, r7, #12
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f7fe f943 	bl	8002ce8 <xQueueGenericSend>
 8004a62:	4603      	mov	r3, r0
 8004a64:	613b      	str	r3, [r7, #16]
			if (check_send == pdPASS){LOGGER_LOG("\r\n --> Task Button Sending message %d\r\n",time_tick);}
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d1d7      	bne.n	8004a1c <task_button+0xc>
 8004a6c:	f7ff fc52 	bl	8004314 <vPortEnterCritical>
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <task_button+0x88>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <task_button+0x8c>)
 8004a78:	213f      	movs	r1, #63	; 0x3f
 8004a7a:	f000 feeb 	bl	8005854 <sniprintf>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <task_button+0x90>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <task_button+0x88>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ff6d 	bl	8004968 <logger_log_print_>
 8004a8e:	f7ff fc71 	bl	8004374 <vPortExitCritical>
		if (BUTTON_PRESSED == HAL_GPIO_ReadPin(PORT_BUTTON, PIN_BUTTON))
 8004a92:	e7c3      	b.n	8004a1c <task_button+0xc>
 8004a94:	40020800 	.word	0x40020800
 8004a98:	08006828 	.word	0x08006828
 8004a9c:	08006704 	.word	0x08006704
 8004aa0:	200041ac 	.word	0x200041ac

08004aa4 <led_initialize_ao>:
	LONG_,
	ERROR_,
}flag_t;

void led_initialize_ao(void* parameters, const char* ao_task_name, led_type_t led_type)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
	BaseType_t ret;
	send_message_led_t* const send_message_led = malloc(sizeof(send_message_led_t));
 8004ab2:	2008      	movs	r0, #8
 8004ab4:	f000 fc84 	bl	80053c0 <malloc>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
	if (send_message_led == NULL) { return;}
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d04d      	beq.n	8004b5e <led_initialize_ao+0xba>

	send_message_led->LAO_MS_UI = (LedActiveObject_t*) parameters;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	601a      	str	r2, [r3, #0]
	send_message_led->color_led = led_type;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	79fa      	ldrb	r2, [r7, #7]
 8004acc:	711a      	strb	r2, [r3, #4]

	LedActiveObject_t *AO = (LedActiveObject_t *)parameters;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	623b      	str	r3, [r7, #32]
    ret = xTaskCreate(task_led,
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4820      	ldr	r0, [pc, #128]	; (8004b68 <led_initialize_ao+0xc4>)
 8004ae6:	f7fe fc4a 	bl	800337e <xTaskCreate>
 8004aea:	61f8      	str	r0, [r7, #28]
    				  ao_task_name,
					  (2 * configMINIMAL_STACK_SIZE),
					  (void *)send_message_led,
					  (tskIDLE_PRIORITY + 1UL),
					  AO->task_led_h);
    configASSERT(ret == pdPASS);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d00a      	beq.n	8004b08 <led_initialize_ao+0x64>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	61bb      	str	r3, [r7, #24]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <led_initialize_ao+0x62>

    AO->queue_led_h = xQueueCreate(LENGTH_QUEUE_PULSE, SIZE_QUEUE_PULSE);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	2005      	movs	r0, #5
 8004b0e:	f7fe f88d 	bl	8002c2c <xQueueGenericCreate>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	601a      	str	r2, [r3, #0]
        configASSERT (AO->queue_led_h);
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <led_initialize_ao+0x92>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	617b      	str	r3, [r7, #20]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <led_initialize_ao+0x90>
       // LOGGER_LOG("\r\n --> Initialization of task button completed \r\n");
LOGGER_LOG(" --> %s created \r\n", ao_task_name);
 8004b36:	f7ff fbed 	bl	8004314 <vPortEnterCritical>
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <led_initialize_ao+0xc8>)
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <led_initialize_ao+0xcc>)
 8004b42:	213f      	movs	r1, #63	; 0x3f
 8004b44:	f000 fe86 	bl	8005854 <sniprintf>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <led_initialize_ao+0xd0>)
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <led_initialize_ao+0xc8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff ff08 	bl	8004968 <logger_log_print_>
 8004b58:	f7ff fc0c 	bl	8004374 <vPortExitCritical>
 8004b5c:	e000      	b.n	8004b60 <led_initialize_ao+0xbc>
	if (send_message_led == NULL) { return;}
 8004b5e:	bf00      	nop
}
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08006828 	.word	0x08006828
 8004b70:	0800672c 	.word	0x0800672c
 8004b74:	200041ac 	.word	0x200041ac

08004b78 <task_led>:




void task_led(void *parameters)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

	send_message_led_t* message = (send_message_led_t*) parameters;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	61bb      	str	r3, [r7, #24]
	LedActiveObject_t*  led = message->LAO_MS_UI;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
	led_type_t pin_led = message->color_led;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	74fb      	strb	r3, [r7, #19]
	GPIO_TypeDef* port;
	uint16_t	pin;
	TickType_t delay_led;
	TickType_t time_tick;

	if(RED == pin_led){  port=ldx_gpio_port[0];  pin =  ldx_pin[0]; delay_led = TIME_TURN_ON_LED_RED;}
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d109      	bne.n	8004baa <task_led+0x32>
 8004b96:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <task_led+0xcc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9c:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <task_led+0xd0>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	e015      	b.n	8004bd6 <task_led+0x5e>
	else if(GREEN== pin_led){port=ldx_gpio_port[1]; pin =  ldx_pin[1]; delay_led = TIME_TURN_ON_LED_GREEN ; }
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <task_led+0x4c>
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <task_led+0xcc>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <task_led+0xd0>)
 8004bb8:	885b      	ldrh	r3, [r3, #2]
 8004bba:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e008      	b.n	8004bd6 <task_led+0x5e>
	else {port=ldx_gpio_port[2]; pin =  ldx_pin[2];delay_led = TIME_TURN_ON_LED_BLUE;}
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <task_led+0xcc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <task_led+0xd0>)
 8004bcc:	889b      	ldrh	r3, [r3, #4]
 8004bce:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bd4:	61fb      	str	r3, [r7, #28]

	while(true)
	{
		if (xQueueReceive(led->queue_led_h, &event, portMAX_DELAY) == pdPASS)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f107 010b 	add.w	r1, r7, #11
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe f97e 	bl	8002ee4 <xQueueReceive>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d1f3      	bne.n	8004bd6 <task_led+0x5e>
		{
			printf(" --> TURN ON [%s]\r\n", pcTaskGetName(NULL));
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7fe fe26 	bl	8003840 <pcTaskGetName>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4814      	ldr	r0, [pc, #80]	; (8004c4c <task_led+0xd4>)
 8004bfa:	f000 fe19 	bl	8005830 <iprintf>
			time_tick = xTaskGetTickCount();
 8004bfe:	f7fe fe0f 	bl	8003820 <xTaskGetTickCount>
 8004c02:	60f8      	str	r0, [r7, #12]
			HAL_GPIO_WritePin(port, pin, LED_ON);
 8004c04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c06:	2201      	movs	r2, #1
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c0c:	f7fc fb08 	bl	8001220 <HAL_GPIO_WritePin>
			HAL_Delay(delay_led);
 8004c10:	69f8      	ldr	r0, [r7, #28]
 8004c12:	f7fc f863 	bl	8000cdc <HAL_Delay>
			HAL_GPIO_WritePin(port, pin, LED_OFF);
 8004c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1e:	f7fc faff 	bl	8001220 <HAL_GPIO_WritePin>
			time_tick = xTaskGetTickCount()-time_tick;
 8004c22:	f7fe fdfd 	bl	8003820 <xTaskGetTickCount>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	60fb      	str	r3, [r7, #12]
			printf(" --> TURN OFF %s Time ON: %lu \r\n", pcTaskGetName(NULL), time_tick);
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f7fe fe06 	bl	8003840 <pcTaskGetName>
 8004c34:	4603      	mov	r3, r0
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4805      	ldr	r0, [pc, #20]	; (8004c50 <task_led+0xd8>)
 8004c3c:	f000 fdf8 	bl	8005830 <iprintf>
		if (xQueueReceive(led->queue_led_h, &event, portMAX_DELAY) == pdPASS)
 8004c40:	e7c9      	b.n	8004bd6 <task_led+0x5e>
 8004c42:	bf00      	nop
 8004c44:	2000001c 	.word	0x2000001c
 8004c48:	20000014 	.word	0x20000014
 8004c4c:	08006740 	.word	0x08006740
 8004c50:	08006754 	.word	0x08006754

08004c54 <user_interface_initialize_ao>:


void task_user_interface(void *parameters);

void user_interface_initialize_ao(void* parameters, void*  BAO, void*  LAOR, void*  LAOG, void*  LAOB)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
	InterfaceUserActiveObject_t* const AO = (InterfaceUserActiveObject_t*) parameters;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	61fb      	str	r3, [r7, #28]
	message_user_interface_t* const message_user_interface = malloc(sizeof(message_user_interface_t));
 8004c66:	2010      	movs	r0, #16
 8004c68:	f000 fbaa 	bl	80053c0 <malloc>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]
	if (message_user_interface == NULL) { return;}
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d026      	beq.n	8004cc4 <user_interface_initialize_ao+0x70>


	message_user_interface->BAO_MS_UI = (ButtonActiveObject_t*) BAO;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	601a      	str	r2, [r3, #0]
    message_user_interface->LAOR_MS_UI = (LedActiveObject_t*) LAOR;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	605a      	str	r2, [r3, #4]
    message_user_interface->LAOB_MS_UI = (LedActiveObject_t*) LAOB;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c86:	60da      	str	r2, [r3, #12]
    message_user_interface->LAOG_MS_UI = (LedActiveObject_t*) LAOG;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	609a      	str	r2, [r3, #8]

	BaseType_t ret;
    ret = xTaskCreate(task_user_interface,
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	2301      	movs	r3, #1
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c9e:	490b      	ldr	r1, [pc, #44]	; (8004ccc <user_interface_initialize_ao+0x78>)
 8004ca0:	480b      	ldr	r0, [pc, #44]	; (8004cd0 <user_interface_initialize_ao+0x7c>)
 8004ca2:	f7fe fb6c 	bl	800337e <xTaskCreate>
 8004ca6:	6178      	str	r0, [r7, #20]
    				  "Task user interface",
					  (2 * configMINIMAL_STACK_SIZE),
					  (void *)message_user_interface,
					  (tskIDLE_PRIORITY + 1UL),
					  AO->task_user_interface_h);
    configASSERT(ret == pdPASS);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d00b      	beq.n	8004cc6 <user_interface_initialize_ao+0x72>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	613b      	str	r3, [r7, #16]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <user_interface_initialize_ao+0x6e>
	if (message_user_interface == NULL) { return;}
 8004cc4:	bf00      	nop
    // LOGGER_LOG("\r\n --> Initialization of task button completed \r\n");

}
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	08006778 	.word	0x08006778
 8004cd0:	08004cd5 	.word	0x08004cd5

08004cd4 <task_user_interface>:


void task_user_interface(void *parameters)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	message_user_interface_t* message = (message_user_interface_t*) parameters;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
	ButtonActiveObject_t*  button = message->BAO_MS_UI;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	623b      	str	r3, [r7, #32]
	LedActiveObject_t*  led_red= message->LAOR_MS_UI;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61fb      	str	r3, [r7, #28]
	LedActiveObject_t*  led_blue = message->LAOB_MS_UI;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	61bb      	str	r3, [r7, #24]
	LedActiveObject_t*  led_green = message->LAOG_MS_UI;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]
	TickType_t event;

	state_button_t pulse = PULSE_OUT;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]

    while (true)
    {

    	if (xQueueReceive(button->queue_button_h, &event, portMAX_DELAY) == pdPASS)
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f107 0110 	add.w	r1, r7, #16
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe f8eb 	bl	8002ee4 <xQueueReceive>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d12f      	bne.n	8004d74 <task_user_interface+0xa0>
    	{
    		LOGGER_LOG("PULSE %lu",event);
 8004d14:	f7ff fafe 	bl	8004314 <vPortEnterCritical>
 8004d18:	4b51      	ldr	r3, [pc, #324]	; (8004e60 <task_user_interface+0x18c>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4a51      	ldr	r2, [pc, #324]	; (8004e64 <task_user_interface+0x190>)
 8004d20:	213f      	movs	r1, #63	; 0x3f
 8004d22:	f000 fd97 	bl	8005854 <sniprintf>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4a4f      	ldr	r2, [pc, #316]	; (8004e68 <task_user_interface+0x194>)
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <task_user_interface+0x18c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fe19 	bl	8004968 <logger_log_print_>
 8004d36:	f7ff fb1d 	bl	8004374 <vPortExitCritical>

        	if(event < TIME_PULSE_LOW){pulse = PULSE_OUT;}
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2bc7      	cmp	r3, #199	; 0xc7
 8004d3e:	d802      	bhi.n	8004d46 <task_user_interface+0x72>
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e016      	b.n	8004d74 <task_user_interface+0xa0>
        	else if (event < TIME_PULSE_MODERATE){pulse = PULSE_PULSE;}
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d4c:	d202      	bcs.n	8004d54 <task_user_interface+0x80>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	e00f      	b.n	8004d74 <task_user_interface+0xa0>
        	else if (event < TIME_PULSE_LONG){pulse = PULSE_SHORT;}
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d5a:	d202      	bcs.n	8004d62 <task_user_interface+0x8e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e008      	b.n	8004d74 <task_user_interface+0xa0>
        	else if (event > TIME_PULSE_LONG){pulse = PULSE_LONG;}
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d68:	d902      	bls.n	8004d70 <task_user_interface+0x9c>
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	73fb      	strb	r3, [r7, #15]
 8004d6e:	e001      	b.n	8004d74 <task_user_interface+0xa0>
        	else {pulse=PULSE_ERROR; }
 8004d70:	2304      	movs	r3, #4
 8004d72:	73fb      	strb	r3, [r7, #15]
    	}

    	switch (pulse)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d023      	beq.n	8004dc2 <task_user_interface+0xee>
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	dc5b      	bgt.n	8004e36 <task_user_interface+0x162>
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <task_user_interface+0xb4>
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d03a      	beq.n	8004dfc <task_user_interface+0x128>
 8004d86:	e056      	b.n	8004e36 <task_user_interface+0x162>
    	{
    	case PULSE_PULSE:
    		if(xQueueSend(led_red->queue_led_h, &pulse, portMAX_DELAY) != pdPASS){}
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	f107 010f 	add.w	r1, r7, #15
 8004d90:	2300      	movs	r3, #0
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	f7fd ffa7 	bl	8002ce8 <xQueueGenericSend>
    		    LOGGER_LOG(" -->PULSE SENT TO QUEUE RED\r\n");
 8004d9a:	f7ff fabb 	bl	8004314 <vPortEnterCritical>
 8004d9e:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <task_user_interface+0x18c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <task_user_interface+0x198>)
 8004da4:	213f      	movs	r1, #63	; 0x3f
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fd54 	bl	8005854 <sniprintf>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <task_user_interface+0x194>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <task_user_interface+0x18c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fdd6 	bl	8004968 <logger_log_print_>
 8004dbc:	f7ff fada 	bl	8004374 <vPortExitCritical>
    		    break;
 8004dc0:	e04d      	b.n	8004e5e <task_user_interface+0x18a>

    	case PULSE_LONG:
    		if(xQueueSend(led_blue->queue_led_h, &pulse, portMAX_DELAY) != pdPASS){}
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f107 010f 	add.w	r1, r7, #15
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	f7fd ff8a 	bl	8002ce8 <xQueueGenericSend>
    		    LOGGER_LOG(" --> PULSE SENT TO QUEUE BLUE\r\n");
 8004dd4:	f7ff fa9e 	bl	8004314 <vPortEnterCritical>
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <task_user_interface+0x18c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <task_user_interface+0x19c>)
 8004dde:	213f      	movs	r1, #63	; 0x3f
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fd37 	bl	8005854 <sniprintf>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4a1f      	ldr	r2, [pc, #124]	; (8004e68 <task_user_interface+0x194>)
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <task_user_interface+0x18c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fdb9 	bl	8004968 <logger_log_print_>
 8004df6:	f7ff fabd 	bl	8004374 <vPortExitCritical>
    		    break;
 8004dfa:	e030      	b.n	8004e5e <task_user_interface+0x18a>

    	case PULSE_SHORT:
    	    if(xQueueSend(led_green->queue_led_h, &pulse, portMAX_DELAY) != pdPASS){}
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	f107 010f 	add.w	r1, r7, #15
 8004e04:	2300      	movs	r3, #0
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	f7fd ff6d 	bl	8002ce8 <xQueueGenericSend>
    	    	LOGGER_LOG(" --> PULSE SENT TO QUEUE GREEN\r\n");
 8004e0e:	f7ff fa81 	bl	8004314 <vPortEnterCritical>
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <task_user_interface+0x18c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <task_user_interface+0x1a0>)
 8004e18:	213f      	movs	r1, #63	; 0x3f
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fd1a 	bl	8005854 <sniprintf>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <task_user_interface+0x194>)
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <task_user_interface+0x18c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fd9c 	bl	8004968 <logger_log_print_>
 8004e30:	f7ff faa0 	bl	8004374 <vPortExitCritical>
    	    	break;
 8004e34:	e013      	b.n	8004e5e <task_user_interface+0x18a>
    	default:
    	    	LOGGER_LOG(" --> PULSE UNSEND\r\n");
 8004e36:	f7ff fa6d 	bl	8004314 <vPortEnterCritical>
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <task_user_interface+0x18c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <task_user_interface+0x1a4>)
 8004e40:	213f      	movs	r1, #63	; 0x3f
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fd06 	bl	8005854 <sniprintf>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <task_user_interface+0x194>)
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <task_user_interface+0x18c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fd88 	bl	8004968 <logger_log_print_>
 8004e58:	f7ff fa8c 	bl	8004374 <vPortExitCritical>
    			break;
 8004e5c:	bf00      	nop
    	if (xQueueReceive(button->queue_button_h, &event, portMAX_DELAY) == pdPASS)
 8004e5e:	e74d      	b.n	8004cfc <task_user_interface+0x28>
 8004e60:	08006828 	.word	0x08006828
 8004e64:	0800678c 	.word	0x0800678c
 8004e68:	200041ac 	.word	0x200041ac
 8004e6c:	08006798 	.word	0x08006798
 8004e70:	080067b8 	.word	0x080067b8
 8004e74:	080067d8 	.word	0x080067d8
 8004e78:	080067fc 	.word	0x080067fc

08004e7c <findslot>:
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <findslot+0x2c>)
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	b118      	cbz	r0, 8004e8e <findslot+0x12>
 8004e86:	6a03      	ldr	r3, [r0, #32]
 8004e88:	b90b      	cbnz	r3, 8004e8e <findslot+0x12>
 8004e8a:	f000 fc9b 	bl	80057c4 <__sinit>
 8004e8e:	2c13      	cmp	r4, #19
 8004e90:	d807      	bhi.n	8004ea2 <findslot+0x26>
 8004e92:	4806      	ldr	r0, [pc, #24]	; (8004eac <findslot+0x30>)
 8004e94:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004e98:	3201      	adds	r2, #1
 8004e9a:	d002      	beq.n	8004ea2 <findslot+0x26>
 8004e9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e7fc      	b.n	8004ea0 <findslot+0x24>
 8004ea6:	bf00      	nop
 8004ea8:	20000088 	.word	0x20000088
 8004eac:	200041bc 	.word	0x200041bc

08004eb0 <error>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	f000 fda4 	bl	8005a00 <__errno>
 8004eb8:	2613      	movs	r6, #19
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2700      	movs	r7, #0
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	beab      	bkpt	0x00ab
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	602e      	str	r6, [r5, #0]
 8004ec8:	4620      	mov	r0, r4
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ecc <checkerror>:
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d101      	bne.n	8004ed4 <checkerror+0x8>
 8004ed0:	f7ff bfee 	b.w	8004eb0 <error>
 8004ed4:	4770      	bx	lr

08004ed6 <_swiread>:
 8004ed6:	b530      	push	{r4, r5, lr}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004ede:	9203      	str	r2, [sp, #12]
 8004ee0:	2406      	movs	r4, #6
 8004ee2:	ad01      	add	r5, sp, #4
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	beab      	bkpt	0x00ab
 8004eea:	4604      	mov	r4, r0
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff ffed 	bl	8004ecc <checkerror>
 8004ef2:	b005      	add	sp, #20
 8004ef4:	bd30      	pop	{r4, r5, pc}

08004ef6 <_read>:
 8004ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef8:	4615      	mov	r5, r2
 8004efa:	9101      	str	r1, [sp, #4]
 8004efc:	f7ff ffbe 	bl	8004e7c <findslot>
 8004f00:	9901      	ldr	r1, [sp, #4]
 8004f02:	4604      	mov	r4, r0
 8004f04:	b938      	cbnz	r0, 8004f16 <_read+0x20>
 8004f06:	f000 fd7b 	bl	8005a00 <__errno>
 8004f0a:	2309      	movs	r3, #9
 8004f0c:	6003      	str	r3, [r0, #0]
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b003      	add	sp, #12
 8004f14:	bd30      	pop	{r4, r5, pc}
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	f7ff ffdc 	bl	8004ed6 <_swiread>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	d0f7      	beq.n	8004f12 <_read+0x1c>
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	1a2a      	subs	r2, r5, r0
 8004f26:	4413      	add	r3, r2
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	e7f1      	b.n	8004f12 <_read+0x1c>

08004f2e <_swilseek>:
 8004f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f30:	460c      	mov	r4, r1
 8004f32:	4616      	mov	r6, r2
 8004f34:	f7ff ffa2 	bl	8004e7c <findslot>
 8004f38:	4605      	mov	r5, r0
 8004f3a:	b940      	cbnz	r0, 8004f4e <_swilseek+0x20>
 8004f3c:	f000 fd60 	bl	8005a00 <__errno>
 8004f40:	2309      	movs	r3, #9
 8004f42:	6003      	str	r3, [r0, #0]
 8004f44:	f04f 34ff 	mov.w	r4, #4294967295
 8004f48:	4620      	mov	r0, r4
 8004f4a:	b003      	add	sp, #12
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4e:	2e02      	cmp	r6, #2
 8004f50:	d903      	bls.n	8004f5a <_swilseek+0x2c>
 8004f52:	f000 fd55 	bl	8005a00 <__errno>
 8004f56:	2316      	movs	r3, #22
 8004f58:	e7f3      	b.n	8004f42 <_swilseek+0x14>
 8004f5a:	2e01      	cmp	r6, #1
 8004f5c:	d112      	bne.n	8004f84 <_swilseek+0x56>
 8004f5e:	6843      	ldr	r3, [r0, #4]
 8004f60:	18e4      	adds	r4, r4, r3
 8004f62:	d4f6      	bmi.n	8004f52 <_swilseek+0x24>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	260a      	movs	r6, #10
 8004f68:	e9cd 3400 	strd	r3, r4, [sp]
 8004f6c:	466f      	mov	r7, sp
 8004f6e:	4630      	mov	r0, r6
 8004f70:	4639      	mov	r1, r7
 8004f72:	beab      	bkpt	0x00ab
 8004f74:	4606      	mov	r6, r0
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffa8 	bl	8004ecc <checkerror>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	dbe1      	blt.n	8004f44 <_swilseek+0x16>
 8004f80:	606c      	str	r4, [r5, #4]
 8004f82:	e7e1      	b.n	8004f48 <_swilseek+0x1a>
 8004f84:	2e02      	cmp	r6, #2
 8004f86:	6803      	ldr	r3, [r0, #0]
 8004f88:	d1ec      	bne.n	8004f64 <_swilseek+0x36>
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	260c      	movs	r6, #12
 8004f8e:	466f      	mov	r7, sp
 8004f90:	4630      	mov	r0, r6
 8004f92:	4639      	mov	r1, r7
 8004f94:	beab      	bkpt	0x00ab
 8004f96:	4606      	mov	r6, r0
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff ff97 	bl	8004ecc <checkerror>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d0d0      	beq.n	8004f44 <_swilseek+0x16>
 8004fa2:	4404      	add	r4, r0
 8004fa4:	e7de      	b.n	8004f64 <_swilseek+0x36>

08004fa6 <_lseek>:
 8004fa6:	f7ff bfc2 	b.w	8004f2e <_swilseek>

08004faa <_swiwrite>:
 8004faa:	b530      	push	{r4, r5, lr}
 8004fac:	b085      	sub	sp, #20
 8004fae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004fb2:	9203      	str	r2, [sp, #12]
 8004fb4:	2405      	movs	r4, #5
 8004fb6:	ad01      	add	r5, sp, #4
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	beab      	bkpt	0x00ab
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7ff ff83 	bl	8004ecc <checkerror>
 8004fc6:	b005      	add	sp, #20
 8004fc8:	bd30      	pop	{r4, r5, pc}

08004fca <_write>:
 8004fca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fcc:	4615      	mov	r5, r2
 8004fce:	9101      	str	r1, [sp, #4]
 8004fd0:	f7ff ff54 	bl	8004e7c <findslot>
 8004fd4:	9901      	ldr	r1, [sp, #4]
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	b930      	cbnz	r0, 8004fe8 <_write+0x1e>
 8004fda:	f000 fd11 	bl	8005a00 <__errno>
 8004fde:	2309      	movs	r3, #9
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	e012      	b.n	800500e <_write+0x44>
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	462a      	mov	r2, r5
 8004fec:	f7ff ffdd 	bl	8004faa <_swiwrite>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	dbf6      	blt.n	8004fe2 <_write+0x18>
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	1a2b      	subs	r3, r5, r0
 8004ff8:	441a      	add	r2, r3
 8004ffa:	42a8      	cmp	r0, r5
 8004ffc:	6062      	str	r2, [r4, #4]
 8004ffe:	d105      	bne.n	800500c <_write+0x42>
 8005000:	2000      	movs	r0, #0
 8005002:	b003      	add	sp, #12
 8005004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005008:	f7ff bf52 	b.w	8004eb0 <error>
 800500c:	4618      	mov	r0, r3
 800500e:	b003      	add	sp, #12
 8005010:	bd30      	pop	{r4, r5, pc}

08005012 <_swiclose>:
 8005012:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005014:	2402      	movs	r4, #2
 8005016:	9001      	str	r0, [sp, #4]
 8005018:	ad01      	add	r5, sp, #4
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	beab      	bkpt	0x00ab
 8005020:	4604      	mov	r4, r0
 8005022:	4620      	mov	r0, r4
 8005024:	f7ff ff52 	bl	8004ecc <checkerror>
 8005028:	b003      	add	sp, #12
 800502a:	bd30      	pop	{r4, r5, pc}

0800502c <_close>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	f7ff ff24 	bl	8004e7c <findslot>
 8005034:	4604      	mov	r4, r0
 8005036:	b930      	cbnz	r0, 8005046 <_close+0x1a>
 8005038:	f000 fce2 	bl	8005a00 <__errno>
 800503c:	2309      	movs	r3, #9
 800503e:	6003      	str	r3, [r0, #0]
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	3d01      	subs	r5, #1
 8005048:	2d01      	cmp	r5, #1
 800504a:	d809      	bhi.n	8005060 <_close+0x34>
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <_close+0x48>)
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	d104      	bne.n	8005060 <_close+0x34>
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	6003      	str	r3, [r0, #0]
 800505c:	2000      	movs	r0, #0
 800505e:	e7f1      	b.n	8005044 <_close+0x18>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	f7ff ffd6 	bl	8005012 <_swiclose>
 8005066:	2800      	cmp	r0, #0
 8005068:	d1ec      	bne.n	8005044 <_close+0x18>
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	e7e8      	b.n	8005044 <_close+0x18>
 8005072:	bf00      	nop
 8005074:	200041bc 	.word	0x200041bc

08005078 <_swistat>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	460c      	mov	r4, r1
 800507c:	f7ff fefe 	bl	8004e7c <findslot>
 8005080:	4605      	mov	r5, r0
 8005082:	b930      	cbnz	r0, 8005092 <_swistat+0x1a>
 8005084:	f000 fcbc 	bl	8005a00 <__errno>
 8005088:	2309      	movs	r3, #9
 800508a:	6003      	str	r3, [r0, #0]
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509e:	64a3      	str	r3, [r4, #72]	; 0x48
 80050a0:	260c      	movs	r6, #12
 80050a2:	4630      	mov	r0, r6
 80050a4:	4629      	mov	r1, r5
 80050a6:	beab      	bkpt	0x00ab
 80050a8:	4605      	mov	r5, r0
 80050aa:	4628      	mov	r0, r5
 80050ac:	f7ff ff0e 	bl	8004ecc <checkerror>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	bf1c      	itt	ne
 80050b4:	6120      	strne	r0, [r4, #16]
 80050b6:	2000      	movne	r0, #0
 80050b8:	e7ea      	b.n	8005090 <_swistat+0x18>

080050ba <_fstat>:
 80050ba:	460b      	mov	r3, r1
 80050bc:	b510      	push	{r4, lr}
 80050be:	2100      	movs	r1, #0
 80050c0:	4604      	mov	r4, r0
 80050c2:	2258      	movs	r2, #88	; 0x58
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fc3c 	bl	8005942 <memset>
 80050ca:	4601      	mov	r1, r0
 80050cc:	4620      	mov	r0, r4
 80050ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d2:	f7ff bfd1 	b.w	8005078 <_swistat>

080050d6 <_stat>:
 80050d6:	b538      	push	{r3, r4, r5, lr}
 80050d8:	460d      	mov	r5, r1
 80050da:	4604      	mov	r4, r0
 80050dc:	2258      	movs	r2, #88	; 0x58
 80050de:	2100      	movs	r1, #0
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fc2e 	bl	8005942 <memset>
 80050e6:	4620      	mov	r0, r4
 80050e8:	2100      	movs	r1, #0
 80050ea:	f000 f811 	bl	8005110 <_swiopen>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	4604      	mov	r4, r0
 80050f2:	d00b      	beq.n	800510c <_stat+0x36>
 80050f4:	686b      	ldr	r3, [r5, #4]
 80050f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050fa:	606b      	str	r3, [r5, #4]
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7ff ffbb 	bl	8005078 <_swistat>
 8005102:	4605      	mov	r5, r0
 8005104:	4620      	mov	r0, r4
 8005106:	f7ff ff91 	bl	800502c <_close>
 800510a:	462c      	mov	r4, r5
 800510c:	4620      	mov	r0, r4
 800510e:	bd38      	pop	{r3, r4, r5, pc}

08005110 <_swiopen>:
 8005110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005114:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80051c0 <_swiopen+0xb0>
 8005118:	b097      	sub	sp, #92	; 0x5c
 800511a:	4607      	mov	r7, r0
 800511c:	460e      	mov	r6, r1
 800511e:	2500      	movs	r5, #0
 8005120:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8005124:	1c61      	adds	r1, r4, #1
 8005126:	d037      	beq.n	8005198 <_swiopen+0x88>
 8005128:	3501      	adds	r5, #1
 800512a:	2d14      	cmp	r5, #20
 800512c:	d1f8      	bne.n	8005120 <_swiopen+0x10>
 800512e:	f000 fc67 	bl	8005a00 <__errno>
 8005132:	2318      	movs	r3, #24
 8005134:	6003      	str	r3, [r0, #0]
 8005136:	f04f 34ff 	mov.w	r4, #4294967295
 800513a:	e03d      	b.n	80051b8 <_swiopen+0xa8>
 800513c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8005140:	f240 6301 	movw	r3, #1537	; 0x601
 8005144:	07b2      	lsls	r2, r6, #30
 8005146:	bf48      	it	mi
 8005148:	f044 0402 	orrmi.w	r4, r4, #2
 800514c:	421e      	tst	r6, r3
 800514e:	bf18      	it	ne
 8005150:	f044 0404 	orrne.w	r4, r4, #4
 8005154:	0733      	lsls	r3, r6, #28
 8005156:	bf48      	it	mi
 8005158:	f024 0404 	bicmi.w	r4, r4, #4
 800515c:	4638      	mov	r0, r7
 800515e:	bf48      	it	mi
 8005160:	f044 0408 	orrmi.w	r4, r4, #8
 8005164:	9700      	str	r7, [sp, #0]
 8005166:	f7fb f83b 	bl	80001e0 <strlen>
 800516a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800516e:	2401      	movs	r4, #1
 8005170:	4620      	mov	r0, r4
 8005172:	4649      	mov	r1, r9
 8005174:	beab      	bkpt	0x00ab
 8005176:	4604      	mov	r4, r0
 8005178:	2c00      	cmp	r4, #0
 800517a:	db08      	blt.n	800518e <_swiopen+0x7e>
 800517c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005180:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8005184:	2300      	movs	r3, #0
 8005186:	f8c8 3004 	str.w	r3, [r8, #4]
 800518a:	462c      	mov	r4, r5
 800518c:	e014      	b.n	80051b8 <_swiopen+0xa8>
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff fe8e 	bl	8004eb0 <error>
 8005194:	4604      	mov	r4, r0
 8005196:	e00f      	b.n	80051b8 <_swiopen+0xa8>
 8005198:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800519c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80051a0:	46e9      	mov	r9, sp
 80051a2:	d1cb      	bne.n	800513c <_swiopen+0x2c>
 80051a4:	4649      	mov	r1, r9
 80051a6:	4638      	mov	r0, r7
 80051a8:	f7ff ff95 	bl	80050d6 <_stat>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d0c5      	beq.n	800513c <_swiopen+0x2c>
 80051b0:	f000 fc26 	bl	8005a00 <__errno>
 80051b4:	2311      	movs	r3, #17
 80051b6:	6003      	str	r3, [r0, #0]
 80051b8:	4620      	mov	r0, r4
 80051ba:	b017      	add	sp, #92	; 0x5c
 80051bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051c0:	200041bc 	.word	0x200041bc

080051c4 <_get_semihosting_exts>:
 80051c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051c8:	4606      	mov	r6, r0
 80051ca:	460f      	mov	r7, r1
 80051cc:	482a      	ldr	r0, [pc, #168]	; (8005278 <_get_semihosting_exts+0xb4>)
 80051ce:	2100      	movs	r1, #0
 80051d0:	4615      	mov	r5, r2
 80051d2:	f7ff ff9d 	bl	8005110 <_swiopen>
 80051d6:	462a      	mov	r2, r5
 80051d8:	4604      	mov	r4, r0
 80051da:	2100      	movs	r1, #0
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 fbb0 	bl	8005942 <memset>
 80051e2:	1c63      	adds	r3, r4, #1
 80051e4:	d016      	beq.n	8005214 <_get_semihosting_exts+0x50>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7ff fe48 	bl	8004e7c <findslot>
 80051ec:	f04f 080c 	mov.w	r8, #12
 80051f0:	4681      	mov	r9, r0
 80051f2:	4640      	mov	r0, r8
 80051f4:	4649      	mov	r1, r9
 80051f6:	beab      	bkpt	0x00ab
 80051f8:	4680      	mov	r8, r0
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff fe66 	bl	8004ecc <checkerror>
 8005200:	2803      	cmp	r0, #3
 8005202:	dd02      	ble.n	800520a <_get_semihosting_exts+0x46>
 8005204:	1ec3      	subs	r3, r0, #3
 8005206:	42ab      	cmp	r3, r5
 8005208:	dc08      	bgt.n	800521c <_get_semihosting_exts+0x58>
 800520a:	4620      	mov	r0, r4
 800520c:	f7ff ff0e 	bl	800502c <_close>
 8005210:	f04f 34ff 	mov.w	r4, #4294967295
 8005214:	4620      	mov	r0, r4
 8005216:	b003      	add	sp, #12
 8005218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800521c:	2204      	movs	r2, #4
 800521e:	eb0d 0102 	add.w	r1, sp, r2
 8005222:	4620      	mov	r0, r4
 8005224:	f7ff fe67 	bl	8004ef6 <_read>
 8005228:	2803      	cmp	r0, #3
 800522a:	ddee      	ble.n	800520a <_get_semihosting_exts+0x46>
 800522c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005230:	2b53      	cmp	r3, #83	; 0x53
 8005232:	d1ea      	bne.n	800520a <_get_semihosting_exts+0x46>
 8005234:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005238:	2b48      	cmp	r3, #72	; 0x48
 800523a:	d1e6      	bne.n	800520a <_get_semihosting_exts+0x46>
 800523c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005240:	2b46      	cmp	r3, #70	; 0x46
 8005242:	d1e2      	bne.n	800520a <_get_semihosting_exts+0x46>
 8005244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005248:	2b42      	cmp	r3, #66	; 0x42
 800524a:	d1de      	bne.n	800520a <_get_semihosting_exts+0x46>
 800524c:	2201      	movs	r2, #1
 800524e:	4639      	mov	r1, r7
 8005250:	4620      	mov	r0, r4
 8005252:	f7ff fe6c 	bl	8004f2e <_swilseek>
 8005256:	2800      	cmp	r0, #0
 8005258:	dbd7      	blt.n	800520a <_get_semihosting_exts+0x46>
 800525a:	462a      	mov	r2, r5
 800525c:	4631      	mov	r1, r6
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff fe49 	bl	8004ef6 <_read>
 8005264:	4605      	mov	r5, r0
 8005266:	4620      	mov	r0, r4
 8005268:	f7ff fee0 	bl	800502c <_close>
 800526c:	4628      	mov	r0, r5
 800526e:	f7ff fe2d 	bl	8004ecc <checkerror>
 8005272:	4604      	mov	r4, r0
 8005274:	e7ce      	b.n	8005214 <_get_semihosting_exts+0x50>
 8005276:	bf00      	nop
 8005278:	0800682c 	.word	0x0800682c

0800527c <initialise_semihosting_exts>:
 800527c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800527e:	4d0a      	ldr	r5, [pc, #40]	; (80052a8 <initialise_semihosting_exts+0x2c>)
 8005280:	4c0a      	ldr	r4, [pc, #40]	; (80052ac <initialise_semihosting_exts+0x30>)
 8005282:	2100      	movs	r1, #0
 8005284:	2201      	movs	r2, #1
 8005286:	a801      	add	r0, sp, #4
 8005288:	6029      	str	r1, [r5, #0]
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	f7ff ff9a 	bl	80051c4 <_get_semihosting_exts>
 8005290:	2800      	cmp	r0, #0
 8005292:	dd07      	ble.n	80052a4 <initialise_semihosting_exts+0x28>
 8005294:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005298:	f003 0201 	and.w	r2, r3, #1
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	602a      	str	r2, [r5, #0]
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	b003      	add	sp, #12
 80052a6:	bd30      	pop	{r4, r5, pc}
 80052a8:	20000028 	.word	0x20000028
 80052ac:	2000002c 	.word	0x2000002c

080052b0 <_has_ext_stdout_stderr>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	4c04      	ldr	r4, [pc, #16]	; (80052c4 <_has_ext_stdout_stderr+0x14>)
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	da01      	bge.n	80052be <_has_ext_stdout_stderr+0xe>
 80052ba:	f7ff ffdf 	bl	800527c <initialise_semihosting_exts>
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	bf00      	nop
 80052c4:	2000002c 	.word	0x2000002c

080052c8 <initialise_monitor_handles>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	b085      	sub	sp, #20
 80052ce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005380 <initialise_monitor_handles+0xb8>
 80052d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80052d6:	2303      	movs	r3, #3
 80052d8:	2400      	movs	r4, #0
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	af01      	add	r7, sp, #4
 80052de:	9402      	str	r4, [sp, #8]
 80052e0:	2501      	movs	r5, #1
 80052e2:	4628      	mov	r0, r5
 80052e4:	4639      	mov	r1, r7
 80052e6:	beab      	bkpt	0x00ab
 80052e8:	4605      	mov	r5, r0
 80052ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005384 <initialise_monitor_handles+0xbc>
 80052ee:	4623      	mov	r3, r4
 80052f0:	4c20      	ldr	r4, [pc, #128]	; (8005374 <initialise_monitor_handles+0xac>)
 80052f2:	f8c8 5000 	str.w	r5, [r8]
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80052fe:	3301      	adds	r3, #1
 8005300:	2b14      	cmp	r3, #20
 8005302:	d1fa      	bne.n	80052fa <initialise_monitor_handles+0x32>
 8005304:	f7ff ffd4 	bl	80052b0 <_has_ext_stdout_stderr>
 8005308:	4d1b      	ldr	r5, [pc, #108]	; (8005378 <initialise_monitor_handles+0xb0>)
 800530a:	b1d0      	cbz	r0, 8005342 <initialise_monitor_handles+0x7a>
 800530c:	f04f 0a03 	mov.w	sl, #3
 8005310:	2304      	movs	r3, #4
 8005312:	f8cd 9004 	str.w	r9, [sp, #4]
 8005316:	2601      	movs	r6, #1
 8005318:	f8cd a00c 	str.w	sl, [sp, #12]
 800531c:	9302      	str	r3, [sp, #8]
 800531e:	4630      	mov	r0, r6
 8005320:	4639      	mov	r1, r7
 8005322:	beab      	bkpt	0x00ab
 8005324:	4683      	mov	fp, r0
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <initialise_monitor_handles+0xb4>)
 8005328:	f8cd 9004 	str.w	r9, [sp, #4]
 800532c:	f8c3 b000 	str.w	fp, [r3]
 8005330:	2308      	movs	r3, #8
 8005332:	f8cd a00c 	str.w	sl, [sp, #12]
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	4630      	mov	r0, r6
 800533a:	4639      	mov	r1, r7
 800533c:	beab      	bkpt	0x00ab
 800533e:	4606      	mov	r6, r0
 8005340:	602e      	str	r6, [r5, #0]
 8005342:	682b      	ldr	r3, [r5, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	bf02      	ittt	eq
 8005348:	4b0c      	ldreq	r3, [pc, #48]	; (800537c <initialise_monitor_handles+0xb4>)
 800534a:	681b      	ldreq	r3, [r3, #0]
 800534c:	602b      	streq	r3, [r5, #0]
 800534e:	2600      	movs	r6, #0
 8005350:	f8d8 3000 	ldr.w	r3, [r8]
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	6066      	str	r6, [r4, #4]
 8005358:	f7ff ffaa 	bl	80052b0 <_has_ext_stdout_stderr>
 800535c:	b130      	cbz	r0, 800536c <initialise_monitor_handles+0xa4>
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <initialise_monitor_handles+0xb4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005366:	682b      	ldr	r3, [r5, #0]
 8005368:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800536c:	b005      	add	sp, #20
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	bf00      	nop
 8005374:	200041bc 	.word	0x200041bc
 8005378:	200041b0 	.word	0x200041b0
 800537c:	200041b8 	.word	0x200041b8
 8005380:	08006842 	.word	0x08006842
 8005384:	200041b4 	.word	0x200041b4

08005388 <_isatty>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	f7ff fd77 	bl	8004e7c <findslot>
 800538e:	2509      	movs	r5, #9
 8005390:	4604      	mov	r4, r0
 8005392:	b920      	cbnz	r0, 800539e <_isatty+0x16>
 8005394:	f000 fb34 	bl	8005a00 <__errno>
 8005398:	6005      	str	r5, [r0, #0]
 800539a:	4620      	mov	r0, r4
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	4628      	mov	r0, r5
 80053a0:	4621      	mov	r1, r4
 80053a2:	beab      	bkpt	0x00ab
 80053a4:	4604      	mov	r4, r0
 80053a6:	2c01      	cmp	r4, #1
 80053a8:	d0f7      	beq.n	800539a <_isatty+0x12>
 80053aa:	f000 fb29 	bl	8005a00 <__errno>
 80053ae:	2400      	movs	r4, #0
 80053b0:	4605      	mov	r5, r0
 80053b2:	2613      	movs	r6, #19
 80053b4:	4630      	mov	r0, r6
 80053b6:	4621      	mov	r1, r4
 80053b8:	beab      	bkpt	0x00ab
 80053ba:	4606      	mov	r6, r0
 80053bc:	602e      	str	r6, [r5, #0]
 80053be:	e7ec      	b.n	800539a <_isatty+0x12>

080053c0 <malloc>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	; (80053cc <malloc+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f000 b823 	b.w	8005410 <_malloc_r>
 80053ca:	bf00      	nop
 80053cc:	20000088 	.word	0x20000088

080053d0 <sbrk_aligned>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4e0e      	ldr	r6, [pc, #56]	; (800540c <sbrk_aligned+0x3c>)
 80053d4:	460c      	mov	r4, r1
 80053d6:	6831      	ldr	r1, [r6, #0]
 80053d8:	4605      	mov	r5, r0
 80053da:	b911      	cbnz	r1, 80053e2 <sbrk_aligned+0x12>
 80053dc:	f000 faee 	bl	80059bc <_sbrk_r>
 80053e0:	6030      	str	r0, [r6, #0]
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 fae9 	bl	80059bc <_sbrk_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d00a      	beq.n	8005404 <sbrk_aligned+0x34>
 80053ee:	1cc4      	adds	r4, r0, #3
 80053f0:	f024 0403 	bic.w	r4, r4, #3
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d007      	beq.n	8005408 <sbrk_aligned+0x38>
 80053f8:	1a21      	subs	r1, r4, r0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 fade 	bl	80059bc <_sbrk_r>
 8005400:	3001      	adds	r0, #1
 8005402:	d101      	bne.n	8005408 <sbrk_aligned+0x38>
 8005404:	f04f 34ff 	mov.w	r4, #4294967295
 8005408:	4620      	mov	r0, r4
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	20004260 	.word	0x20004260

08005410 <_malloc_r>:
 8005410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005414:	1ccd      	adds	r5, r1, #3
 8005416:	f025 0503 	bic.w	r5, r5, #3
 800541a:	3508      	adds	r5, #8
 800541c:	2d0c      	cmp	r5, #12
 800541e:	bf38      	it	cc
 8005420:	250c      	movcc	r5, #12
 8005422:	2d00      	cmp	r5, #0
 8005424:	4607      	mov	r7, r0
 8005426:	db01      	blt.n	800542c <_malloc_r+0x1c>
 8005428:	42a9      	cmp	r1, r5
 800542a:	d905      	bls.n	8005438 <_malloc_r+0x28>
 800542c:	230c      	movs	r3, #12
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	2600      	movs	r6, #0
 8005432:	4630      	mov	r0, r6
 8005434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005438:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800550c <_malloc_r+0xfc>
 800543c:	f000 f868 	bl	8005510 <__malloc_lock>
 8005440:	f8d8 3000 	ldr.w	r3, [r8]
 8005444:	461c      	mov	r4, r3
 8005446:	bb5c      	cbnz	r4, 80054a0 <_malloc_r+0x90>
 8005448:	4629      	mov	r1, r5
 800544a:	4638      	mov	r0, r7
 800544c:	f7ff ffc0 	bl	80053d0 <sbrk_aligned>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	4604      	mov	r4, r0
 8005454:	d155      	bne.n	8005502 <_malloc_r+0xf2>
 8005456:	f8d8 4000 	ldr.w	r4, [r8]
 800545a:	4626      	mov	r6, r4
 800545c:	2e00      	cmp	r6, #0
 800545e:	d145      	bne.n	80054ec <_malloc_r+0xdc>
 8005460:	2c00      	cmp	r4, #0
 8005462:	d048      	beq.n	80054f6 <_malloc_r+0xe6>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	4631      	mov	r1, r6
 8005468:	4638      	mov	r0, r7
 800546a:	eb04 0903 	add.w	r9, r4, r3
 800546e:	f000 faa5 	bl	80059bc <_sbrk_r>
 8005472:	4581      	cmp	r9, r0
 8005474:	d13f      	bne.n	80054f6 <_malloc_r+0xe6>
 8005476:	6821      	ldr	r1, [r4, #0]
 8005478:	1a6d      	subs	r5, r5, r1
 800547a:	4629      	mov	r1, r5
 800547c:	4638      	mov	r0, r7
 800547e:	f7ff ffa7 	bl	80053d0 <sbrk_aligned>
 8005482:	3001      	adds	r0, #1
 8005484:	d037      	beq.n	80054f6 <_malloc_r+0xe6>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	442b      	add	r3, r5
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	f8d8 3000 	ldr.w	r3, [r8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d038      	beq.n	8005506 <_malloc_r+0xf6>
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	42a2      	cmp	r2, r4
 8005498:	d12b      	bne.n	80054f2 <_malloc_r+0xe2>
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e00f      	b.n	80054c0 <_malloc_r+0xb0>
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	1b52      	subs	r2, r2, r5
 80054a4:	d41f      	bmi.n	80054e6 <_malloc_r+0xd6>
 80054a6:	2a0b      	cmp	r2, #11
 80054a8:	d917      	bls.n	80054da <_malloc_r+0xca>
 80054aa:	1961      	adds	r1, r4, r5
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	6025      	str	r5, [r4, #0]
 80054b0:	bf18      	it	ne
 80054b2:	6059      	strne	r1, [r3, #4]
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	bf08      	it	eq
 80054b8:	f8c8 1000 	streq.w	r1, [r8]
 80054bc:	5162      	str	r2, [r4, r5]
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	4638      	mov	r0, r7
 80054c2:	f104 060b 	add.w	r6, r4, #11
 80054c6:	f000 f829 	bl	800551c <__malloc_unlock>
 80054ca:	f026 0607 	bic.w	r6, r6, #7
 80054ce:	1d23      	adds	r3, r4, #4
 80054d0:	1af2      	subs	r2, r6, r3
 80054d2:	d0ae      	beq.n	8005432 <_malloc_r+0x22>
 80054d4:	1b9b      	subs	r3, r3, r6
 80054d6:	50a3      	str	r3, [r4, r2]
 80054d8:	e7ab      	b.n	8005432 <_malloc_r+0x22>
 80054da:	42a3      	cmp	r3, r4
 80054dc:	6862      	ldr	r2, [r4, #4]
 80054de:	d1dd      	bne.n	800549c <_malloc_r+0x8c>
 80054e0:	f8c8 2000 	str.w	r2, [r8]
 80054e4:	e7ec      	b.n	80054c0 <_malloc_r+0xb0>
 80054e6:	4623      	mov	r3, r4
 80054e8:	6864      	ldr	r4, [r4, #4]
 80054ea:	e7ac      	b.n	8005446 <_malloc_r+0x36>
 80054ec:	4634      	mov	r4, r6
 80054ee:	6876      	ldr	r6, [r6, #4]
 80054f0:	e7b4      	b.n	800545c <_malloc_r+0x4c>
 80054f2:	4613      	mov	r3, r2
 80054f4:	e7cc      	b.n	8005490 <_malloc_r+0x80>
 80054f6:	230c      	movs	r3, #12
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4638      	mov	r0, r7
 80054fc:	f000 f80e 	bl	800551c <__malloc_unlock>
 8005500:	e797      	b.n	8005432 <_malloc_r+0x22>
 8005502:	6025      	str	r5, [r4, #0]
 8005504:	e7dc      	b.n	80054c0 <_malloc_r+0xb0>
 8005506:	605b      	str	r3, [r3, #4]
 8005508:	deff      	udf	#255	; 0xff
 800550a:	bf00      	nop
 800550c:	2000425c 	.word	0x2000425c

08005510 <__malloc_lock>:
 8005510:	4801      	ldr	r0, [pc, #4]	; (8005518 <__malloc_lock+0x8>)
 8005512:	f000 baa0 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 8005516:	bf00      	nop
 8005518:	200043a4 	.word	0x200043a4

0800551c <__malloc_unlock>:
 800551c:	4801      	ldr	r0, [pc, #4]	; (8005524 <__malloc_unlock+0x8>)
 800551e:	f000 ba9b 	b.w	8005a58 <__retarget_lock_release_recursive>
 8005522:	bf00      	nop
 8005524:	200043a4 	.word	0x200043a4

08005528 <__sflush_r>:
 8005528:	898a      	ldrh	r2, [r1, #12]
 800552a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552e:	4605      	mov	r5, r0
 8005530:	0710      	lsls	r0, r2, #28
 8005532:	460c      	mov	r4, r1
 8005534:	d458      	bmi.n	80055e8 <__sflush_r+0xc0>
 8005536:	684b      	ldr	r3, [r1, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dc05      	bgt.n	8005548 <__sflush_r+0x20>
 800553c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	dc02      	bgt.n	8005548 <__sflush_r+0x20>
 8005542:	2000      	movs	r0, #0
 8005544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800554a:	2e00      	cmp	r6, #0
 800554c:	d0f9      	beq.n	8005542 <__sflush_r+0x1a>
 800554e:	2300      	movs	r3, #0
 8005550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005554:	682f      	ldr	r7, [r5, #0]
 8005556:	6a21      	ldr	r1, [r4, #32]
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	d032      	beq.n	80055c2 <__sflush_r+0x9a>
 800555c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	075a      	lsls	r2, r3, #29
 8005562:	d505      	bpl.n	8005570 <__sflush_r+0x48>
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	1ac0      	subs	r0, r0, r3
 8005568:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800556a:	b10b      	cbz	r3, 8005570 <__sflush_r+0x48>
 800556c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800556e:	1ac0      	subs	r0, r0, r3
 8005570:	2300      	movs	r3, #0
 8005572:	4602      	mov	r2, r0
 8005574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005576:	6a21      	ldr	r1, [r4, #32]
 8005578:	4628      	mov	r0, r5
 800557a:	47b0      	blx	r6
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	d106      	bne.n	8005590 <__sflush_r+0x68>
 8005582:	6829      	ldr	r1, [r5, #0]
 8005584:	291d      	cmp	r1, #29
 8005586:	d82b      	bhi.n	80055e0 <__sflush_r+0xb8>
 8005588:	4a29      	ldr	r2, [pc, #164]	; (8005630 <__sflush_r+0x108>)
 800558a:	410a      	asrs	r2, r1
 800558c:	07d6      	lsls	r6, r2, #31
 800558e:	d427      	bmi.n	80055e0 <__sflush_r+0xb8>
 8005590:	2200      	movs	r2, #0
 8005592:	6062      	str	r2, [r4, #4]
 8005594:	04d9      	lsls	r1, r3, #19
 8005596:	6922      	ldr	r2, [r4, #16]
 8005598:	6022      	str	r2, [r4, #0]
 800559a:	d504      	bpl.n	80055a6 <__sflush_r+0x7e>
 800559c:	1c42      	adds	r2, r0, #1
 800559e:	d101      	bne.n	80055a4 <__sflush_r+0x7c>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b903      	cbnz	r3, 80055a6 <__sflush_r+0x7e>
 80055a4:	6560      	str	r0, [r4, #84]	; 0x54
 80055a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055a8:	602f      	str	r7, [r5, #0]
 80055aa:	2900      	cmp	r1, #0
 80055ac:	d0c9      	beq.n	8005542 <__sflush_r+0x1a>
 80055ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b2:	4299      	cmp	r1, r3
 80055b4:	d002      	beq.n	80055bc <__sflush_r+0x94>
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 fa5e 	bl	8005a78 <_free_r>
 80055bc:	2000      	movs	r0, #0
 80055be:	6360      	str	r0, [r4, #52]	; 0x34
 80055c0:	e7c0      	b.n	8005544 <__sflush_r+0x1c>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b0      	blx	r6
 80055c8:	1c41      	adds	r1, r0, #1
 80055ca:	d1c8      	bne.n	800555e <__sflush_r+0x36>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0c5      	beq.n	800555e <__sflush_r+0x36>
 80055d2:	2b1d      	cmp	r3, #29
 80055d4:	d001      	beq.n	80055da <__sflush_r+0xb2>
 80055d6:	2b16      	cmp	r3, #22
 80055d8:	d101      	bne.n	80055de <__sflush_r+0xb6>
 80055da:	602f      	str	r7, [r5, #0]
 80055dc:	e7b1      	b.n	8005542 <__sflush_r+0x1a>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	e7ad      	b.n	8005544 <__sflush_r+0x1c>
 80055e8:	690f      	ldr	r7, [r1, #16]
 80055ea:	2f00      	cmp	r7, #0
 80055ec:	d0a9      	beq.n	8005542 <__sflush_r+0x1a>
 80055ee:	0793      	lsls	r3, r2, #30
 80055f0:	680e      	ldr	r6, [r1, #0]
 80055f2:	bf08      	it	eq
 80055f4:	694b      	ldreq	r3, [r1, #20]
 80055f6:	600f      	str	r7, [r1, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2300      	movne	r3, #0
 80055fc:	eba6 0807 	sub.w	r8, r6, r7
 8005600:	608b      	str	r3, [r1, #8]
 8005602:	f1b8 0f00 	cmp.w	r8, #0
 8005606:	dd9c      	ble.n	8005542 <__sflush_r+0x1a>
 8005608:	6a21      	ldr	r1, [r4, #32]
 800560a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800560c:	4643      	mov	r3, r8
 800560e:	463a      	mov	r2, r7
 8005610:	4628      	mov	r0, r5
 8005612:	47b0      	blx	r6
 8005614:	2800      	cmp	r0, #0
 8005616:	dc06      	bgt.n	8005626 <__sflush_r+0xfe>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e78e      	b.n	8005544 <__sflush_r+0x1c>
 8005626:	4407      	add	r7, r0
 8005628:	eba8 0800 	sub.w	r8, r8, r0
 800562c:	e7e9      	b.n	8005602 <__sflush_r+0xda>
 800562e:	bf00      	nop
 8005630:	dfbffffe 	.word	0xdfbffffe

08005634 <_fflush_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	690b      	ldr	r3, [r1, #16]
 8005638:	4605      	mov	r5, r0
 800563a:	460c      	mov	r4, r1
 800563c:	b913      	cbnz	r3, 8005644 <_fflush_r+0x10>
 800563e:	2500      	movs	r5, #0
 8005640:	4628      	mov	r0, r5
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	b118      	cbz	r0, 800564e <_fflush_r+0x1a>
 8005646:	6a03      	ldr	r3, [r0, #32]
 8005648:	b90b      	cbnz	r3, 800564e <_fflush_r+0x1a>
 800564a:	f000 f8bb 	bl	80057c4 <__sinit>
 800564e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f3      	beq.n	800563e <_fflush_r+0xa>
 8005656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005658:	07d0      	lsls	r0, r2, #31
 800565a:	d404      	bmi.n	8005666 <_fflush_r+0x32>
 800565c:	0599      	lsls	r1, r3, #22
 800565e:	d402      	bmi.n	8005666 <_fflush_r+0x32>
 8005660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005662:	f000 f9f8 	bl	8005a56 <__retarget_lock_acquire_recursive>
 8005666:	4628      	mov	r0, r5
 8005668:	4621      	mov	r1, r4
 800566a:	f7ff ff5d 	bl	8005528 <__sflush_r>
 800566e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005670:	07da      	lsls	r2, r3, #31
 8005672:	4605      	mov	r5, r0
 8005674:	d4e4      	bmi.n	8005640 <_fflush_r+0xc>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	059b      	lsls	r3, r3, #22
 800567a:	d4e1      	bmi.n	8005640 <_fflush_r+0xc>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f000 f9eb 	bl	8005a58 <__retarget_lock_release_recursive>
 8005682:	e7dd      	b.n	8005640 <_fflush_r+0xc>

08005684 <fflush>:
 8005684:	4601      	mov	r1, r0
 8005686:	b920      	cbnz	r0, 8005692 <fflush+0xe>
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <fflush+0x18>)
 800568a:	4905      	ldr	r1, [pc, #20]	; (80056a0 <fflush+0x1c>)
 800568c:	4805      	ldr	r0, [pc, #20]	; (80056a4 <fflush+0x20>)
 800568e:	f000 b8b1 	b.w	80057f4 <_fwalk_sglue>
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <fflush+0x24>)
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	f7ff bfcd 	b.w	8005634 <_fflush_r>
 800569a:	bf00      	nop
 800569c:	20000030 	.word	0x20000030
 80056a0:	08005635 	.word	0x08005635
 80056a4:	2000003c 	.word	0x2000003c
 80056a8:	20000088 	.word	0x20000088

080056ac <std>:
 80056ac:	2300      	movs	r3, #0
 80056ae:	b510      	push	{r4, lr}
 80056b0:	4604      	mov	r4, r0
 80056b2:	e9c0 3300 	strd	r3, r3, [r0]
 80056b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056ba:	6083      	str	r3, [r0, #8]
 80056bc:	8181      	strh	r1, [r0, #12]
 80056be:	6643      	str	r3, [r0, #100]	; 0x64
 80056c0:	81c2      	strh	r2, [r0, #14]
 80056c2:	6183      	str	r3, [r0, #24]
 80056c4:	4619      	mov	r1, r3
 80056c6:	2208      	movs	r2, #8
 80056c8:	305c      	adds	r0, #92	; 0x5c
 80056ca:	f000 f93a 	bl	8005942 <memset>
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <std+0x58>)
 80056d0:	6263      	str	r3, [r4, #36]	; 0x24
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <std+0x5c>)
 80056d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <std+0x60>)
 80056d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <std+0x64>)
 80056dc:	6323      	str	r3, [r4, #48]	; 0x30
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <std+0x68>)
 80056e0:	6224      	str	r4, [r4, #32]
 80056e2:	429c      	cmp	r4, r3
 80056e4:	d006      	beq.n	80056f4 <std+0x48>
 80056e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056ea:	4294      	cmp	r4, r2
 80056ec:	d002      	beq.n	80056f4 <std+0x48>
 80056ee:	33d0      	adds	r3, #208	; 0xd0
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d105      	bne.n	8005700 <std+0x54>
 80056f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fc:	f000 b9aa 	b.w	8005a54 <__retarget_lock_init_recursive>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	080058bd 	.word	0x080058bd
 8005708:	080058df 	.word	0x080058df
 800570c:	08005917 	.word	0x08005917
 8005710:	0800593b 	.word	0x0800593b
 8005714:	20004264 	.word	0x20004264

08005718 <stdio_exit_handler>:
 8005718:	4a02      	ldr	r2, [pc, #8]	; (8005724 <stdio_exit_handler+0xc>)
 800571a:	4903      	ldr	r1, [pc, #12]	; (8005728 <stdio_exit_handler+0x10>)
 800571c:	4803      	ldr	r0, [pc, #12]	; (800572c <stdio_exit_handler+0x14>)
 800571e:	f000 b869 	b.w	80057f4 <_fwalk_sglue>
 8005722:	bf00      	nop
 8005724:	20000030 	.word	0x20000030
 8005728:	08005635 	.word	0x08005635
 800572c:	2000003c 	.word	0x2000003c

08005730 <cleanup_stdio>:
 8005730:	6841      	ldr	r1, [r0, #4]
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <cleanup_stdio+0x34>)
 8005734:	4299      	cmp	r1, r3
 8005736:	b510      	push	{r4, lr}
 8005738:	4604      	mov	r4, r0
 800573a:	d001      	beq.n	8005740 <cleanup_stdio+0x10>
 800573c:	f7ff ff7a 	bl	8005634 <_fflush_r>
 8005740:	68a1      	ldr	r1, [r4, #8]
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <cleanup_stdio+0x38>)
 8005744:	4299      	cmp	r1, r3
 8005746:	d002      	beq.n	800574e <cleanup_stdio+0x1e>
 8005748:	4620      	mov	r0, r4
 800574a:	f7ff ff73 	bl	8005634 <_fflush_r>
 800574e:	68e1      	ldr	r1, [r4, #12]
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <cleanup_stdio+0x3c>)
 8005752:	4299      	cmp	r1, r3
 8005754:	d004      	beq.n	8005760 <cleanup_stdio+0x30>
 8005756:	4620      	mov	r0, r4
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	f7ff bf6a 	b.w	8005634 <_fflush_r>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	bf00      	nop
 8005764:	20004264 	.word	0x20004264
 8005768:	200042cc 	.word	0x200042cc
 800576c:	20004334 	.word	0x20004334

08005770 <global_stdio_init.part.0>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <global_stdio_init.part.0+0x30>)
 8005774:	4c0b      	ldr	r4, [pc, #44]	; (80057a4 <global_stdio_init.part.0+0x34>)
 8005776:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <global_stdio_init.part.0+0x38>)
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	4620      	mov	r0, r4
 800577c:	2200      	movs	r2, #0
 800577e:	2104      	movs	r1, #4
 8005780:	f7ff ff94 	bl	80056ac <std>
 8005784:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005788:	2201      	movs	r2, #1
 800578a:	2109      	movs	r1, #9
 800578c:	f7ff ff8e 	bl	80056ac <std>
 8005790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005794:	2202      	movs	r2, #2
 8005796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800579a:	2112      	movs	r1, #18
 800579c:	f7ff bf86 	b.w	80056ac <std>
 80057a0:	2000439c 	.word	0x2000439c
 80057a4:	20004264 	.word	0x20004264
 80057a8:	08005719 	.word	0x08005719

080057ac <__sfp_lock_acquire>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__sfp_lock_acquire+0x8>)
 80057ae:	f000 b952 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	200043a5 	.word	0x200043a5

080057b8 <__sfp_lock_release>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__sfp_lock_release+0x8>)
 80057ba:	f000 b94d 	b.w	8005a58 <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	200043a5 	.word	0x200043a5

080057c4 <__sinit>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4604      	mov	r4, r0
 80057c8:	f7ff fff0 	bl	80057ac <__sfp_lock_acquire>
 80057cc:	6a23      	ldr	r3, [r4, #32]
 80057ce:	b11b      	cbz	r3, 80057d8 <__sinit+0x14>
 80057d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d4:	f7ff bff0 	b.w	80057b8 <__sfp_lock_release>
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <__sinit+0x28>)
 80057da:	6223      	str	r3, [r4, #32]
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <__sinit+0x2c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f5      	bne.n	80057d0 <__sinit+0xc>
 80057e4:	f7ff ffc4 	bl	8005770 <global_stdio_init.part.0>
 80057e8:	e7f2      	b.n	80057d0 <__sinit+0xc>
 80057ea:	bf00      	nop
 80057ec:	08005731 	.word	0x08005731
 80057f0:	2000439c 	.word	0x2000439c

080057f4 <_fwalk_sglue>:
 80057f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f8:	4607      	mov	r7, r0
 80057fa:	4688      	mov	r8, r1
 80057fc:	4614      	mov	r4, r2
 80057fe:	2600      	movs	r6, #0
 8005800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005804:	f1b9 0901 	subs.w	r9, r9, #1
 8005808:	d505      	bpl.n	8005816 <_fwalk_sglue+0x22>
 800580a:	6824      	ldr	r4, [r4, #0]
 800580c:	2c00      	cmp	r4, #0
 800580e:	d1f7      	bne.n	8005800 <_fwalk_sglue+0xc>
 8005810:	4630      	mov	r0, r6
 8005812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d907      	bls.n	800582c <_fwalk_sglue+0x38>
 800581c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005820:	3301      	adds	r3, #1
 8005822:	d003      	beq.n	800582c <_fwalk_sglue+0x38>
 8005824:	4629      	mov	r1, r5
 8005826:	4638      	mov	r0, r7
 8005828:	47c0      	blx	r8
 800582a:	4306      	orrs	r6, r0
 800582c:	3568      	adds	r5, #104	; 0x68
 800582e:	e7e9      	b.n	8005804 <_fwalk_sglue+0x10>

08005830 <iprintf>:
 8005830:	b40f      	push	{r0, r1, r2, r3}
 8005832:	b507      	push	{r0, r1, r2, lr}
 8005834:	4906      	ldr	r1, [pc, #24]	; (8005850 <iprintf+0x20>)
 8005836:	ab04      	add	r3, sp, #16
 8005838:	6808      	ldr	r0, [r1, #0]
 800583a:	f853 2b04 	ldr.w	r2, [r3], #4
 800583e:	6881      	ldr	r1, [r0, #8]
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	f000 fae7 	bl	8005e14 <_vfiprintf_r>
 8005846:	b003      	add	sp, #12
 8005848:	f85d eb04 	ldr.w	lr, [sp], #4
 800584c:	b004      	add	sp, #16
 800584e:	4770      	bx	lr
 8005850:	20000088 	.word	0x20000088

08005854 <sniprintf>:
 8005854:	b40c      	push	{r2, r3}
 8005856:	b530      	push	{r4, r5, lr}
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <sniprintf+0x64>)
 800585a:	1e0c      	subs	r4, r1, #0
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	b09d      	sub	sp, #116	; 0x74
 8005860:	da08      	bge.n	8005874 <sniprintf+0x20>
 8005862:	238b      	movs	r3, #139	; 0x8b
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	f04f 30ff 	mov.w	r0, #4294967295
 800586a:	b01d      	add	sp, #116	; 0x74
 800586c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005870:	b002      	add	sp, #8
 8005872:	4770      	bx	lr
 8005874:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800587c:	bf14      	ite	ne
 800587e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005882:	4623      	moveq	r3, r4
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	9307      	str	r3, [sp, #28]
 8005888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800588c:	9002      	str	r0, [sp, #8]
 800588e:	9006      	str	r0, [sp, #24]
 8005890:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005894:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005896:	ab21      	add	r3, sp, #132	; 0x84
 8005898:	a902      	add	r1, sp, #8
 800589a:	4628      	mov	r0, r5
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f000 f991 	bl	8005bc4 <_svfiprintf_r>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	bfbc      	itt	lt
 80058a6:	238b      	movlt	r3, #139	; 0x8b
 80058a8:	602b      	strlt	r3, [r5, #0]
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	d0dd      	beq.n	800586a <sniprintf+0x16>
 80058ae:	9b02      	ldr	r3, [sp, #8]
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e7d9      	b.n	800586a <sniprintf+0x16>
 80058b6:	bf00      	nop
 80058b8:	20000088 	.word	0x20000088

080058bc <__sread>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	460c      	mov	r4, r1
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	f000 f868 	bl	8005998 <_read_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	bfab      	itete	ge
 80058cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058ce:	89a3      	ldrhlt	r3, [r4, #12]
 80058d0:	181b      	addge	r3, r3, r0
 80058d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058d6:	bfac      	ite	ge
 80058d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80058da:	81a3      	strhlt	r3, [r4, #12]
 80058dc:	bd10      	pop	{r4, pc}

080058de <__swrite>:
 80058de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e2:	461f      	mov	r7, r3
 80058e4:	898b      	ldrh	r3, [r1, #12]
 80058e6:	05db      	lsls	r3, r3, #23
 80058e8:	4605      	mov	r5, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4616      	mov	r6, r2
 80058ee:	d505      	bpl.n	80058fc <__swrite+0x1e>
 80058f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f4:	2302      	movs	r3, #2
 80058f6:	2200      	movs	r2, #0
 80058f8:	f000 f83c 	bl	8005974 <_lseek_r>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	4632      	mov	r2, r6
 800590a:	463b      	mov	r3, r7
 800590c:	4628      	mov	r0, r5
 800590e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	f000 b863 	b.w	80059dc <_write_r>

08005916 <__sseek>:
 8005916:	b510      	push	{r4, lr}
 8005918:	460c      	mov	r4, r1
 800591a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591e:	f000 f829 	bl	8005974 <_lseek_r>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	bf15      	itete	ne
 8005928:	6560      	strne	r0, [r4, #84]	; 0x54
 800592a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800592e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005932:	81a3      	strheq	r3, [r4, #12]
 8005934:	bf18      	it	ne
 8005936:	81a3      	strhne	r3, [r4, #12]
 8005938:	bd10      	pop	{r4, pc}

0800593a <__sclose>:
 800593a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593e:	f000 b809 	b.w	8005954 <_close_r>

08005942 <memset>:
 8005942:	4402      	add	r2, r0
 8005944:	4603      	mov	r3, r0
 8005946:	4293      	cmp	r3, r2
 8005948:	d100      	bne.n	800594c <memset+0xa>
 800594a:	4770      	bx	lr
 800594c:	f803 1b01 	strb.w	r1, [r3], #1
 8005950:	e7f9      	b.n	8005946 <memset+0x4>
	...

08005954 <_close_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d06      	ldr	r5, [pc, #24]	; (8005970 <_close_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f7ff fb64 	bl	800502c <_close>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_close_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_close_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	200043a0 	.word	0x200043a0

08005974 <_lseek_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <_lseek_r+0x20>)
 8005978:	4604      	mov	r4, r0
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	2200      	movs	r2, #0
 8005980:	602a      	str	r2, [r5, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f7ff fb0f 	bl	8004fa6 <_lseek>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_lseek_r+0x1e>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_lseek_r+0x1e>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	200043a0 	.word	0x200043a0

08005998 <_read_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d07      	ldr	r5, [pc, #28]	; (80059b8 <_read_r+0x20>)
 800599c:	4604      	mov	r4, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	4611      	mov	r1, r2
 80059a2:	2200      	movs	r2, #0
 80059a4:	602a      	str	r2, [r5, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7ff faa5 	bl	8004ef6 <_read>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_read_r+0x1e>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_read_r+0x1e>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	200043a0 	.word	0x200043a0

080059bc <_sbrk_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d06      	ldr	r5, [pc, #24]	; (80059d8 <_sbrk_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb f8d4 	bl	8000b74 <_sbrk>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_sbrk_r+0x1a>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_sbrk_r+0x1a>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200043a0 	.word	0x200043a0

080059dc <_write_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d07      	ldr	r5, [pc, #28]	; (80059fc <_write_r+0x20>)
 80059e0:	4604      	mov	r4, r0
 80059e2:	4608      	mov	r0, r1
 80059e4:	4611      	mov	r1, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	602a      	str	r2, [r5, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f7ff faed 	bl	8004fca <_write>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_write_r+0x1e>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_write_r+0x1e>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200043a0 	.word	0x200043a0

08005a00 <__errno>:
 8005a00:	4b01      	ldr	r3, [pc, #4]	; (8005a08 <__errno+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000088 	.word	0x20000088

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4d0d      	ldr	r5, [pc, #52]	; (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	; (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1b64      	subs	r4, r4, r5
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2600      	movs	r6, #0
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4d0b      	ldr	r5, [pc, #44]	; (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	; (8005a50 <__libc_init_array+0x44>)
 8005a20:	f000 fe0e 	bl	8006640 <_init>
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08006884 	.word	0x08006884
 8005a48:	08006884 	.word	0x08006884
 8005a4c:	08006884 	.word	0x08006884
 8005a50:	08006888 	.word	0x08006888

08005a54 <__retarget_lock_init_recursive>:
 8005a54:	4770      	bx	lr

08005a56 <__retarget_lock_acquire_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <__retarget_lock_release_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <memcpy>:
 8005a5a:	440a      	add	r2, r1
 8005a5c:	4291      	cmp	r1, r2
 8005a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a62:	d100      	bne.n	8005a66 <memcpy+0xc>
 8005a64:	4770      	bx	lr
 8005a66:	b510      	push	{r4, lr}
 8005a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a70:	4291      	cmp	r1, r2
 8005a72:	d1f9      	bne.n	8005a68 <memcpy+0xe>
 8005a74:	bd10      	pop	{r4, pc}
	...

08005a78 <_free_r>:
 8005a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	d044      	beq.n	8005b08 <_free_r+0x90>
 8005a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a82:	9001      	str	r0, [sp, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f1a1 0404 	sub.w	r4, r1, #4
 8005a8a:	bfb8      	it	lt
 8005a8c:	18e4      	addlt	r4, r4, r3
 8005a8e:	f7ff fd3f 	bl	8005510 <__malloc_lock>
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <_free_r+0x94>)
 8005a94:	9801      	ldr	r0, [sp, #4]
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	b933      	cbnz	r3, 8005aa8 <_free_r+0x30>
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	6014      	str	r4, [r2, #0]
 8005a9e:	b003      	add	sp, #12
 8005aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa4:	f7ff bd3a 	b.w	800551c <__malloc_unlock>
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	d908      	bls.n	8005abe <_free_r+0x46>
 8005aac:	6825      	ldr	r5, [r4, #0]
 8005aae:	1961      	adds	r1, r4, r5
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	bf01      	itttt	eq
 8005ab4:	6819      	ldreq	r1, [r3, #0]
 8005ab6:	685b      	ldreq	r3, [r3, #4]
 8005ab8:	1949      	addeq	r1, r1, r5
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	e7ed      	b.n	8005a9a <_free_r+0x22>
 8005abe:	461a      	mov	r2, r3
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	b10b      	cbz	r3, 8005ac8 <_free_r+0x50>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d9fa      	bls.n	8005abe <_free_r+0x46>
 8005ac8:	6811      	ldr	r1, [r2, #0]
 8005aca:	1855      	adds	r5, r2, r1
 8005acc:	42a5      	cmp	r5, r4
 8005ace:	d10b      	bne.n	8005ae8 <_free_r+0x70>
 8005ad0:	6824      	ldr	r4, [r4, #0]
 8005ad2:	4421      	add	r1, r4
 8005ad4:	1854      	adds	r4, r2, r1
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	6011      	str	r1, [r2, #0]
 8005ada:	d1e0      	bne.n	8005a9e <_free_r+0x26>
 8005adc:	681c      	ldr	r4, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	6053      	str	r3, [r2, #4]
 8005ae2:	440c      	add	r4, r1
 8005ae4:	6014      	str	r4, [r2, #0]
 8005ae6:	e7da      	b.n	8005a9e <_free_r+0x26>
 8005ae8:	d902      	bls.n	8005af0 <_free_r+0x78>
 8005aea:	230c      	movs	r3, #12
 8005aec:	6003      	str	r3, [r0, #0]
 8005aee:	e7d6      	b.n	8005a9e <_free_r+0x26>
 8005af0:	6825      	ldr	r5, [r4, #0]
 8005af2:	1961      	adds	r1, r4, r5
 8005af4:	428b      	cmp	r3, r1
 8005af6:	bf04      	itt	eq
 8005af8:	6819      	ldreq	r1, [r3, #0]
 8005afa:	685b      	ldreq	r3, [r3, #4]
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	bf04      	itt	eq
 8005b00:	1949      	addeq	r1, r1, r5
 8005b02:	6021      	streq	r1, [r4, #0]
 8005b04:	6054      	str	r4, [r2, #4]
 8005b06:	e7ca      	b.n	8005a9e <_free_r+0x26>
 8005b08:	b003      	add	sp, #12
 8005b0a:	bd30      	pop	{r4, r5, pc}
 8005b0c:	2000425c 	.word	0x2000425c

08005b10 <__ssputs_r>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	688e      	ldr	r6, [r1, #8]
 8005b16:	461f      	mov	r7, r3
 8005b18:	42be      	cmp	r6, r7
 8005b1a:	680b      	ldr	r3, [r1, #0]
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4690      	mov	r8, r2
 8005b22:	d82c      	bhi.n	8005b7e <__ssputs_r+0x6e>
 8005b24:	898a      	ldrh	r2, [r1, #12]
 8005b26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b2a:	d026      	beq.n	8005b7a <__ssputs_r+0x6a>
 8005b2c:	6965      	ldr	r5, [r4, #20]
 8005b2e:	6909      	ldr	r1, [r1, #16]
 8005b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b34:	eba3 0901 	sub.w	r9, r3, r1
 8005b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b3c:	1c7b      	adds	r3, r7, #1
 8005b3e:	444b      	add	r3, r9
 8005b40:	106d      	asrs	r5, r5, #1
 8005b42:	429d      	cmp	r5, r3
 8005b44:	bf38      	it	cc
 8005b46:	461d      	movcc	r5, r3
 8005b48:	0553      	lsls	r3, r2, #21
 8005b4a:	d527      	bpl.n	8005b9c <__ssputs_r+0x8c>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7ff fc5f 	bl	8005410 <_malloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	b360      	cbz	r0, 8005bb0 <__ssputs_r+0xa0>
 8005b56:	6921      	ldr	r1, [r4, #16]
 8005b58:	464a      	mov	r2, r9
 8005b5a:	f7ff ff7e 	bl	8005a5a <memcpy>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	6126      	str	r6, [r4, #16]
 8005b6c:	6165      	str	r5, [r4, #20]
 8005b6e:	444e      	add	r6, r9
 8005b70:	eba5 0509 	sub.w	r5, r5, r9
 8005b74:	6026      	str	r6, [r4, #0]
 8005b76:	60a5      	str	r5, [r4, #8]
 8005b78:	463e      	mov	r6, r7
 8005b7a:	42be      	cmp	r6, r7
 8005b7c:	d900      	bls.n	8005b80 <__ssputs_r+0x70>
 8005b7e:	463e      	mov	r6, r7
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	4632      	mov	r2, r6
 8005b84:	4641      	mov	r1, r8
 8005b86:	f000 fc85 	bl	8006494 <memmove>
 8005b8a:	68a3      	ldr	r3, [r4, #8]
 8005b8c:	1b9b      	subs	r3, r3, r6
 8005b8e:	60a3      	str	r3, [r4, #8]
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	4433      	add	r3, r6
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	2000      	movs	r0, #0
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	f000 fc93 	bl	80064c8 <_realloc_r>
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d1e0      	bne.n	8005b6a <__ssputs_r+0x5a>
 8005ba8:	6921      	ldr	r1, [r4, #16]
 8005baa:	4650      	mov	r0, sl
 8005bac:	f7ff ff64 	bl	8005a78 <_free_r>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	f8ca 3000 	str.w	r3, [sl]
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc2:	e7e9      	b.n	8005b98 <__ssputs_r+0x88>

08005bc4 <_svfiprintf_r>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	4698      	mov	r8, r3
 8005bca:	898b      	ldrh	r3, [r1, #12]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	b09d      	sub	sp, #116	; 0x74
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	d50e      	bpl.n	8005bf6 <_svfiprintf_r+0x32>
 8005bd8:	690b      	ldr	r3, [r1, #16]
 8005bda:	b963      	cbnz	r3, 8005bf6 <_svfiprintf_r+0x32>
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	f7ff fc17 	bl	8005410 <_malloc_r>
 8005be2:	6028      	str	r0, [r5, #0]
 8005be4:	6128      	str	r0, [r5, #16]
 8005be6:	b920      	cbnz	r0, 8005bf2 <_svfiprintf_r+0x2e>
 8005be8:	230c      	movs	r3, #12
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	e0d0      	b.n	8005d94 <_svfiprintf_r+0x1d0>
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	616b      	str	r3, [r5, #20]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c04:	2330      	movs	r3, #48	; 0x30
 8005c06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005dac <_svfiprintf_r+0x1e8>
 8005c0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c0e:	f04f 0901 	mov.w	r9, #1
 8005c12:	4623      	mov	r3, r4
 8005c14:	469a      	mov	sl, r3
 8005c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1a:	b10a      	cbz	r2, 8005c20 <_svfiprintf_r+0x5c>
 8005c1c:	2a25      	cmp	r2, #37	; 0x25
 8005c1e:	d1f9      	bne.n	8005c14 <_svfiprintf_r+0x50>
 8005c20:	ebba 0b04 	subs.w	fp, sl, r4
 8005c24:	d00b      	beq.n	8005c3e <_svfiprintf_r+0x7a>
 8005c26:	465b      	mov	r3, fp
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7ff ff6f 	bl	8005b10 <__ssputs_r>
 8005c32:	3001      	adds	r0, #1
 8005c34:	f000 80a9 	beq.w	8005d8a <_svfiprintf_r+0x1c6>
 8005c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3a:	445a      	add	r2, fp
 8005c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80a1 	beq.w	8005d8a <_svfiprintf_r+0x1c6>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c52:	f10a 0a01 	add.w	sl, sl, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	9307      	str	r3, [sp, #28]
 8005c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c60:	4654      	mov	r4, sl
 8005c62:	2205      	movs	r2, #5
 8005c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c68:	4850      	ldr	r0, [pc, #320]	; (8005dac <_svfiprintf_r+0x1e8>)
 8005c6a:	f7fa fac1 	bl	80001f0 <memchr>
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	b9d8      	cbnz	r0, 8005caa <_svfiprintf_r+0xe6>
 8005c72:	06d0      	lsls	r0, r2, #27
 8005c74:	bf44      	itt	mi
 8005c76:	2320      	movmi	r3, #32
 8005c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c7c:	0711      	lsls	r1, r2, #28
 8005c7e:	bf44      	itt	mi
 8005c80:	232b      	movmi	r3, #43	; 0x2b
 8005c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c86:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8c:	d015      	beq.n	8005cba <_svfiprintf_r+0xf6>
 8005c8e:	9a07      	ldr	r2, [sp, #28]
 8005c90:	4654      	mov	r4, sl
 8005c92:	2000      	movs	r0, #0
 8005c94:	f04f 0c0a 	mov.w	ip, #10
 8005c98:	4621      	mov	r1, r4
 8005c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c9e:	3b30      	subs	r3, #48	; 0x30
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	d94d      	bls.n	8005d40 <_svfiprintf_r+0x17c>
 8005ca4:	b1b0      	cbz	r0, 8005cd4 <_svfiprintf_r+0x110>
 8005ca6:	9207      	str	r2, [sp, #28]
 8005ca8:	e014      	b.n	8005cd4 <_svfiprintf_r+0x110>
 8005caa:	eba0 0308 	sub.w	r3, r0, r8
 8005cae:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	46a2      	mov	sl, r4
 8005cb8:	e7d2      	b.n	8005c60 <_svfiprintf_r+0x9c>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	9103      	str	r1, [sp, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfbb      	ittet	lt
 8005cc6:	425b      	neglt	r3, r3
 8005cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ccc:	9307      	strge	r3, [sp, #28]
 8005cce:	9307      	strlt	r3, [sp, #28]
 8005cd0:	bfb8      	it	lt
 8005cd2:	9204      	strlt	r2, [sp, #16]
 8005cd4:	7823      	ldrb	r3, [r4, #0]
 8005cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8005cd8:	d10c      	bne.n	8005cf4 <_svfiprintf_r+0x130>
 8005cda:	7863      	ldrb	r3, [r4, #1]
 8005cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cde:	d134      	bne.n	8005d4a <_svfiprintf_r+0x186>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	9203      	str	r2, [sp, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bfb8      	it	lt
 8005cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cf0:	3402      	adds	r4, #2
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005dbc <_svfiprintf_r+0x1f8>
 8005cf8:	7821      	ldrb	r1, [r4, #0]
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	f7fa fa77 	bl	80001f0 <memchr>
 8005d02:	b138      	cbz	r0, 8005d14 <_svfiprintf_r+0x150>
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	eba0 000a 	sub.w	r0, r0, sl
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	4082      	lsls	r2, r0
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	3401      	adds	r4, #1
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d18:	4825      	ldr	r0, [pc, #148]	; (8005db0 <_svfiprintf_r+0x1ec>)
 8005d1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d1e:	2206      	movs	r2, #6
 8005d20:	f7fa fa66 	bl	80001f0 <memchr>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d038      	beq.n	8005d9a <_svfiprintf_r+0x1d6>
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <_svfiprintf_r+0x1f0>)
 8005d2a:	bb1b      	cbnz	r3, 8005d74 <_svfiprintf_r+0x1b0>
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	3307      	adds	r3, #7
 8005d30:	f023 0307 	bic.w	r3, r3, #7
 8005d34:	3308      	adds	r3, #8
 8005d36:	9303      	str	r3, [sp, #12]
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	4433      	add	r3, r6
 8005d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3e:	e768      	b.n	8005c12 <_svfiprintf_r+0x4e>
 8005d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d44:	460c      	mov	r4, r1
 8005d46:	2001      	movs	r0, #1
 8005d48:	e7a6      	b.n	8005c98 <_svfiprintf_r+0xd4>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	3401      	adds	r4, #1
 8005d4e:	9305      	str	r3, [sp, #20]
 8005d50:	4619      	mov	r1, r3
 8005d52:	f04f 0c0a 	mov.w	ip, #10
 8005d56:	4620      	mov	r0, r4
 8005d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d5c:	3a30      	subs	r2, #48	; 0x30
 8005d5e:	2a09      	cmp	r2, #9
 8005d60:	d903      	bls.n	8005d6a <_svfiprintf_r+0x1a6>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0c6      	beq.n	8005cf4 <_svfiprintf_r+0x130>
 8005d66:	9105      	str	r1, [sp, #20]
 8005d68:	e7c4      	b.n	8005cf4 <_svfiprintf_r+0x130>
 8005d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d6e:	4604      	mov	r4, r0
 8005d70:	2301      	movs	r3, #1
 8005d72:	e7f0      	b.n	8005d56 <_svfiprintf_r+0x192>
 8005d74:	ab03      	add	r3, sp, #12
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <_svfiprintf_r+0x1f4>)
 8005d7c:	a904      	add	r1, sp, #16
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f3af 8000 	nop.w
 8005d84:	1c42      	adds	r2, r0, #1
 8005d86:	4606      	mov	r6, r0
 8005d88:	d1d6      	bne.n	8005d38 <_svfiprintf_r+0x174>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	065b      	lsls	r3, r3, #25
 8005d8e:	f53f af2d 	bmi.w	8005bec <_svfiprintf_r+0x28>
 8005d92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d94:	b01d      	add	sp, #116	; 0x74
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	ab03      	add	r3, sp, #12
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	462a      	mov	r2, r5
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <_svfiprintf_r+0x1f4>)
 8005da2:	a904      	add	r1, sp, #16
 8005da4:	4638      	mov	r0, r7
 8005da6:	f000 f9bd 	bl	8006124 <_printf_i>
 8005daa:	e7eb      	b.n	8005d84 <_svfiprintf_r+0x1c0>
 8005dac:	08006846 	.word	0x08006846
 8005db0:	08006850 	.word	0x08006850
 8005db4:	00000000 	.word	0x00000000
 8005db8:	08005b11 	.word	0x08005b11
 8005dbc:	0800684c 	.word	0x0800684c

08005dc0 <__sfputc_r>:
 8005dc0:	6893      	ldr	r3, [r2, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	b410      	push	{r4}
 8005dc8:	6093      	str	r3, [r2, #8]
 8005dca:	da08      	bge.n	8005dde <__sfputc_r+0x1e>
 8005dcc:	6994      	ldr	r4, [r2, #24]
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	db01      	blt.n	8005dd6 <__sfputc_r+0x16>
 8005dd2:	290a      	cmp	r1, #10
 8005dd4:	d103      	bne.n	8005dde <__sfputc_r+0x1e>
 8005dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dda:	f000 bac5 	b.w	8006368 <__swbuf_r>
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	1c58      	adds	r0, r3, #1
 8005de2:	6010      	str	r0, [r2, #0]
 8005de4:	7019      	strb	r1, [r3, #0]
 8005de6:	4608      	mov	r0, r1
 8005de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <__sfputs_r>:
 8005dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df0:	4606      	mov	r6, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	4614      	mov	r4, r2
 8005df6:	18d5      	adds	r5, r2, r3
 8005df8:	42ac      	cmp	r4, r5
 8005dfa:	d101      	bne.n	8005e00 <__sfputs_r+0x12>
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e007      	b.n	8005e10 <__sfputs_r+0x22>
 8005e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e04:	463a      	mov	r2, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff ffda 	bl	8005dc0 <__sfputc_r>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d1f3      	bne.n	8005df8 <__sfputs_r+0xa>
 8005e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e14 <_vfiprintf_r>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	460d      	mov	r5, r1
 8005e1a:	b09d      	sub	sp, #116	; 0x74
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	4698      	mov	r8, r3
 8005e20:	4606      	mov	r6, r0
 8005e22:	b118      	cbz	r0, 8005e2c <_vfiprintf_r+0x18>
 8005e24:	6a03      	ldr	r3, [r0, #32]
 8005e26:	b90b      	cbnz	r3, 8005e2c <_vfiprintf_r+0x18>
 8005e28:	f7ff fccc 	bl	80057c4 <__sinit>
 8005e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e2e:	07d9      	lsls	r1, r3, #31
 8005e30:	d405      	bmi.n	8005e3e <_vfiprintf_r+0x2a>
 8005e32:	89ab      	ldrh	r3, [r5, #12]
 8005e34:	059a      	lsls	r2, r3, #22
 8005e36:	d402      	bmi.n	8005e3e <_vfiprintf_r+0x2a>
 8005e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e3a:	f7ff fe0c 	bl	8005a56 <__retarget_lock_acquire_recursive>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	071b      	lsls	r3, r3, #28
 8005e42:	d501      	bpl.n	8005e48 <_vfiprintf_r+0x34>
 8005e44:	692b      	ldr	r3, [r5, #16]
 8005e46:	b99b      	cbnz	r3, 8005e70 <_vfiprintf_r+0x5c>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 faca 	bl	80063e4 <__swsetup_r>
 8005e50:	b170      	cbz	r0, 8005e70 <_vfiprintf_r+0x5c>
 8005e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e54:	07dc      	lsls	r4, r3, #31
 8005e56:	d504      	bpl.n	8005e62 <_vfiprintf_r+0x4e>
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	b01d      	add	sp, #116	; 0x74
 8005e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	0598      	lsls	r0, r3, #22
 8005e66:	d4f7      	bmi.n	8005e58 <_vfiprintf_r+0x44>
 8005e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e6a:	f7ff fdf5 	bl	8005a58 <__retarget_lock_release_recursive>
 8005e6e:	e7f3      	b.n	8005e58 <_vfiprintf_r+0x44>
 8005e70:	2300      	movs	r3, #0
 8005e72:	9309      	str	r3, [sp, #36]	; 0x24
 8005e74:	2320      	movs	r3, #32
 8005e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7e:	2330      	movs	r3, #48	; 0x30
 8005e80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006034 <_vfiprintf_r+0x220>
 8005e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e88:	f04f 0901 	mov.w	r9, #1
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	469a      	mov	sl, r3
 8005e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e94:	b10a      	cbz	r2, 8005e9a <_vfiprintf_r+0x86>
 8005e96:	2a25      	cmp	r2, #37	; 0x25
 8005e98:	d1f9      	bne.n	8005e8e <_vfiprintf_r+0x7a>
 8005e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e9e:	d00b      	beq.n	8005eb8 <_vfiprintf_r+0xa4>
 8005ea0:	465b      	mov	r3, fp
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff ffa1 	bl	8005dee <__sfputs_r>
 8005eac:	3001      	adds	r0, #1
 8005eae:	f000 80a9 	beq.w	8006004 <_vfiprintf_r+0x1f0>
 8005eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb4:	445a      	add	r2, fp
 8005eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80a1 	beq.w	8006004 <_vfiprintf_r+0x1f0>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ecc:	f10a 0a01 	add.w	sl, sl, #1
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eda:	4654      	mov	r4, sl
 8005edc:	2205      	movs	r2, #5
 8005ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee2:	4854      	ldr	r0, [pc, #336]	; (8006034 <_vfiprintf_r+0x220>)
 8005ee4:	f7fa f984 	bl	80001f0 <memchr>
 8005ee8:	9a04      	ldr	r2, [sp, #16]
 8005eea:	b9d8      	cbnz	r0, 8005f24 <_vfiprintf_r+0x110>
 8005eec:	06d1      	lsls	r1, r2, #27
 8005eee:	bf44      	itt	mi
 8005ef0:	2320      	movmi	r3, #32
 8005ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef6:	0713      	lsls	r3, r2, #28
 8005ef8:	bf44      	itt	mi
 8005efa:	232b      	movmi	r3, #43	; 0x2b
 8005efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f00:	f89a 3000 	ldrb.w	r3, [sl]
 8005f04:	2b2a      	cmp	r3, #42	; 0x2a
 8005f06:	d015      	beq.n	8005f34 <_vfiprintf_r+0x120>
 8005f08:	9a07      	ldr	r2, [sp, #28]
 8005f0a:	4654      	mov	r4, sl
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f04f 0c0a 	mov.w	ip, #10
 8005f12:	4621      	mov	r1, r4
 8005f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f18:	3b30      	subs	r3, #48	; 0x30
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d94d      	bls.n	8005fba <_vfiprintf_r+0x1a6>
 8005f1e:	b1b0      	cbz	r0, 8005f4e <_vfiprintf_r+0x13a>
 8005f20:	9207      	str	r2, [sp, #28]
 8005f22:	e014      	b.n	8005f4e <_vfiprintf_r+0x13a>
 8005f24:	eba0 0308 	sub.w	r3, r0, r8
 8005f28:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	46a2      	mov	sl, r4
 8005f32:	e7d2      	b.n	8005eda <_vfiprintf_r+0xc6>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	1d19      	adds	r1, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	9103      	str	r1, [sp, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfbb      	ittet	lt
 8005f40:	425b      	neglt	r3, r3
 8005f42:	f042 0202 	orrlt.w	r2, r2, #2
 8005f46:	9307      	strge	r3, [sp, #28]
 8005f48:	9307      	strlt	r3, [sp, #28]
 8005f4a:	bfb8      	it	lt
 8005f4c:	9204      	strlt	r2, [sp, #16]
 8005f4e:	7823      	ldrb	r3, [r4, #0]
 8005f50:	2b2e      	cmp	r3, #46	; 0x2e
 8005f52:	d10c      	bne.n	8005f6e <_vfiprintf_r+0x15a>
 8005f54:	7863      	ldrb	r3, [r4, #1]
 8005f56:	2b2a      	cmp	r3, #42	; 0x2a
 8005f58:	d134      	bne.n	8005fc4 <_vfiprintf_r+0x1b0>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9203      	str	r2, [sp, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfb8      	it	lt
 8005f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f6a:	3402      	adds	r4, #2
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006044 <_vfiprintf_r+0x230>
 8005f72:	7821      	ldrb	r1, [r4, #0]
 8005f74:	2203      	movs	r2, #3
 8005f76:	4650      	mov	r0, sl
 8005f78:	f7fa f93a 	bl	80001f0 <memchr>
 8005f7c:	b138      	cbz	r0, 8005f8e <_vfiprintf_r+0x17a>
 8005f7e:	9b04      	ldr	r3, [sp, #16]
 8005f80:	eba0 000a 	sub.w	r0, r0, sl
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	4082      	lsls	r2, r0
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	3401      	adds	r4, #1
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f92:	4829      	ldr	r0, [pc, #164]	; (8006038 <_vfiprintf_r+0x224>)
 8005f94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f98:	2206      	movs	r2, #6
 8005f9a:	f7fa f929 	bl	80001f0 <memchr>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d03f      	beq.n	8006022 <_vfiprintf_r+0x20e>
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <_vfiprintf_r+0x228>)
 8005fa4:	bb1b      	cbnz	r3, 8005fee <_vfiprintf_r+0x1da>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	f023 0307 	bic.w	r3, r3, #7
 8005fae:	3308      	adds	r3, #8
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb4:	443b      	add	r3, r7
 8005fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb8:	e768      	b.n	8005e8c <_vfiprintf_r+0x78>
 8005fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	e7a6      	b.n	8005f12 <_vfiprintf_r+0xfe>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	3401      	adds	r4, #1
 8005fc8:	9305      	str	r3, [sp, #20]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	f04f 0c0a 	mov.w	ip, #10
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd6:	3a30      	subs	r2, #48	; 0x30
 8005fd8:	2a09      	cmp	r2, #9
 8005fda:	d903      	bls.n	8005fe4 <_vfiprintf_r+0x1d0>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0c6      	beq.n	8005f6e <_vfiprintf_r+0x15a>
 8005fe0:	9105      	str	r1, [sp, #20]
 8005fe2:	e7c4      	b.n	8005f6e <_vfiprintf_r+0x15a>
 8005fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe8:	4604      	mov	r4, r0
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7f0      	b.n	8005fd0 <_vfiprintf_r+0x1bc>
 8005fee:	ab03      	add	r3, sp, #12
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <_vfiprintf_r+0x22c>)
 8005ff6:	a904      	add	r1, sp, #16
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f3af 8000 	nop.w
 8005ffe:	4607      	mov	r7, r0
 8006000:	1c78      	adds	r0, r7, #1
 8006002:	d1d6      	bne.n	8005fb2 <_vfiprintf_r+0x19e>
 8006004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006006:	07d9      	lsls	r1, r3, #31
 8006008:	d405      	bmi.n	8006016 <_vfiprintf_r+0x202>
 800600a:	89ab      	ldrh	r3, [r5, #12]
 800600c:	059a      	lsls	r2, r3, #22
 800600e:	d402      	bmi.n	8006016 <_vfiprintf_r+0x202>
 8006010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006012:	f7ff fd21 	bl	8005a58 <__retarget_lock_release_recursive>
 8006016:	89ab      	ldrh	r3, [r5, #12]
 8006018:	065b      	lsls	r3, r3, #25
 800601a:	f53f af1d 	bmi.w	8005e58 <_vfiprintf_r+0x44>
 800601e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006020:	e71c      	b.n	8005e5c <_vfiprintf_r+0x48>
 8006022:	ab03      	add	r3, sp, #12
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	462a      	mov	r2, r5
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <_vfiprintf_r+0x22c>)
 800602a:	a904      	add	r1, sp, #16
 800602c:	4630      	mov	r0, r6
 800602e:	f000 f879 	bl	8006124 <_printf_i>
 8006032:	e7e4      	b.n	8005ffe <_vfiprintf_r+0x1ea>
 8006034:	08006846 	.word	0x08006846
 8006038:	08006850 	.word	0x08006850
 800603c:	00000000 	.word	0x00000000
 8006040:	08005def 	.word	0x08005def
 8006044:	0800684c 	.word	0x0800684c

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4616      	mov	r6, r2
 800604e:	4699      	mov	r9, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	bfb8      	it	lt
 800605c:	4613      	movlt	r3, r2
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006064:	4607      	mov	r7, r0
 8006066:	460c      	mov	r4, r1
 8006068:	b10a      	cbz	r2, 800606e <_printf_common+0x26>
 800606a:	3301      	adds	r3, #1
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	0699      	lsls	r1, r3, #26
 8006072:	bf42      	ittt	mi
 8006074:	6833      	ldrmi	r3, [r6, #0]
 8006076:	3302      	addmi	r3, #2
 8006078:	6033      	strmi	r3, [r6, #0]
 800607a:	6825      	ldr	r5, [r4, #0]
 800607c:	f015 0506 	ands.w	r5, r5, #6
 8006080:	d106      	bne.n	8006090 <_printf_common+0x48>
 8006082:	f104 0a19 	add.w	sl, r4, #25
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	42ab      	cmp	r3, r5
 800608e:	dc26      	bgt.n	80060de <_printf_common+0x96>
 8006090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006094:	1e13      	subs	r3, r2, #0
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	bf18      	it	ne
 800609a:	2301      	movne	r3, #1
 800609c:	0692      	lsls	r2, r2, #26
 800609e:	d42b      	bmi.n	80060f8 <_printf_common+0xb0>
 80060a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a4:	4649      	mov	r1, r9
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c0      	blx	r8
 80060aa:	3001      	adds	r0, #1
 80060ac:	d01e      	beq.n	80060ec <_printf_common+0xa4>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	6922      	ldr	r2, [r4, #16]
 80060b2:	f003 0306 	and.w	r3, r3, #6
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	bf02      	ittt	eq
 80060ba:	68e5      	ldreq	r5, [r4, #12]
 80060bc:	6833      	ldreq	r3, [r6, #0]
 80060be:	1aed      	subeq	r5, r5, r3
 80060c0:	68a3      	ldr	r3, [r4, #8]
 80060c2:	bf0c      	ite	eq
 80060c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c8:	2500      	movne	r5, #0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bfc4      	itt	gt
 80060ce:	1a9b      	subgt	r3, r3, r2
 80060d0:	18ed      	addgt	r5, r5, r3
 80060d2:	2600      	movs	r6, #0
 80060d4:	341a      	adds	r4, #26
 80060d6:	42b5      	cmp	r5, r6
 80060d8:	d11a      	bne.n	8006110 <_printf_common+0xc8>
 80060da:	2000      	movs	r0, #0
 80060dc:	e008      	b.n	80060f0 <_printf_common+0xa8>
 80060de:	2301      	movs	r3, #1
 80060e0:	4652      	mov	r2, sl
 80060e2:	4649      	mov	r1, r9
 80060e4:	4638      	mov	r0, r7
 80060e6:	47c0      	blx	r8
 80060e8:	3001      	adds	r0, #1
 80060ea:	d103      	bne.n	80060f4 <_printf_common+0xac>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f4:	3501      	adds	r5, #1
 80060f6:	e7c6      	b.n	8006086 <_printf_common+0x3e>
 80060f8:	18e1      	adds	r1, r4, r3
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	2030      	movs	r0, #48	; 0x30
 80060fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006102:	4422      	add	r2, r4
 8006104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610c:	3302      	adds	r3, #2
 800610e:	e7c7      	b.n	80060a0 <_printf_common+0x58>
 8006110:	2301      	movs	r3, #1
 8006112:	4622      	mov	r2, r4
 8006114:	4649      	mov	r1, r9
 8006116:	4638      	mov	r0, r7
 8006118:	47c0      	blx	r8
 800611a:	3001      	adds	r0, #1
 800611c:	d0e6      	beq.n	80060ec <_printf_common+0xa4>
 800611e:	3601      	adds	r6, #1
 8006120:	e7d9      	b.n	80060d6 <_printf_common+0x8e>
	...

08006124 <_printf_i>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	7e0f      	ldrb	r7, [r1, #24]
 800612a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800612c:	2f78      	cmp	r7, #120	; 0x78
 800612e:	4691      	mov	r9, r2
 8006130:	4680      	mov	r8, r0
 8006132:	460c      	mov	r4, r1
 8006134:	469a      	mov	sl, r3
 8006136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800613a:	d807      	bhi.n	800614c <_printf_i+0x28>
 800613c:	2f62      	cmp	r7, #98	; 0x62
 800613e:	d80a      	bhi.n	8006156 <_printf_i+0x32>
 8006140:	2f00      	cmp	r7, #0
 8006142:	f000 80d4 	beq.w	80062ee <_printf_i+0x1ca>
 8006146:	2f58      	cmp	r7, #88	; 0x58
 8006148:	f000 80c0 	beq.w	80062cc <_printf_i+0x1a8>
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006154:	e03a      	b.n	80061cc <_printf_i+0xa8>
 8006156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800615a:	2b15      	cmp	r3, #21
 800615c:	d8f6      	bhi.n	800614c <_printf_i+0x28>
 800615e:	a101      	add	r1, pc, #4	; (adr r1, 8006164 <_printf_i+0x40>)
 8006160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061d1 	.word	0x080061d1
 800616c:	0800614d 	.word	0x0800614d
 8006170:	0800614d 	.word	0x0800614d
 8006174:	0800614d 	.word	0x0800614d
 8006178:	0800614d 	.word	0x0800614d
 800617c:	080061d1 	.word	0x080061d1
 8006180:	0800614d 	.word	0x0800614d
 8006184:	0800614d 	.word	0x0800614d
 8006188:	0800614d 	.word	0x0800614d
 800618c:	0800614d 	.word	0x0800614d
 8006190:	080062d5 	.word	0x080062d5
 8006194:	080061fd 	.word	0x080061fd
 8006198:	0800628f 	.word	0x0800628f
 800619c:	0800614d 	.word	0x0800614d
 80061a0:	0800614d 	.word	0x0800614d
 80061a4:	080062f7 	.word	0x080062f7
 80061a8:	0800614d 	.word	0x0800614d
 80061ac:	080061fd 	.word	0x080061fd
 80061b0:	0800614d 	.word	0x0800614d
 80061b4:	0800614d 	.word	0x0800614d
 80061b8:	08006297 	.word	0x08006297
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	602a      	str	r2, [r5, #0]
 80061c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061cc:	2301      	movs	r3, #1
 80061ce:	e09f      	b.n	8006310 <_printf_i+0x1ec>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	0607      	lsls	r7, r0, #24
 80061d6:	f103 0104 	add.w	r1, r3, #4
 80061da:	6029      	str	r1, [r5, #0]
 80061dc:	d501      	bpl.n	80061e2 <_printf_i+0xbe>
 80061de:	681e      	ldr	r6, [r3, #0]
 80061e0:	e003      	b.n	80061ea <_printf_i+0xc6>
 80061e2:	0646      	lsls	r6, r0, #25
 80061e4:	d5fb      	bpl.n	80061de <_printf_i+0xba>
 80061e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	da03      	bge.n	80061f6 <_printf_i+0xd2>
 80061ee:	232d      	movs	r3, #45	; 0x2d
 80061f0:	4276      	negs	r6, r6
 80061f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f6:	485a      	ldr	r0, [pc, #360]	; (8006360 <_printf_i+0x23c>)
 80061f8:	230a      	movs	r3, #10
 80061fa:	e012      	b.n	8006222 <_printf_i+0xfe>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	1d19      	adds	r1, r3, #4
 8006202:	6029      	str	r1, [r5, #0]
 8006204:	0605      	lsls	r5, r0, #24
 8006206:	d501      	bpl.n	800620c <_printf_i+0xe8>
 8006208:	681e      	ldr	r6, [r3, #0]
 800620a:	e002      	b.n	8006212 <_printf_i+0xee>
 800620c:	0641      	lsls	r1, r0, #25
 800620e:	d5fb      	bpl.n	8006208 <_printf_i+0xe4>
 8006210:	881e      	ldrh	r6, [r3, #0]
 8006212:	4853      	ldr	r0, [pc, #332]	; (8006360 <_printf_i+0x23c>)
 8006214:	2f6f      	cmp	r7, #111	; 0x6f
 8006216:	bf0c      	ite	eq
 8006218:	2308      	moveq	r3, #8
 800621a:	230a      	movne	r3, #10
 800621c:	2100      	movs	r1, #0
 800621e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006222:	6865      	ldr	r5, [r4, #4]
 8006224:	60a5      	str	r5, [r4, #8]
 8006226:	2d00      	cmp	r5, #0
 8006228:	bfa2      	ittt	ge
 800622a:	6821      	ldrge	r1, [r4, #0]
 800622c:	f021 0104 	bicge.w	r1, r1, #4
 8006230:	6021      	strge	r1, [r4, #0]
 8006232:	b90e      	cbnz	r6, 8006238 <_printf_i+0x114>
 8006234:	2d00      	cmp	r5, #0
 8006236:	d04b      	beq.n	80062d0 <_printf_i+0x1ac>
 8006238:	4615      	mov	r5, r2
 800623a:	fbb6 f1f3 	udiv	r1, r6, r3
 800623e:	fb03 6711 	mls	r7, r3, r1, r6
 8006242:	5dc7      	ldrb	r7, [r0, r7]
 8006244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006248:	4637      	mov	r7, r6
 800624a:	42bb      	cmp	r3, r7
 800624c:	460e      	mov	r6, r1
 800624e:	d9f4      	bls.n	800623a <_printf_i+0x116>
 8006250:	2b08      	cmp	r3, #8
 8006252:	d10b      	bne.n	800626c <_printf_i+0x148>
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	07de      	lsls	r6, r3, #31
 8006258:	d508      	bpl.n	800626c <_printf_i+0x148>
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	6861      	ldr	r1, [r4, #4]
 800625e:	4299      	cmp	r1, r3
 8006260:	bfde      	ittt	le
 8006262:	2330      	movle	r3, #48	; 0x30
 8006264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006268:	f105 35ff 	addle.w	r5, r5, #4294967295
 800626c:	1b52      	subs	r2, r2, r5
 800626e:	6122      	str	r2, [r4, #16]
 8006270:	f8cd a000 	str.w	sl, [sp]
 8006274:	464b      	mov	r3, r9
 8006276:	aa03      	add	r2, sp, #12
 8006278:	4621      	mov	r1, r4
 800627a:	4640      	mov	r0, r8
 800627c:	f7ff fee4 	bl	8006048 <_printf_common>
 8006280:	3001      	adds	r0, #1
 8006282:	d14a      	bne.n	800631a <_printf_i+0x1f6>
 8006284:	f04f 30ff 	mov.w	r0, #4294967295
 8006288:	b004      	add	sp, #16
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	f043 0320 	orr.w	r3, r3, #32
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	4833      	ldr	r0, [pc, #204]	; (8006364 <_printf_i+0x240>)
 8006298:	2778      	movs	r7, #120	; 0x78
 800629a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6829      	ldr	r1, [r5, #0]
 80062a2:	061f      	lsls	r7, r3, #24
 80062a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062a8:	d402      	bmi.n	80062b0 <_printf_i+0x18c>
 80062aa:	065f      	lsls	r7, r3, #25
 80062ac:	bf48      	it	mi
 80062ae:	b2b6      	uxthmi	r6, r6
 80062b0:	07df      	lsls	r7, r3, #31
 80062b2:	bf48      	it	mi
 80062b4:	f043 0320 	orrmi.w	r3, r3, #32
 80062b8:	6029      	str	r1, [r5, #0]
 80062ba:	bf48      	it	mi
 80062bc:	6023      	strmi	r3, [r4, #0]
 80062be:	b91e      	cbnz	r6, 80062c8 <_printf_i+0x1a4>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	f023 0320 	bic.w	r3, r3, #32
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	2310      	movs	r3, #16
 80062ca:	e7a7      	b.n	800621c <_printf_i+0xf8>
 80062cc:	4824      	ldr	r0, [pc, #144]	; (8006360 <_printf_i+0x23c>)
 80062ce:	e7e4      	b.n	800629a <_printf_i+0x176>
 80062d0:	4615      	mov	r5, r2
 80062d2:	e7bd      	b.n	8006250 <_printf_i+0x12c>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	6826      	ldr	r6, [r4, #0]
 80062d8:	6961      	ldr	r1, [r4, #20]
 80062da:	1d18      	adds	r0, r3, #4
 80062dc:	6028      	str	r0, [r5, #0]
 80062de:	0635      	lsls	r5, r6, #24
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	d501      	bpl.n	80062e8 <_printf_i+0x1c4>
 80062e4:	6019      	str	r1, [r3, #0]
 80062e6:	e002      	b.n	80062ee <_printf_i+0x1ca>
 80062e8:	0670      	lsls	r0, r6, #25
 80062ea:	d5fb      	bpl.n	80062e4 <_printf_i+0x1c0>
 80062ec:	8019      	strh	r1, [r3, #0]
 80062ee:	2300      	movs	r3, #0
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	4615      	mov	r5, r2
 80062f4:	e7bc      	b.n	8006270 <_printf_i+0x14c>
 80062f6:	682b      	ldr	r3, [r5, #0]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	602a      	str	r2, [r5, #0]
 80062fc:	681d      	ldr	r5, [r3, #0]
 80062fe:	6862      	ldr	r2, [r4, #4]
 8006300:	2100      	movs	r1, #0
 8006302:	4628      	mov	r0, r5
 8006304:	f7f9 ff74 	bl	80001f0 <memchr>
 8006308:	b108      	cbz	r0, 800630e <_printf_i+0x1ea>
 800630a:	1b40      	subs	r0, r0, r5
 800630c:	6060      	str	r0, [r4, #4]
 800630e:	6863      	ldr	r3, [r4, #4]
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	2300      	movs	r3, #0
 8006314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006318:	e7aa      	b.n	8006270 <_printf_i+0x14c>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	462a      	mov	r2, r5
 800631e:	4649      	mov	r1, r9
 8006320:	4640      	mov	r0, r8
 8006322:	47d0      	blx	sl
 8006324:	3001      	adds	r0, #1
 8006326:	d0ad      	beq.n	8006284 <_printf_i+0x160>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	079b      	lsls	r3, r3, #30
 800632c:	d413      	bmi.n	8006356 <_printf_i+0x232>
 800632e:	68e0      	ldr	r0, [r4, #12]
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	4298      	cmp	r0, r3
 8006334:	bfb8      	it	lt
 8006336:	4618      	movlt	r0, r3
 8006338:	e7a6      	b.n	8006288 <_printf_i+0x164>
 800633a:	2301      	movs	r3, #1
 800633c:	4632      	mov	r2, r6
 800633e:	4649      	mov	r1, r9
 8006340:	4640      	mov	r0, r8
 8006342:	47d0      	blx	sl
 8006344:	3001      	adds	r0, #1
 8006346:	d09d      	beq.n	8006284 <_printf_i+0x160>
 8006348:	3501      	adds	r5, #1
 800634a:	68e3      	ldr	r3, [r4, #12]
 800634c:	9903      	ldr	r1, [sp, #12]
 800634e:	1a5b      	subs	r3, r3, r1
 8006350:	42ab      	cmp	r3, r5
 8006352:	dcf2      	bgt.n	800633a <_printf_i+0x216>
 8006354:	e7eb      	b.n	800632e <_printf_i+0x20a>
 8006356:	2500      	movs	r5, #0
 8006358:	f104 0619 	add.w	r6, r4, #25
 800635c:	e7f5      	b.n	800634a <_printf_i+0x226>
 800635e:	bf00      	nop
 8006360:	08006857 	.word	0x08006857
 8006364:	08006868 	.word	0x08006868

08006368 <__swbuf_r>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	460e      	mov	r6, r1
 800636c:	4614      	mov	r4, r2
 800636e:	4605      	mov	r5, r0
 8006370:	b118      	cbz	r0, 800637a <__swbuf_r+0x12>
 8006372:	6a03      	ldr	r3, [r0, #32]
 8006374:	b90b      	cbnz	r3, 800637a <__swbuf_r+0x12>
 8006376:	f7ff fa25 	bl	80057c4 <__sinit>
 800637a:	69a3      	ldr	r3, [r4, #24]
 800637c:	60a3      	str	r3, [r4, #8]
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	071a      	lsls	r2, r3, #28
 8006382:	d525      	bpl.n	80063d0 <__swbuf_r+0x68>
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	b31b      	cbz	r3, 80063d0 <__swbuf_r+0x68>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	6922      	ldr	r2, [r4, #16]
 800638c:	1a98      	subs	r0, r3, r2
 800638e:	6963      	ldr	r3, [r4, #20]
 8006390:	b2f6      	uxtb	r6, r6
 8006392:	4283      	cmp	r3, r0
 8006394:	4637      	mov	r7, r6
 8006396:	dc04      	bgt.n	80063a2 <__swbuf_r+0x3a>
 8006398:	4621      	mov	r1, r4
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff f94a 	bl	8005634 <_fflush_r>
 80063a0:	b9e0      	cbnz	r0, 80063dc <__swbuf_r+0x74>
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	701e      	strb	r6, [r3, #0]
 80063b0:	6962      	ldr	r2, [r4, #20]
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d004      	beq.n	80063c2 <__swbuf_r+0x5a>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	07db      	lsls	r3, r3, #31
 80063bc:	d506      	bpl.n	80063cc <__swbuf_r+0x64>
 80063be:	2e0a      	cmp	r6, #10
 80063c0:	d104      	bne.n	80063cc <__swbuf_r+0x64>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff f935 	bl	8005634 <_fflush_r>
 80063ca:	b938      	cbnz	r0, 80063dc <__swbuf_r+0x74>
 80063cc:	4638      	mov	r0, r7
 80063ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d0:	4621      	mov	r1, r4
 80063d2:	4628      	mov	r0, r5
 80063d4:	f000 f806 	bl	80063e4 <__swsetup_r>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d0d5      	beq.n	8006388 <__swbuf_r+0x20>
 80063dc:	f04f 37ff 	mov.w	r7, #4294967295
 80063e0:	e7f4      	b.n	80063cc <__swbuf_r+0x64>
	...

080063e4 <__swsetup_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <__swsetup_r+0xac>)
 80063e8:	4605      	mov	r5, r0
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	460c      	mov	r4, r1
 80063ee:	b118      	cbz	r0, 80063f8 <__swsetup_r+0x14>
 80063f0:	6a03      	ldr	r3, [r0, #32]
 80063f2:	b90b      	cbnz	r3, 80063f8 <__swsetup_r+0x14>
 80063f4:	f7ff f9e6 	bl	80057c4 <__sinit>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063fe:	0718      	lsls	r0, r3, #28
 8006400:	d422      	bmi.n	8006448 <__swsetup_r+0x64>
 8006402:	06d9      	lsls	r1, r3, #27
 8006404:	d407      	bmi.n	8006416 <__swsetup_r+0x32>
 8006406:	2309      	movs	r3, #9
 8006408:	602b      	str	r3, [r5, #0]
 800640a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e034      	b.n	8006480 <__swsetup_r+0x9c>
 8006416:	0758      	lsls	r0, r3, #29
 8006418:	d512      	bpl.n	8006440 <__swsetup_r+0x5c>
 800641a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800641c:	b141      	cbz	r1, 8006430 <__swsetup_r+0x4c>
 800641e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006422:	4299      	cmp	r1, r3
 8006424:	d002      	beq.n	800642c <__swsetup_r+0x48>
 8006426:	4628      	mov	r0, r5
 8006428:	f7ff fb26 	bl	8005a78 <_free_r>
 800642c:	2300      	movs	r3, #0
 800642e:	6363      	str	r3, [r4, #52]	; 0x34
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	2300      	movs	r3, #0
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f043 0308 	orr.w	r3, r3, #8
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	b94b      	cbnz	r3, 8006460 <__swsetup_r+0x7c>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006456:	d003      	beq.n	8006460 <__swsetup_r+0x7c>
 8006458:	4621      	mov	r1, r4
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f889 	bl	8006572 <__smakebuf_r>
 8006460:	89a0      	ldrh	r0, [r4, #12]
 8006462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006466:	f010 0301 	ands.w	r3, r0, #1
 800646a:	d00a      	beq.n	8006482 <__swsetup_r+0x9e>
 800646c:	2300      	movs	r3, #0
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	6963      	ldr	r3, [r4, #20]
 8006472:	425b      	negs	r3, r3
 8006474:	61a3      	str	r3, [r4, #24]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	b943      	cbnz	r3, 800648c <__swsetup_r+0xa8>
 800647a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800647e:	d1c4      	bne.n	800640a <__swsetup_r+0x26>
 8006480:	bd38      	pop	{r3, r4, r5, pc}
 8006482:	0781      	lsls	r1, r0, #30
 8006484:	bf58      	it	pl
 8006486:	6963      	ldrpl	r3, [r4, #20]
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	e7f4      	b.n	8006476 <__swsetup_r+0x92>
 800648c:	2000      	movs	r0, #0
 800648e:	e7f7      	b.n	8006480 <__swsetup_r+0x9c>
 8006490:	20000088 	.word	0x20000088

08006494 <memmove>:
 8006494:	4288      	cmp	r0, r1
 8006496:	b510      	push	{r4, lr}
 8006498:	eb01 0402 	add.w	r4, r1, r2
 800649c:	d902      	bls.n	80064a4 <memmove+0x10>
 800649e:	4284      	cmp	r4, r0
 80064a0:	4623      	mov	r3, r4
 80064a2:	d807      	bhi.n	80064b4 <memmove+0x20>
 80064a4:	1e43      	subs	r3, r0, #1
 80064a6:	42a1      	cmp	r1, r4
 80064a8:	d008      	beq.n	80064bc <memmove+0x28>
 80064aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064b2:	e7f8      	b.n	80064a6 <memmove+0x12>
 80064b4:	4402      	add	r2, r0
 80064b6:	4601      	mov	r1, r0
 80064b8:	428a      	cmp	r2, r1
 80064ba:	d100      	bne.n	80064be <memmove+0x2a>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064c6:	e7f7      	b.n	80064b8 <memmove+0x24>

080064c8 <_realloc_r>:
 80064c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064cc:	4680      	mov	r8, r0
 80064ce:	4614      	mov	r4, r2
 80064d0:	460e      	mov	r6, r1
 80064d2:	b921      	cbnz	r1, 80064de <_realloc_r+0x16>
 80064d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d8:	4611      	mov	r1, r2
 80064da:	f7fe bf99 	b.w	8005410 <_malloc_r>
 80064de:	b92a      	cbnz	r2, 80064ec <_realloc_r+0x24>
 80064e0:	f7ff faca 	bl	8005a78 <_free_r>
 80064e4:	4625      	mov	r5, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064ec:	f000 f8a0 	bl	8006630 <_malloc_usable_size_r>
 80064f0:	4284      	cmp	r4, r0
 80064f2:	4607      	mov	r7, r0
 80064f4:	d802      	bhi.n	80064fc <_realloc_r+0x34>
 80064f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064fa:	d812      	bhi.n	8006522 <_realloc_r+0x5a>
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f7fe ff86 	bl	8005410 <_malloc_r>
 8006504:	4605      	mov	r5, r0
 8006506:	2800      	cmp	r0, #0
 8006508:	d0ed      	beq.n	80064e6 <_realloc_r+0x1e>
 800650a:	42bc      	cmp	r4, r7
 800650c:	4622      	mov	r2, r4
 800650e:	4631      	mov	r1, r6
 8006510:	bf28      	it	cs
 8006512:	463a      	movcs	r2, r7
 8006514:	f7ff faa1 	bl	8005a5a <memcpy>
 8006518:	4631      	mov	r1, r6
 800651a:	4640      	mov	r0, r8
 800651c:	f7ff faac 	bl	8005a78 <_free_r>
 8006520:	e7e1      	b.n	80064e6 <_realloc_r+0x1e>
 8006522:	4635      	mov	r5, r6
 8006524:	e7df      	b.n	80064e6 <_realloc_r+0x1e>

08006526 <__swhatbuf_r>:
 8006526:	b570      	push	{r4, r5, r6, lr}
 8006528:	460c      	mov	r4, r1
 800652a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652e:	2900      	cmp	r1, #0
 8006530:	b096      	sub	sp, #88	; 0x58
 8006532:	4615      	mov	r5, r2
 8006534:	461e      	mov	r6, r3
 8006536:	da0d      	bge.n	8006554 <__swhatbuf_r+0x2e>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800653e:	f04f 0100 	mov.w	r1, #0
 8006542:	bf0c      	ite	eq
 8006544:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006548:	2340      	movne	r3, #64	; 0x40
 800654a:	2000      	movs	r0, #0
 800654c:	6031      	str	r1, [r6, #0]
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	b016      	add	sp, #88	; 0x58
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	466a      	mov	r2, sp
 8006556:	f000 f849 	bl	80065ec <_fstat_r>
 800655a:	2800      	cmp	r0, #0
 800655c:	dbec      	blt.n	8006538 <__swhatbuf_r+0x12>
 800655e:	9901      	ldr	r1, [sp, #4]
 8006560:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006564:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006568:	4259      	negs	r1, r3
 800656a:	4159      	adcs	r1, r3
 800656c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006570:	e7eb      	b.n	800654a <__swhatbuf_r+0x24>

08006572 <__smakebuf_r>:
 8006572:	898b      	ldrh	r3, [r1, #12]
 8006574:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006576:	079d      	lsls	r5, r3, #30
 8006578:	4606      	mov	r6, r0
 800657a:	460c      	mov	r4, r1
 800657c:	d507      	bpl.n	800658e <__smakebuf_r+0x1c>
 800657e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	2301      	movs	r3, #1
 8006588:	6163      	str	r3, [r4, #20]
 800658a:	b002      	add	sp, #8
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	ab01      	add	r3, sp, #4
 8006590:	466a      	mov	r2, sp
 8006592:	f7ff ffc8 	bl	8006526 <__swhatbuf_r>
 8006596:	9900      	ldr	r1, [sp, #0]
 8006598:	4605      	mov	r5, r0
 800659a:	4630      	mov	r0, r6
 800659c:	f7fe ff38 	bl	8005410 <_malloc_r>
 80065a0:	b948      	cbnz	r0, 80065b6 <__smakebuf_r+0x44>
 80065a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a6:	059a      	lsls	r2, r3, #22
 80065a8:	d4ef      	bmi.n	800658a <__smakebuf_r+0x18>
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	f043 0302 	orr.w	r3, r3, #2
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	e7e3      	b.n	800657e <__smakebuf_r+0xc>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	6020      	str	r0, [r4, #0]
 80065ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065be:	81a3      	strh	r3, [r4, #12]
 80065c0:	9b00      	ldr	r3, [sp, #0]
 80065c2:	6163      	str	r3, [r4, #20]
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	6120      	str	r0, [r4, #16]
 80065c8:	b15b      	cbz	r3, 80065e2 <__smakebuf_r+0x70>
 80065ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ce:	4630      	mov	r0, r6
 80065d0:	f000 f81e 	bl	8006610 <_isatty_r>
 80065d4:	b128      	cbz	r0, 80065e2 <__smakebuf_r+0x70>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	431d      	orrs	r5, r3
 80065e6:	81a5      	strh	r5, [r4, #12]
 80065e8:	e7cf      	b.n	800658a <__smakebuf_r+0x18>
	...

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	; (800660c <_fstat_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fe fd5e 	bl	80050ba <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	200043a0 	.word	0x200043a0

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	; (800662c <_isatty_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fe feb4 	bl	8005388 <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	200043a0 	.word	0x200043a0

08006630 <_malloc_usable_size_r>:
 8006630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006634:	1f18      	subs	r0, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	bfbc      	itt	lt
 800663a:	580b      	ldrlt	r3, [r1, r0]
 800663c:	18c0      	addlt	r0, r0, r3
 800663e:	4770      	bx	lr

08006640 <_init>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr

0800664c <_fini>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr
